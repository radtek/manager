/* soapH.h
   Generated by gSOAP 2.8.69 for C:\gsoap-2.8\gsoap\bin\win32\service.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_unsignedByte_DEFINED
#define SOAP_TYPE_unsignedByte_DEFINED

inline void soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

inline int soap_write_unsignedByte(struct soap *soap, unsigned char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

inline int soap_read_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedByte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedByte(struct soap *soap, const char *URL, unsigned char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedByte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (::soap_read_unsignedByte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_unsignedInt_DEFINED
#define SOAP_TYPE_unsignedInt_DEFINED

inline void soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

inline int soap_write_unsignedInt(struct soap *soap, unsigned int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

inline int soap_read_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedInt(struct soap *soap, const char *URL, unsigned int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedInt(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (::soap_read_unsignedInt(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__sendBillResponse_DEFINED
#define SOAP_TYPE_ns1__sendBillResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sendBillResponse(struct soap*, const char*, int, const ns1__sendBillResponse *, const char*);
SOAP_FMAC3 ns1__sendBillResponse * SOAP_FMAC4 soap_in_ns1__sendBillResponse(struct soap*, const char*, ns1__sendBillResponse *, const char*);
SOAP_FMAC1 ns1__sendBillResponse * SOAP_FMAC2 soap_instantiate_ns1__sendBillResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__sendBillResponse * soap_new_ns1__sendBillResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__sendBillResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__sendBillResponse * soap_new_req_ns1__sendBillResponse(
	struct soap *soap)
{
	ns1__sendBillResponse *_p = ::soap_new_ns1__sendBillResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__sendBillResponse * soap_new_set_ns1__sendBillResponse(
	struct soap *soap,
	xsd__base64Binary *applicationResponse)
{
	ns1__sendBillResponse *_p = ::soap_new_ns1__sendBillResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__sendBillResponse::applicationResponse = applicationResponse;
	}
	return _p;
}

inline int soap_write_ns1__sendBillResponse(struct soap *soap, ns1__sendBillResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendBillResponse", p->soap_type() == SOAP_TYPE_ns1__sendBillResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__sendBillResponse(struct soap *soap, const char *URL, ns1__sendBillResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendBillResponse", p->soap_type() == SOAP_TYPE_ns1__sendBillResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__sendBillResponse(struct soap *soap, const char *URL, ns1__sendBillResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendBillResponse", p->soap_type() == SOAP_TYPE_ns1__sendBillResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__sendBillResponse * SOAP_FMAC4 soap_get_ns1__sendBillResponse(struct soap*, ns1__sendBillResponse *, const char*, const char*);

inline int soap_read_ns1__sendBillResponse(struct soap *soap, ns1__sendBillResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__sendBillResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__sendBillResponse(struct soap *soap, const char *URL, ns1__sendBillResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__sendBillResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__sendBillResponse(struct soap *soap, ns1__sendBillResponse *p)
{
	if (::soap_read_ns1__sendBillResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__sendBill_DEFINED
#define SOAP_TYPE_ns1__sendBill_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sendBill(struct soap*, const char*, int, const ns1__sendBill *, const char*);
SOAP_FMAC3 ns1__sendBill * SOAP_FMAC4 soap_in_ns1__sendBill(struct soap*, const char*, ns1__sendBill *, const char*);
SOAP_FMAC1 ns1__sendBill * SOAP_FMAC2 soap_instantiate_ns1__sendBill(struct soap*, int, const char*, const char*, size_t*);

inline ns1__sendBill * soap_new_ns1__sendBill(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__sendBill(soap, n, NULL, NULL, NULL);
}

inline ns1__sendBill * soap_new_req_ns1__sendBill(
	struct soap *soap)
{
	ns1__sendBill *_p = ::soap_new_ns1__sendBill(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__sendBill * soap_new_set_ns1__sendBill(
	struct soap *soap,
	std::string *fileName,
	xsd__base64Binary *contentFile,
	std::string *partyType)
{
	ns1__sendBill *_p = ::soap_new_ns1__sendBill(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__sendBill::fileName = fileName;
		_p->ns1__sendBill::contentFile = contentFile;
		_p->ns1__sendBill::partyType = partyType;
	}
	return _p;
}

inline int soap_write_ns1__sendBill(struct soap *soap, ns1__sendBill const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendBill", p->soap_type() == SOAP_TYPE_ns1__sendBill ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__sendBill(struct soap *soap, const char *URL, ns1__sendBill const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendBill", p->soap_type() == SOAP_TYPE_ns1__sendBill ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__sendBill(struct soap *soap, const char *URL, ns1__sendBill const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendBill", p->soap_type() == SOAP_TYPE_ns1__sendBill ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__sendBill * SOAP_FMAC4 soap_get_ns1__sendBill(struct soap*, ns1__sendBill *, const char*, const char*);

inline int soap_read_ns1__sendBill(struct soap *soap, ns1__sendBill *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__sendBill(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__sendBill(struct soap *soap, const char *URL, ns1__sendBill *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__sendBill(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__sendBill(struct soap *soap, ns1__sendBill *p)
{
	if (::soap_read_ns1__sendBill(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__sendPackResponse_DEFINED
#define SOAP_TYPE_ns1__sendPackResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sendPackResponse(struct soap*, const char*, int, const ns1__sendPackResponse *, const char*);
SOAP_FMAC3 ns1__sendPackResponse * SOAP_FMAC4 soap_in_ns1__sendPackResponse(struct soap*, const char*, ns1__sendPackResponse *, const char*);
SOAP_FMAC1 ns1__sendPackResponse * SOAP_FMAC2 soap_instantiate_ns1__sendPackResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__sendPackResponse * soap_new_ns1__sendPackResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__sendPackResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__sendPackResponse * soap_new_req_ns1__sendPackResponse(
	struct soap *soap)
{
	ns1__sendPackResponse *_p = ::soap_new_ns1__sendPackResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__sendPackResponse * soap_new_set_ns1__sendPackResponse(
	struct soap *soap,
	std::string *ticket)
{
	ns1__sendPackResponse *_p = ::soap_new_ns1__sendPackResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__sendPackResponse::ticket = ticket;
	}
	return _p;
}

inline int soap_write_ns1__sendPackResponse(struct soap *soap, ns1__sendPackResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendPackResponse", p->soap_type() == SOAP_TYPE_ns1__sendPackResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__sendPackResponse(struct soap *soap, const char *URL, ns1__sendPackResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendPackResponse", p->soap_type() == SOAP_TYPE_ns1__sendPackResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__sendPackResponse(struct soap *soap, const char *URL, ns1__sendPackResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendPackResponse", p->soap_type() == SOAP_TYPE_ns1__sendPackResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__sendPackResponse * SOAP_FMAC4 soap_get_ns1__sendPackResponse(struct soap*, ns1__sendPackResponse *, const char*, const char*);

inline int soap_read_ns1__sendPackResponse(struct soap *soap, ns1__sendPackResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__sendPackResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__sendPackResponse(struct soap *soap, const char *URL, ns1__sendPackResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__sendPackResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__sendPackResponse(struct soap *soap, ns1__sendPackResponse *p)
{
	if (::soap_read_ns1__sendPackResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__sendPack_DEFINED
#define SOAP_TYPE_ns1__sendPack_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sendPack(struct soap*, const char*, int, const ns1__sendPack *, const char*);
SOAP_FMAC3 ns1__sendPack * SOAP_FMAC4 soap_in_ns1__sendPack(struct soap*, const char*, ns1__sendPack *, const char*);
SOAP_FMAC1 ns1__sendPack * SOAP_FMAC2 soap_instantiate_ns1__sendPack(struct soap*, int, const char*, const char*, size_t*);

inline ns1__sendPack * soap_new_ns1__sendPack(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__sendPack(soap, n, NULL, NULL, NULL);
}

inline ns1__sendPack * soap_new_req_ns1__sendPack(
	struct soap *soap)
{
	ns1__sendPack *_p = ::soap_new_ns1__sendPack(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__sendPack * soap_new_set_ns1__sendPack(
	struct soap *soap,
	std::string *fileName,
	xsd__base64Binary *contentFile,
	std::string *partyType)
{
	ns1__sendPack *_p = ::soap_new_ns1__sendPack(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__sendPack::fileName = fileName;
		_p->ns1__sendPack::contentFile = contentFile;
		_p->ns1__sendPack::partyType = partyType;
	}
	return _p;
}

inline int soap_write_ns1__sendPack(struct soap *soap, ns1__sendPack const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendPack", p->soap_type() == SOAP_TYPE_ns1__sendPack ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__sendPack(struct soap *soap, const char *URL, ns1__sendPack const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendPack", p->soap_type() == SOAP_TYPE_ns1__sendPack ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__sendPack(struct soap *soap, const char *URL, ns1__sendPack const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendPack", p->soap_type() == SOAP_TYPE_ns1__sendPack ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__sendPack * SOAP_FMAC4 soap_get_ns1__sendPack(struct soap*, ns1__sendPack *, const char*, const char*);

inline int soap_read_ns1__sendPack(struct soap *soap, ns1__sendPack *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__sendPack(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__sendPack(struct soap *soap, const char *URL, ns1__sendPack *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__sendPack(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__sendPack(struct soap *soap, ns1__sendPack *p)
{
	if (::soap_read_ns1__sendPack(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__statusResponse_DEFINED
#define SOAP_TYPE_ns1__statusResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__statusResponse(struct soap*, const char*, int, const ns1__statusResponse *, const char*);
SOAP_FMAC3 ns1__statusResponse * SOAP_FMAC4 soap_in_ns1__statusResponse(struct soap*, const char*, ns1__statusResponse *, const char*);
SOAP_FMAC1 ns1__statusResponse * SOAP_FMAC2 soap_instantiate_ns1__statusResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__statusResponse * soap_new_ns1__statusResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__statusResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__statusResponse * soap_new_req_ns1__statusResponse(
	struct soap *soap)
{
	ns1__statusResponse *_p = ::soap_new_ns1__statusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__statusResponse * soap_new_set_ns1__statusResponse(
	struct soap *soap,
	xsd__base64Binary *content,
	std::string *statusCode)
{
	ns1__statusResponse *_p = ::soap_new_ns1__statusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__statusResponse::content = content;
		_p->ns1__statusResponse::statusCode = statusCode;
	}
	return _p;
}

inline int soap_write_ns1__statusResponse(struct soap *soap, ns1__statusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:statusResponse", p->soap_type() == SOAP_TYPE_ns1__statusResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__statusResponse(struct soap *soap, const char *URL, ns1__statusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:statusResponse", p->soap_type() == SOAP_TYPE_ns1__statusResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__statusResponse(struct soap *soap, const char *URL, ns1__statusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:statusResponse", p->soap_type() == SOAP_TYPE_ns1__statusResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__statusResponse * SOAP_FMAC4 soap_get_ns1__statusResponse(struct soap*, ns1__statusResponse *, const char*, const char*);

inline int soap_read_ns1__statusResponse(struct soap *soap, ns1__statusResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__statusResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__statusResponse(struct soap *soap, const char *URL, ns1__statusResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__statusResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__statusResponse(struct soap *soap, ns1__statusResponse *p)
{
	if (::soap_read_ns1__statusResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getStatusResponse_DEFINED
#define SOAP_TYPE_ns1__getStatusResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getStatusResponse(struct soap*, const char*, int, const ns1__getStatusResponse *, const char*);
SOAP_FMAC3 ns1__getStatusResponse * SOAP_FMAC4 soap_in_ns1__getStatusResponse(struct soap*, const char*, ns1__getStatusResponse *, const char*);
SOAP_FMAC1 ns1__getStatusResponse * SOAP_FMAC2 soap_instantiate_ns1__getStatusResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getStatusResponse * soap_new_ns1__getStatusResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getStatusResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__getStatusResponse * soap_new_req_ns1__getStatusResponse(
	struct soap *soap)
{
	ns1__getStatusResponse *_p = ::soap_new_ns1__getStatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__getStatusResponse * soap_new_set_ns1__getStatusResponse(
	struct soap *soap,
	ns1__statusResponse *status)
{
	ns1__getStatusResponse *_p = ::soap_new_ns1__getStatusResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getStatusResponse::status = status;
	}
	return _p;
}

inline int soap_write_ns1__getStatusResponse(struct soap *soap, ns1__getStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getStatusResponse", p->soap_type() == SOAP_TYPE_ns1__getStatusResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getStatusResponse(struct soap *soap, const char *URL, ns1__getStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getStatusResponse", p->soap_type() == SOAP_TYPE_ns1__getStatusResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getStatusResponse(struct soap *soap, const char *URL, ns1__getStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getStatusResponse", p->soap_type() == SOAP_TYPE_ns1__getStatusResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__getStatusResponse * SOAP_FMAC4 soap_get_ns1__getStatusResponse(struct soap*, ns1__getStatusResponse *, const char*, const char*);

inline int soap_read_ns1__getStatusResponse(struct soap *soap, ns1__getStatusResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__getStatusResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getStatusResponse(struct soap *soap, const char *URL, ns1__getStatusResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__getStatusResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getStatusResponse(struct soap *soap, ns1__getStatusResponse *p)
{
	if (::soap_read_ns1__getStatusResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getStatus_DEFINED
#define SOAP_TYPE_ns1__getStatus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getStatus(struct soap*, const char*, int, const ns1__getStatus *, const char*);
SOAP_FMAC3 ns1__getStatus * SOAP_FMAC4 soap_in_ns1__getStatus(struct soap*, const char*, ns1__getStatus *, const char*);
SOAP_FMAC1 ns1__getStatus * SOAP_FMAC2 soap_instantiate_ns1__getStatus(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getStatus * soap_new_ns1__getStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getStatus(soap, n, NULL, NULL, NULL);
}

inline ns1__getStatus * soap_new_req_ns1__getStatus(
	struct soap *soap)
{
	ns1__getStatus *_p = ::soap_new_ns1__getStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__getStatus * soap_new_set_ns1__getStatus(
	struct soap *soap,
	std::string *ticket)
{
	ns1__getStatus *_p = ::soap_new_ns1__getStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getStatus::ticket = ticket;
	}
	return _p;
}

inline int soap_write_ns1__getStatus(struct soap *soap, ns1__getStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getStatus", p->soap_type() == SOAP_TYPE_ns1__getStatus ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getStatus(struct soap *soap, const char *URL, ns1__getStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getStatus", p->soap_type() == SOAP_TYPE_ns1__getStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getStatus(struct soap *soap, const char *URL, ns1__getStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getStatus", p->soap_type() == SOAP_TYPE_ns1__getStatus ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__getStatus * SOAP_FMAC4 soap_get_ns1__getStatus(struct soap*, ns1__getStatus *, const char*, const char*);

inline int soap_read_ns1__getStatus(struct soap *soap, ns1__getStatus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__getStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getStatus(struct soap *soap, const char *URL, ns1__getStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__getStatus(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getStatus(struct soap *soap, ns1__getStatus *p)
{
	if (::soap_read_ns1__getStatus(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__sendSummaryResponse_DEFINED
#define SOAP_TYPE_ns1__sendSummaryResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sendSummaryResponse(struct soap*, const char*, int, const ns1__sendSummaryResponse *, const char*);
SOAP_FMAC3 ns1__sendSummaryResponse * SOAP_FMAC4 soap_in_ns1__sendSummaryResponse(struct soap*, const char*, ns1__sendSummaryResponse *, const char*);
SOAP_FMAC1 ns1__sendSummaryResponse * SOAP_FMAC2 soap_instantiate_ns1__sendSummaryResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__sendSummaryResponse * soap_new_ns1__sendSummaryResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__sendSummaryResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__sendSummaryResponse * soap_new_req_ns1__sendSummaryResponse(
	struct soap *soap)
{
	ns1__sendSummaryResponse *_p = ::soap_new_ns1__sendSummaryResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__sendSummaryResponse * soap_new_set_ns1__sendSummaryResponse(
	struct soap *soap,
	std::string *ticket)
{
	ns1__sendSummaryResponse *_p = ::soap_new_ns1__sendSummaryResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__sendSummaryResponse::ticket = ticket;
	}
	return _p;
}

inline int soap_write_ns1__sendSummaryResponse(struct soap *soap, ns1__sendSummaryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendSummaryResponse", p->soap_type() == SOAP_TYPE_ns1__sendSummaryResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__sendSummaryResponse(struct soap *soap, const char *URL, ns1__sendSummaryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendSummaryResponse", p->soap_type() == SOAP_TYPE_ns1__sendSummaryResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__sendSummaryResponse(struct soap *soap, const char *URL, ns1__sendSummaryResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendSummaryResponse", p->soap_type() == SOAP_TYPE_ns1__sendSummaryResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__sendSummaryResponse * SOAP_FMAC4 soap_get_ns1__sendSummaryResponse(struct soap*, ns1__sendSummaryResponse *, const char*, const char*);

inline int soap_read_ns1__sendSummaryResponse(struct soap *soap, ns1__sendSummaryResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__sendSummaryResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__sendSummaryResponse(struct soap *soap, const char *URL, ns1__sendSummaryResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__sendSummaryResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__sendSummaryResponse(struct soap *soap, ns1__sendSummaryResponse *p)
{
	if (::soap_read_ns1__sendSummaryResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__sendSummary_DEFINED
#define SOAP_TYPE_ns1__sendSummary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sendSummary(struct soap*, const char*, int, const ns1__sendSummary *, const char*);
SOAP_FMAC3 ns1__sendSummary * SOAP_FMAC4 soap_in_ns1__sendSummary(struct soap*, const char*, ns1__sendSummary *, const char*);
SOAP_FMAC1 ns1__sendSummary * SOAP_FMAC2 soap_instantiate_ns1__sendSummary(struct soap*, int, const char*, const char*, size_t*);

inline ns1__sendSummary * soap_new_ns1__sendSummary(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__sendSummary(soap, n, NULL, NULL, NULL);
}

inline ns1__sendSummary * soap_new_req_ns1__sendSummary(
	struct soap *soap)
{
	ns1__sendSummary *_p = ::soap_new_ns1__sendSummary(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__sendSummary * soap_new_set_ns1__sendSummary(
	struct soap *soap,
	std::string *fileName,
	xsd__base64Binary *contentFile,
	std::string *partyType)
{
	ns1__sendSummary *_p = ::soap_new_ns1__sendSummary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__sendSummary::fileName = fileName;
		_p->ns1__sendSummary::contentFile = contentFile;
		_p->ns1__sendSummary::partyType = partyType;
	}
	return _p;
}

inline int soap_write_ns1__sendSummary(struct soap *soap, ns1__sendSummary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendSummary", p->soap_type() == SOAP_TYPE_ns1__sendSummary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__sendSummary(struct soap *soap, const char *URL, ns1__sendSummary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendSummary", p->soap_type() == SOAP_TYPE_ns1__sendSummary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__sendSummary(struct soap *soap, const char *URL, ns1__sendSummary const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:sendSummary", p->soap_type() == SOAP_TYPE_ns1__sendSummary ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__sendSummary * SOAP_FMAC4 soap_get_ns1__sendSummary(struct soap*, ns1__sendSummary *, const char*, const char*);

inline int soap_read_ns1__sendSummary(struct soap *soap, ns1__sendSummary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__sendSummary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__sendSummary(struct soap *soap, const char *URL, ns1__sendSummary *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__sendSummary(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__sendSummary(struct soap *soap, ns1__sendSummary *p)
{
	if (::soap_read_ns1__sendSummary(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__base64Binary_DEFINED
#define SOAP_TYPE_xsd__base64Binary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__base64Binary2s(struct soap*, xsd__base64Binary);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *);
SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary * soap_new_xsd__base64Binary(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL);
}

inline xsd__base64Binary * soap_new_req_xsd__base64Binary(
	struct soap *soap)
{
	xsd__base64Binary *_p = ::soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__base64Binary * soap_new_set_xsd__base64Binary(
	struct soap *soap,
	unsigned char *__ptr,
	int __size,
	char *id,
	char *type,
	char *options)
{
	xsd__base64Binary *_p = ::soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary::__ptr = __ptr;
		_p->xsd__base64Binary::__size = __size;
		_p->xsd__base64Binary::id = id;
		_p->xsd__base64Binary::type = type;
		_p->xsd__base64Binary::options = options;
	}
	return _p;
}

inline int soap_write_xsd__base64Binary(struct soap *soap, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap*, xsd__base64Binary *, const char*, const char*);

inline int soap_read_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_xsd__base64Binary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__base64Binary(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (::soap_read_xsd__base64Binary(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE___sunat__sendSummary_DEFINED
#define SOAP_TYPE___sunat__sendSummary_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___sunat__sendSummary(struct soap*, struct __sunat__sendSummary *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___sunat__sendSummary(struct soap*, const struct __sunat__sendSummary *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___sunat__sendSummary(struct soap*, const char*, int, const struct __sunat__sendSummary *, const char*);
SOAP_FMAC3 struct __sunat__sendSummary * SOAP_FMAC4 soap_in___sunat__sendSummary(struct soap*, const char*, struct __sunat__sendSummary *, const char*);
SOAP_FMAC1 struct __sunat__sendSummary * SOAP_FMAC2 soap_instantiate___sunat__sendSummary(struct soap*, int, const char*, const char*, size_t*);

inline struct __sunat__sendSummary * soap_new___sunat__sendSummary(struct soap *soap, int n = -1)
{
	return soap_instantiate___sunat__sendSummary(soap, n, NULL, NULL, NULL);
}

inline struct __sunat__sendSummary * soap_new_req___sunat__sendSummary(
	struct soap *soap)
{
	struct __sunat__sendSummary *_p = ::soap_new___sunat__sendSummary(soap);
	if (_p)
	{	::soap_default___sunat__sendSummary(soap, _p);
	}
	return _p;
}

inline struct __sunat__sendSummary * soap_new_set___sunat__sendSummary(
	struct soap *soap,
	ns1__sendSummary *ns1__sendSummary_)
{
	struct __sunat__sendSummary *_p = ::soap_new___sunat__sendSummary(soap);
	if (_p)
	{	::soap_default___sunat__sendSummary(soap, _p);
		_p->ns1__sendSummary_ = ns1__sendSummary_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___sunat__sendSummary(struct soap*, const struct __sunat__sendSummary *, const char*, const char*);

inline int soap_write___sunat__sendSummary(struct soap *soap, struct __sunat__sendSummary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___sunat__sendSummary(soap, p), 0) || ::soap_put___sunat__sendSummary(soap, p, "-sunat:sendSummary", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___sunat__sendSummary(struct soap *soap, const char *URL, struct __sunat__sendSummary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___sunat__sendSummary(soap, p), 0) || ::soap_put___sunat__sendSummary(soap, p, "-sunat:sendSummary", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___sunat__sendSummary(struct soap *soap, const char *URL, struct __sunat__sendSummary const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___sunat__sendSummary(soap, p), 0) || ::soap_put___sunat__sendSummary(soap, p, "-sunat:sendSummary", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __sunat__sendSummary * SOAP_FMAC4 soap_get___sunat__sendSummary(struct soap*, struct __sunat__sendSummary *, const char*, const char*);

inline int soap_read___sunat__sendSummary(struct soap *soap, struct __sunat__sendSummary *p)
{
	if (p)
	{	::soap_default___sunat__sendSummary(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___sunat__sendSummary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___sunat__sendSummary(struct soap *soap, const char *URL, struct __sunat__sendSummary *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___sunat__sendSummary(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___sunat__sendSummary(struct soap *soap, struct __sunat__sendSummary *p)
{
	if (::soap_read___sunat__sendSummary(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___sunat__sendPack_DEFINED
#define SOAP_TYPE___sunat__sendPack_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___sunat__sendPack(struct soap*, struct __sunat__sendPack *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___sunat__sendPack(struct soap*, const struct __sunat__sendPack *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___sunat__sendPack(struct soap*, const char*, int, const struct __sunat__sendPack *, const char*);
SOAP_FMAC3 struct __sunat__sendPack * SOAP_FMAC4 soap_in___sunat__sendPack(struct soap*, const char*, struct __sunat__sendPack *, const char*);
SOAP_FMAC1 struct __sunat__sendPack * SOAP_FMAC2 soap_instantiate___sunat__sendPack(struct soap*, int, const char*, const char*, size_t*);

inline struct __sunat__sendPack * soap_new___sunat__sendPack(struct soap *soap, int n = -1)
{
	return soap_instantiate___sunat__sendPack(soap, n, NULL, NULL, NULL);
}

inline struct __sunat__sendPack * soap_new_req___sunat__sendPack(
	struct soap *soap)
{
	struct __sunat__sendPack *_p = ::soap_new___sunat__sendPack(soap);
	if (_p)
	{	::soap_default___sunat__sendPack(soap, _p);
	}
	return _p;
}

inline struct __sunat__sendPack * soap_new_set___sunat__sendPack(
	struct soap *soap,
	ns1__sendPack *ns1__sendPack_)
{
	struct __sunat__sendPack *_p = ::soap_new___sunat__sendPack(soap);
	if (_p)
	{	::soap_default___sunat__sendPack(soap, _p);
		_p->ns1__sendPack_ = ns1__sendPack_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___sunat__sendPack(struct soap*, const struct __sunat__sendPack *, const char*, const char*);

inline int soap_write___sunat__sendPack(struct soap *soap, struct __sunat__sendPack const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___sunat__sendPack(soap, p), 0) || ::soap_put___sunat__sendPack(soap, p, "-sunat:sendPack", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___sunat__sendPack(struct soap *soap, const char *URL, struct __sunat__sendPack const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___sunat__sendPack(soap, p), 0) || ::soap_put___sunat__sendPack(soap, p, "-sunat:sendPack", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___sunat__sendPack(struct soap *soap, const char *URL, struct __sunat__sendPack const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___sunat__sendPack(soap, p), 0) || ::soap_put___sunat__sendPack(soap, p, "-sunat:sendPack", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __sunat__sendPack * SOAP_FMAC4 soap_get___sunat__sendPack(struct soap*, struct __sunat__sendPack *, const char*, const char*);

inline int soap_read___sunat__sendPack(struct soap *soap, struct __sunat__sendPack *p)
{
	if (p)
	{	::soap_default___sunat__sendPack(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___sunat__sendPack(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___sunat__sendPack(struct soap *soap, const char *URL, struct __sunat__sendPack *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___sunat__sendPack(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___sunat__sendPack(struct soap *soap, struct __sunat__sendPack *p)
{
	if (::soap_read___sunat__sendPack(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___sunat__sendBill_DEFINED
#define SOAP_TYPE___sunat__sendBill_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___sunat__sendBill(struct soap*, struct __sunat__sendBill *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___sunat__sendBill(struct soap*, const struct __sunat__sendBill *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___sunat__sendBill(struct soap*, const char*, int, const struct __sunat__sendBill *, const char*);
SOAP_FMAC3 struct __sunat__sendBill * SOAP_FMAC4 soap_in___sunat__sendBill(struct soap*, const char*, struct __sunat__sendBill *, const char*);
SOAP_FMAC1 struct __sunat__sendBill * SOAP_FMAC2 soap_instantiate___sunat__sendBill(struct soap*, int, const char*, const char*, size_t*);

inline struct __sunat__sendBill * soap_new___sunat__sendBill(struct soap *soap, int n = -1)
{
	return soap_instantiate___sunat__sendBill(soap, n, NULL, NULL, NULL);
}

inline struct __sunat__sendBill * soap_new_req___sunat__sendBill(
	struct soap *soap)
{
	struct __sunat__sendBill *_p = ::soap_new___sunat__sendBill(soap);
	if (_p)
	{	::soap_default___sunat__sendBill(soap, _p);
	}
	return _p;
}

inline struct __sunat__sendBill * soap_new_set___sunat__sendBill(
	struct soap *soap,
	ns1__sendBill *ns1__sendBill_)
{
	struct __sunat__sendBill *_p = ::soap_new___sunat__sendBill(soap);
	if (_p)
	{	::soap_default___sunat__sendBill(soap, _p);
		_p->ns1__sendBill_ = ns1__sendBill_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___sunat__sendBill(struct soap*, const struct __sunat__sendBill *, const char*, const char*);

inline int soap_write___sunat__sendBill(struct soap *soap, struct __sunat__sendBill const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___sunat__sendBill(soap, p), 0) || ::soap_put___sunat__sendBill(soap, p, "-sunat:sendBill", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___sunat__sendBill(struct soap *soap, const char *URL, struct __sunat__sendBill const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___sunat__sendBill(soap, p), 0) || ::soap_put___sunat__sendBill(soap, p, "-sunat:sendBill", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___sunat__sendBill(struct soap *soap, const char *URL, struct __sunat__sendBill const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___sunat__sendBill(soap, p), 0) || ::soap_put___sunat__sendBill(soap, p, "-sunat:sendBill", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __sunat__sendBill * SOAP_FMAC4 soap_get___sunat__sendBill(struct soap*, struct __sunat__sendBill *, const char*, const char*);

inline int soap_read___sunat__sendBill(struct soap *soap, struct __sunat__sendBill *p)
{
	if (p)
	{	::soap_default___sunat__sendBill(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___sunat__sendBill(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___sunat__sendBill(struct soap *soap, const char *URL, struct __sunat__sendBill *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___sunat__sendBill(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___sunat__sendBill(struct soap *soap, struct __sunat__sendBill *p)
{
	if (::soap_read___sunat__sendBill(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___sunat__getStatus_DEFINED
#define SOAP_TYPE___sunat__getStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___sunat__getStatus(struct soap*, struct __sunat__getStatus *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___sunat__getStatus(struct soap*, const struct __sunat__getStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___sunat__getStatus(struct soap*, const char*, int, const struct __sunat__getStatus *, const char*);
SOAP_FMAC3 struct __sunat__getStatus * SOAP_FMAC4 soap_in___sunat__getStatus(struct soap*, const char*, struct __sunat__getStatus *, const char*);
SOAP_FMAC1 struct __sunat__getStatus * SOAP_FMAC2 soap_instantiate___sunat__getStatus(struct soap*, int, const char*, const char*, size_t*);

inline struct __sunat__getStatus * soap_new___sunat__getStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate___sunat__getStatus(soap, n, NULL, NULL, NULL);
}

inline struct __sunat__getStatus * soap_new_req___sunat__getStatus(
	struct soap *soap)
{
	struct __sunat__getStatus *_p = ::soap_new___sunat__getStatus(soap);
	if (_p)
	{	::soap_default___sunat__getStatus(soap, _p);
	}
	return _p;
}

inline struct __sunat__getStatus * soap_new_set___sunat__getStatus(
	struct soap *soap,
	ns1__getStatus *ns1__getStatus_)
{
	struct __sunat__getStatus *_p = ::soap_new___sunat__getStatus(soap);
	if (_p)
	{	::soap_default___sunat__getStatus(soap, _p);
		_p->ns1__getStatus_ = ns1__getStatus_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___sunat__getStatus(struct soap*, const struct __sunat__getStatus *, const char*, const char*);

inline int soap_write___sunat__getStatus(struct soap *soap, struct __sunat__getStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___sunat__getStatus(soap, p), 0) || ::soap_put___sunat__getStatus(soap, p, "-sunat:getStatus", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___sunat__getStatus(struct soap *soap, const char *URL, struct __sunat__getStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___sunat__getStatus(soap, p), 0) || ::soap_put___sunat__getStatus(soap, p, "-sunat:getStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___sunat__getStatus(struct soap *soap, const char *URL, struct __sunat__getStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___sunat__getStatus(soap, p), 0) || ::soap_put___sunat__getStatus(soap, p, "-sunat:getStatus", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __sunat__getStatus * SOAP_FMAC4 soap_get___sunat__getStatus(struct soap*, struct __sunat__getStatus *, const char*, const char*);

inline int soap_read___sunat__getStatus(struct soap *soap, struct __sunat__getStatus *p)
{
	if (p)
	{	::soap_default___sunat__getStatus(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___sunat__getStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___sunat__getStatus(struct soap *soap, const char *URL, struct __sunat__getStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___sunat__getStatus(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___sunat__getStatus(struct soap *soap, struct __sunat__getStatus *p)
{
	if (::soap_read___sunat__getStatus(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTons1__sendSummary_DEFINED
#define SOAP_TYPE_PointerTons1__sendSummary_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__sendSummary(struct soap*, ns1__sendSummary *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__sendSummary(struct soap*, const char *, int, ns1__sendSummary *const*, const char *);
SOAP_FMAC3 ns1__sendSummary ** SOAP_FMAC4 soap_in_PointerTons1__sendSummary(struct soap*, const char*, ns1__sendSummary **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__sendSummary(struct soap*, ns1__sendSummary *const*, const char*, const char*);
SOAP_FMAC3 ns1__sendSummary ** SOAP_FMAC4 soap_get_PointerTons1__sendSummary(struct soap*, ns1__sendSummary **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__sendPack_DEFINED
#define SOAP_TYPE_PointerTons1__sendPack_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__sendPack(struct soap*, ns1__sendPack *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__sendPack(struct soap*, const char *, int, ns1__sendPack *const*, const char *);
SOAP_FMAC3 ns1__sendPack ** SOAP_FMAC4 soap_in_PointerTons1__sendPack(struct soap*, const char*, ns1__sendPack **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__sendPack(struct soap*, ns1__sendPack *const*, const char*, const char*);
SOAP_FMAC3 ns1__sendPack ** SOAP_FMAC4 soap_get_PointerTons1__sendPack(struct soap*, ns1__sendPack **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__sendBill_DEFINED
#define SOAP_TYPE_PointerTons1__sendBill_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__sendBill(struct soap*, ns1__sendBill *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__sendBill(struct soap*, const char *, int, ns1__sendBill *const*, const char *);
SOAP_FMAC3 ns1__sendBill ** SOAP_FMAC4 soap_in_PointerTons1__sendBill(struct soap*, const char*, ns1__sendBill **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__sendBill(struct soap*, ns1__sendBill *const*, const char*, const char*);
SOAP_FMAC3 ns1__sendBill ** SOAP_FMAC4 soap_get_PointerTons1__sendBill(struct soap*, ns1__sendBill **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__getStatus_DEFINED
#define SOAP_TYPE_PointerTons1__getStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getStatus(struct soap*, ns1__getStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getStatus(struct soap*, const char *, int, ns1__getStatus *const*, const char *);
SOAP_FMAC3 ns1__getStatus ** SOAP_FMAC4 soap_in_PointerTons1__getStatus(struct soap*, const char*, ns1__getStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getStatus(struct soap*, ns1__getStatus *const*, const char*, const char*);
SOAP_FMAC3 ns1__getStatus ** SOAP_FMAC4 soap_get_PointerTons1__getStatus(struct soap*, ns1__getStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__statusResponse_DEFINED
#define SOAP_TYPE_PointerTons1__statusResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__statusResponse(struct soap*, ns1__statusResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__statusResponse(struct soap*, const char *, int, ns1__statusResponse *const*, const char *);
SOAP_FMAC3 ns1__statusResponse ** SOAP_FMAC4 soap_in_PointerTons1__statusResponse(struct soap*, const char*, ns1__statusResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__statusResponse(struct soap*, ns1__statusResponse *const*, const char*, const char*);
SOAP_FMAC3 ns1__statusResponse ** SOAP_FMAC4 soap_get_PointerTons1__statusResponse(struct soap*, ns1__statusResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__base64Binary_DEFINED
#define SOAP_TYPE_PointerToxsd__base64Binary_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__base64Binary(struct soap*, const char *, int, xsd__base64Binary *const*, const char *);
SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_in_PointerToxsd__base64Binary(struct soap*, const char*, xsd__base64Binary **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary *const*, const char*, const char*);
SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_get_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTounsignedByte_DEFINED
#define SOAP_TYPE_PointerTounsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

/* End of soapH.h */
