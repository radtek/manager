/* soapStub.h
   Generated by gSOAP 2.8.69 for C:\gsoap-2.8\gsoap\bin\win32\service.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"http://service.sunat.gob.pe"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20869
# error "GSOAP VERSION 20869 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class xsd__base64Binary;	/* C:\gsoap-2.8\gsoap\bin\win32\service.h:141 */
class ns1__sendSummary;	/* C:\gsoap-2.8\gsoap\bin\win32\service.h:156 */
class ns1__sendSummaryResponse;	/* C:\gsoap-2.8\gsoap\bin\win32\service.h:159 */
class ns1__getStatus;	/* C:\gsoap-2.8\gsoap\bin\win32\service.h:162 */
class ns1__getStatusResponse;	/* C:\gsoap-2.8\gsoap\bin\win32\service.h:165 */
class ns1__statusResponse;	/* C:\gsoap-2.8\gsoap\bin\win32\service.h:168 */
class ns1__sendPack;	/* C:\gsoap-2.8\gsoap\bin\win32\service.h:171 */
class ns1__sendPackResponse;	/* C:\gsoap-2.8\gsoap\bin\win32\service.h:174 */
class ns1__sendBill;	/* C:\gsoap-2.8\gsoap\bin\win32\service.h:177 */
class ns1__sendBillResponse;	/* C:\gsoap-2.8\gsoap\bin\win32\service.h:180 */
struct __sunat__getStatus;	/* C:\gsoap-2.8\gsoap\bin\win32\service.h:592 */
struct __sunat__sendBill;	/* C:\gsoap-2.8\gsoap\bin\win32\service.h:662 */
struct __sunat__sendPack;	/* C:\gsoap-2.8\gsoap\bin\win32\service.h:732 */
struct __sunat__sendSummary;	/* C:\gsoap-2.8\gsoap\bin\win32\service.h:802 */

/* C:\gsoap-2.8\gsoap\bin\win32\service.h:141 */
#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (8)
/* binary data attached as MTOM/MIME/DIME attachment or included as *`xsd:base64Binary`* base64: */
class SOAP_CMAC xsd__base64Binary {
      public:
        unsigned char *__ptr;
        int __size;
        /// Optional element 'id' of XSD type 'xsd:string'
        char *id;
        /// Optional element 'type' of XSD type 'xsd:string'
        char *type;
        /// Optional element 'options' of XSD type 'xsd:string'
        char *options;
      public:
        /// Return unique type id SOAP_TYPE_xsd__base64Binary
        virtual long soap_type(void) const { return SOAP_TYPE_xsd__base64Binary; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__base64Binary, default initialized and not managed by a soap context
        virtual xsd__base64Binary *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__base64Binary); }
      public:
        /// Constructor with initializations
        xsd__base64Binary() : __ptr(), __size(), id(), type(), options() { }
        virtual ~xsd__base64Binary() { }
        /// Friend allocator used by soap_new_xsd__base64Binary(struct soap*, int)
        friend SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* C:\gsoap-2.8\gsoap\bin\win32\service.h:156 */
#ifndef SOAP_TYPE_ns1__sendSummary
#define SOAP_TYPE_ns1__sendSummary (12)
/* complex XSD type 'ns1:sendSummary': */
class SOAP_CMAC ns1__sendSummary {
      public:
        /// Optional element 'fileName' of XSD type 'xsd:string'
        std::string *fileName;
        /// Optional element 'contentFile' of XSD type 'xsd:base64Binary'
        xsd__base64Binary *contentFile;
        /// Optional element 'partyType' of XSD type 'xsd:string'
        std::string *partyType;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__sendSummary
        virtual long soap_type(void) const { return SOAP_TYPE_ns1__sendSummary; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__sendSummary, default initialized and not managed by a soap context
        virtual ns1__sendSummary *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns1__sendSummary); }
      public:
        /// Constructor with initializations
        ns1__sendSummary() : fileName(), contentFile(), partyType(), soap() { }
        virtual ~ns1__sendSummary() { }
        /// Friend allocator used by soap_new_ns1__sendSummary(struct soap*, int)
        friend SOAP_FMAC1 ns1__sendSummary * SOAP_FMAC2 soap_instantiate_ns1__sendSummary(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* C:\gsoap-2.8\gsoap\bin\win32\service.h:159 */
#ifndef SOAP_TYPE_ns1__sendSummaryResponse
#define SOAP_TYPE_ns1__sendSummaryResponse (13)
/* complex XSD type 'ns1:sendSummaryResponse': */
class SOAP_CMAC ns1__sendSummaryResponse {
      public:
        /// Optional element 'ticket' of XSD type 'xsd:string'
        std::string *ticket;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__sendSummaryResponse
        virtual long soap_type(void) const { return SOAP_TYPE_ns1__sendSummaryResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__sendSummaryResponse, default initialized and not managed by a soap context
        virtual ns1__sendSummaryResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns1__sendSummaryResponse); }
      public:
        /// Constructor with initializations
        ns1__sendSummaryResponse() : ticket(), soap() { }
        virtual ~ns1__sendSummaryResponse() { }
        /// Friend allocator used by soap_new_ns1__sendSummaryResponse(struct soap*, int)
        friend SOAP_FMAC1 ns1__sendSummaryResponse * SOAP_FMAC2 soap_instantiate_ns1__sendSummaryResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* C:\gsoap-2.8\gsoap\bin\win32\service.h:162 */
#ifndef SOAP_TYPE_ns1__getStatus
#define SOAP_TYPE_ns1__getStatus (14)
/* complex XSD type 'ns1:getStatus': */
class SOAP_CMAC ns1__getStatus {
      public:
        /// Optional element 'ticket' of XSD type 'xsd:string'
        std::string *ticket;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__getStatus
        virtual long soap_type(void) const { return SOAP_TYPE_ns1__getStatus; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__getStatus, default initialized and not managed by a soap context
        virtual ns1__getStatus *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns1__getStatus); }
      public:
        /// Constructor with initializations
        ns1__getStatus() : ticket(), soap() { }
        virtual ~ns1__getStatus() { }
        /// Friend allocator used by soap_new_ns1__getStatus(struct soap*, int)
        friend SOAP_FMAC1 ns1__getStatus * SOAP_FMAC2 soap_instantiate_ns1__getStatus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* C:\gsoap-2.8\gsoap\bin\win32\service.h:165 */
#ifndef SOAP_TYPE_ns1__getStatusResponse
#define SOAP_TYPE_ns1__getStatusResponse (15)
/* complex XSD type 'ns1:getStatusResponse': */
class SOAP_CMAC ns1__getStatusResponse {
      public:
        /// Optional element 'status' of XSD type 'ns1:statusResponse'
        ns1__statusResponse *status;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__getStatusResponse
        virtual long soap_type(void) const { return SOAP_TYPE_ns1__getStatusResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__getStatusResponse, default initialized and not managed by a soap context
        virtual ns1__getStatusResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns1__getStatusResponse); }
      public:
        /// Constructor with initializations
        ns1__getStatusResponse() : status(), soap() { }
        virtual ~ns1__getStatusResponse() { }
        /// Friend allocator used by soap_new_ns1__getStatusResponse(struct soap*, int)
        friend SOAP_FMAC1 ns1__getStatusResponse * SOAP_FMAC2 soap_instantiate_ns1__getStatusResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* C:\gsoap-2.8\gsoap\bin\win32\service.h:168 */
#ifndef SOAP_TYPE_ns1__statusResponse
#define SOAP_TYPE_ns1__statusResponse (16)
/* complex XSD type 'ns1:statusResponse': */
class SOAP_CMAC ns1__statusResponse {
      public:
        /// Optional element 'content' of XSD type 'xsd:base64Binary'
        xsd__base64Binary *content;
        /// Optional element 'statusCode' of XSD type 'xsd:string'
        std::string *statusCode;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__statusResponse
        virtual long soap_type(void) const { return SOAP_TYPE_ns1__statusResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__statusResponse, default initialized and not managed by a soap context
        virtual ns1__statusResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns1__statusResponse); }
      public:
        /// Constructor with initializations
        ns1__statusResponse() : content(), statusCode(), soap() { }
        virtual ~ns1__statusResponse() { }
        /// Friend allocator used by soap_new_ns1__statusResponse(struct soap*, int)
        friend SOAP_FMAC1 ns1__statusResponse * SOAP_FMAC2 soap_instantiate_ns1__statusResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* C:\gsoap-2.8\gsoap\bin\win32\service.h:171 */
#ifndef SOAP_TYPE_ns1__sendPack
#define SOAP_TYPE_ns1__sendPack (17)
/* complex XSD type 'ns1:sendPack': */
class SOAP_CMAC ns1__sendPack {
      public:
        /// Optional element 'fileName' of XSD type 'xsd:string'
        std::string *fileName;
        /// Optional element 'contentFile' of XSD type 'xsd:base64Binary'
        xsd__base64Binary *contentFile;
        /// Optional element 'partyType' of XSD type 'xsd:string'
        std::string *partyType;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__sendPack
        virtual long soap_type(void) const { return SOAP_TYPE_ns1__sendPack; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__sendPack, default initialized and not managed by a soap context
        virtual ns1__sendPack *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns1__sendPack); }
      public:
        /// Constructor with initializations
        ns1__sendPack() : fileName(), contentFile(), partyType(), soap() { }
        virtual ~ns1__sendPack() { }
        /// Friend allocator used by soap_new_ns1__sendPack(struct soap*, int)
        friend SOAP_FMAC1 ns1__sendPack * SOAP_FMAC2 soap_instantiate_ns1__sendPack(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* C:\gsoap-2.8\gsoap\bin\win32\service.h:174 */
#ifndef SOAP_TYPE_ns1__sendPackResponse
#define SOAP_TYPE_ns1__sendPackResponse (18)
/* complex XSD type 'ns1:sendPackResponse': */
class SOAP_CMAC ns1__sendPackResponse {
      public:
        /// Optional element 'ticket' of XSD type 'xsd:string'
        std::string *ticket;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__sendPackResponse
        virtual long soap_type(void) const { return SOAP_TYPE_ns1__sendPackResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__sendPackResponse, default initialized and not managed by a soap context
        virtual ns1__sendPackResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns1__sendPackResponse); }
      public:
        /// Constructor with initializations
        ns1__sendPackResponse() : ticket(), soap() { }
        virtual ~ns1__sendPackResponse() { }
        /// Friend allocator used by soap_new_ns1__sendPackResponse(struct soap*, int)
        friend SOAP_FMAC1 ns1__sendPackResponse * SOAP_FMAC2 soap_instantiate_ns1__sendPackResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* C:\gsoap-2.8\gsoap\bin\win32\service.h:177 */
#ifndef SOAP_TYPE_ns1__sendBill
#define SOAP_TYPE_ns1__sendBill (19)
/* complex XSD type 'ns1:sendBill': */
class SOAP_CMAC ns1__sendBill {
      public:
        /// Optional element 'fileName' of XSD type 'xsd:string'
        std::string *fileName;
        /// Optional element 'contentFile' of XSD type 'xsd:base64Binary'
        xsd__base64Binary *contentFile;
        /// Optional element 'partyType' of XSD type 'xsd:string'
        std::string *partyType;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__sendBill
        virtual long soap_type(void) const { return SOAP_TYPE_ns1__sendBill; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__sendBill, default initialized and not managed by a soap context
        virtual ns1__sendBill *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns1__sendBill); }
      public:
        /// Constructor with initializations
        ns1__sendBill() : fileName(), contentFile(), partyType(), soap() { }
        virtual ~ns1__sendBill() { }
        /// Friend allocator used by soap_new_ns1__sendBill(struct soap*, int)
        friend SOAP_FMAC1 ns1__sendBill * SOAP_FMAC2 soap_instantiate_ns1__sendBill(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* C:\gsoap-2.8\gsoap\bin\win32\service.h:180 */
#ifndef SOAP_TYPE_ns1__sendBillResponse
#define SOAP_TYPE_ns1__sendBillResponse (20)
/* complex XSD type 'ns1:sendBillResponse': */
class SOAP_CMAC ns1__sendBillResponse {
      public:
        /// Optional element 'applicationResponse' of XSD type 'xsd:base64Binary'
        xsd__base64Binary *applicationResponse;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__sendBillResponse
        virtual long soap_type(void) const { return SOAP_TYPE_ns1__sendBillResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__sendBillResponse, default initialized and not managed by a soap context
        virtual ns1__sendBillResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns1__sendBillResponse); }
      public:
        /// Constructor with initializations
        ns1__sendBillResponse() : applicationResponse(), soap() { }
        virtual ~ns1__sendBillResponse() { }
        /// Friend allocator used by soap_new_ns1__sendBillResponse(struct soap*, int)
        friend SOAP_FMAC1 ns1__sendBillResponse * SOAP_FMAC2 soap_instantiate_ns1__sendBillResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* C:\gsoap-2.8\gsoap\bin\win32\service.h:592 */
#ifndef SOAP_TYPE___sunat__getStatus
#define SOAP_TYPE___sunat__getStatus (29)
/* Wrapper: */
struct SOAP_CMAC __sunat__getStatus {
      public:
        /** Optional element 'ns1:getStatus' of XSD type 'ns1:getStatus' */
        ns1__getStatus *ns1__getStatus_;
      public:
        /** Return unique type id SOAP_TYPE___sunat__getStatus */
        long soap_type() const { return SOAP_TYPE___sunat__getStatus; }
        /** Constructor with member initializations */
        __sunat__getStatus() : ns1__getStatus_() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __sunat__getStatus * SOAP_FMAC2 soap_instantiate___sunat__getStatus(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* C:\gsoap-2.8\gsoap\bin\win32\service.h:662 */
#ifndef SOAP_TYPE___sunat__sendBill
#define SOAP_TYPE___sunat__sendBill (33)
/* Wrapper: */
struct SOAP_CMAC __sunat__sendBill {
      public:
        /** Optional element 'ns1:sendBill' of XSD type 'ns1:sendBill' */
        ns1__sendBill *ns1__sendBill_;
      public:
        /** Return unique type id SOAP_TYPE___sunat__sendBill */
        long soap_type() const { return SOAP_TYPE___sunat__sendBill; }
        /** Constructor with member initializations */
        __sunat__sendBill() : ns1__sendBill_() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __sunat__sendBill * SOAP_FMAC2 soap_instantiate___sunat__sendBill(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* C:\gsoap-2.8\gsoap\bin\win32\service.h:732 */
#ifndef SOAP_TYPE___sunat__sendPack
#define SOAP_TYPE___sunat__sendPack (37)
/* Wrapper: */
struct SOAP_CMAC __sunat__sendPack {
      public:
        /** Optional element 'ns1:sendPack' of XSD type 'ns1:sendPack' */
        ns1__sendPack *ns1__sendPack_;
      public:
        /** Return unique type id SOAP_TYPE___sunat__sendPack */
        long soap_type() const { return SOAP_TYPE___sunat__sendPack; }
        /** Constructor with member initializations */
        __sunat__sendPack() : ns1__sendPack_() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __sunat__sendPack * SOAP_FMAC2 soap_instantiate___sunat__sendPack(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* C:\gsoap-2.8\gsoap\bin\win32\service.h:802 */
#ifndef SOAP_TYPE___sunat__sendSummary
#define SOAP_TYPE___sunat__sendSummary (41)
/* Wrapper: */
struct SOAP_CMAC __sunat__sendSummary {
      public:
        /** Optional element 'ns1:sendSummary' of XSD type 'ns1:sendSummary' */
        ns1__sendSummary *ns1__sendSummary_;
      public:
        /** Return unique type id SOAP_TYPE___sunat__sendSummary */
        long soap_type() const { return SOAP_TYPE___sunat__sendSummary; }
        /** Constructor with member initializations */
        __sunat__sendSummary() : ns1__sendSummary_() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __sunat__sendSummary * SOAP_FMAC2 soap_instantiate___sunat__sendSummary(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* C:\gsoap-2.8\gsoap\bin\win32\service.h:881 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (42)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* C:\gsoap-2.8\gsoap\bin\win32\service.h:881 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (43)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XSD type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* C:\gsoap-2.8\gsoap\bin\win32\service.h:881 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (45)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_T assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : __any(), __type(), fault() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* C:\gsoap-2.8\gsoap\bin\win32\service.h:881 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (48)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XSD type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* C:\gsoap-2.8\gsoap\bin\win32\service.h:881 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (49)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XSD type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XSD type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XSD type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XSD type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XSD type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XSD type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
typedef char *_QName;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* unsigned char has binding name 'unsignedByte' for type 'xsd:unsignedByte' */
#ifndef SOAP_TYPE_unsignedByte
#define SOAP_TYPE_unsignedByte (10)
#endif

/* unsigned int has binding name 'unsignedInt' for type 'xsd:unsignedInt' */
#ifndef SOAP_TYPE_unsignedInt
#define SOAP_TYPE_unsignedInt (9)
#endif

/* std::string has binding name 'std__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (21)
#endif

/* ns1__sendBillResponse has binding name 'ns1__sendBillResponse' for type 'ns1:sendBillResponse' */
#ifndef SOAP_TYPE_ns1__sendBillResponse
#define SOAP_TYPE_ns1__sendBillResponse (20)
#endif

/* ns1__sendBill has binding name 'ns1__sendBill' for type 'ns1:sendBill' */
#ifndef SOAP_TYPE_ns1__sendBill
#define SOAP_TYPE_ns1__sendBill (19)
#endif

/* ns1__sendPackResponse has binding name 'ns1__sendPackResponse' for type 'ns1:sendPackResponse' */
#ifndef SOAP_TYPE_ns1__sendPackResponse
#define SOAP_TYPE_ns1__sendPackResponse (18)
#endif

/* ns1__sendPack has binding name 'ns1__sendPack' for type 'ns1:sendPack' */
#ifndef SOAP_TYPE_ns1__sendPack
#define SOAP_TYPE_ns1__sendPack (17)
#endif

/* ns1__statusResponse has binding name 'ns1__statusResponse' for type 'ns1:statusResponse' */
#ifndef SOAP_TYPE_ns1__statusResponse
#define SOAP_TYPE_ns1__statusResponse (16)
#endif

/* ns1__getStatusResponse has binding name 'ns1__getStatusResponse' for type 'ns1:getStatusResponse' */
#ifndef SOAP_TYPE_ns1__getStatusResponse
#define SOAP_TYPE_ns1__getStatusResponse (15)
#endif

/* ns1__getStatus has binding name 'ns1__getStatus' for type 'ns1:getStatus' */
#ifndef SOAP_TYPE_ns1__getStatus
#define SOAP_TYPE_ns1__getStatus (14)
#endif

/* ns1__sendSummaryResponse has binding name 'ns1__sendSummaryResponse' for type 'ns1:sendSummaryResponse' */
#ifndef SOAP_TYPE_ns1__sendSummaryResponse
#define SOAP_TYPE_ns1__sendSummaryResponse (13)
#endif

/* ns1__sendSummary has binding name 'ns1__sendSummary' for type 'ns1:sendSummary' */
#ifndef SOAP_TYPE_ns1__sendSummary
#define SOAP_TYPE_ns1__sendSummary (12)
#endif

/* xsd__base64Binary has binding name 'xsd__base64Binary' for type 'xsd:base64Binary' */
#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (8)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (49)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (48)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (45)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (43)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (42)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (51)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (50)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (44)
#endif

/* ns1__sendSummary * has binding name 'PointerTons1__sendSummary' for type 'ns1:sendSummary' */
#ifndef SOAP_TYPE_PointerTons1__sendSummary
#define SOAP_TYPE_PointerTons1__sendSummary (38)
#endif

/* ns1__sendPack * has binding name 'PointerTons1__sendPack' for type 'ns1:sendPack' */
#ifndef SOAP_TYPE_PointerTons1__sendPack
#define SOAP_TYPE_PointerTons1__sendPack (34)
#endif

/* ns1__sendBill * has binding name 'PointerTons1__sendBill' for type 'ns1:sendBill' */
#ifndef SOAP_TYPE_PointerTons1__sendBill
#define SOAP_TYPE_PointerTons1__sendBill (30)
#endif

/* ns1__getStatus * has binding name 'PointerTons1__getStatus' for type 'ns1:getStatus' */
#ifndef SOAP_TYPE_PointerTons1__getStatus
#define SOAP_TYPE_PointerTons1__getStatus (26)
#endif

/* ns1__statusResponse * has binding name 'PointerTons1__statusResponse' for type 'ns1:statusResponse' */
#ifndef SOAP_TYPE_PointerTons1__statusResponse
#define SOAP_TYPE_PointerTons1__statusResponse (25)
#endif

/* xsd__base64Binary * has binding name 'PointerToxsd__base64Binary' for type 'xsd:base64Binary' */
#ifndef SOAP_TYPE_PointerToxsd__base64Binary
#define SOAP_TYPE_PointerToxsd__base64Binary (23)
#endif

/* std::string * has binding name 'PointerTostd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_PointerTostd__string
#define SOAP_TYPE_PointerTostd__string (22)
#endif

/* unsigned char * has binding name 'PointerTounsignedByte' for type 'xsd:unsignedByte' */
#ifndef SOAP_TYPE_PointerTounsignedByte
#define SOAP_TYPE_PointerTounsignedByte (11)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
