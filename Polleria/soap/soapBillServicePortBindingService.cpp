/* soapBillServicePortBindingService.cpp
   Generated by gSOAP 2.8.69 for C:\gsoap-2.8\gsoap\bin\win32\service.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapBillServicePortBindingService.h"

BillServicePortBindingService::BillServicePortBindingService()
{	this->soap = soap_new();
	this->soap_own = true;
	BillServicePortBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

BillServicePortBindingService::BillServicePortBindingService(const BillServicePortBindingService& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
}

BillServicePortBindingService::BillServicePortBindingService(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	BillServicePortBindingService_init(_soap->imode, _soap->omode);
}

BillServicePortBindingService::BillServicePortBindingService(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	BillServicePortBindingService_init(iomode, iomode);
}

BillServicePortBindingService::BillServicePortBindingService(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	BillServicePortBindingService_init(imode, omode);
}

BillServicePortBindingService::~BillServicePortBindingService()
{	if (this->soap_own)
		soap_free(this->soap);
}

void BillServicePortBindingService::BillServicePortBindingService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
        {"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"sunat", "http://service.gem.factura.comppago.registro.servicio.sunat.gob.pe/", NULL, NULL},
        {"ns1", "http://service.sunat.gob.pe", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}

void BillServicePortBindingService::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void BillServicePortBindingService::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	BillServicePortBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
BillServicePortBindingService *BillServicePortBindingService::copy()
{	BillServicePortBindingService *dup = SOAP_NEW_UNMANAGED(BillServicePortBindingService);
	if (dup)
	{	soap_done(dup->soap);
		soap_copy_context(dup->soap, this->soap);
	}
	return dup;
}
#endif

BillServicePortBindingService& BillServicePortBindingService::operator=(const BillServicePortBindingService& rhs)
{	if (this->soap != rhs.soap)
	{	if (this->soap_own)
			soap_free(this->soap);
		this->soap = rhs.soap;
		this->soap_own = false;
	}
	return *this;
}

int BillServicePortBindingService::soap_close_socket()
{	return soap_closesock(this->soap);
}

int BillServicePortBindingService::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

int BillServicePortBindingService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this->soap, string, detailXML);
}

int BillServicePortBindingService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

int BillServicePortBindingService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this->soap, string, detailXML);
}

int BillServicePortBindingService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

void BillServicePortBindingService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void BillServicePortBindingService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *BillServicePortBindingService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

void BillServicePortBindingService::soap_noheader()
{	this->soap->header = NULL;
}

::SOAP_ENV__Header *BillServicePortBindingService::soap_header()
{	return this->soap->header;
}

#ifndef WITH_NOIO
int BillServicePortBindingService::run(int port)
{	if (!soap_valid_socket(this->soap->master) && !soap_valid_socket(this->bind(NULL, port, 100)))
		return this->soap->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->soap->errnum == 0) // timeout?
				this->soap->error = SOAP_OK;
			break;
		}
		if (this->serve())
			break;
		this->destroy();
	}
	return this->soap->error;
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int BillServicePortBindingService::ssl_run(int port)
{	if (!soap_valid_socket(this->soap->master) && !soap_valid_socket(this->bind(NULL, port, 100)))
		return this->soap->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->soap->errnum == 0) // timeout?
				this->soap->error = SOAP_OK;
			break;
		}
		if (this->ssl_accept() || this->serve())
			break;
		this->destroy();
	}
	return this->soap->error;
}
#endif

SOAP_SOCKET BillServicePortBindingService::bind(const char *host, int port, int backlog)
{	return soap_bind(this->soap, host, port, backlog);
}

SOAP_SOCKET BillServicePortBindingService::accept()
{	return soap_accept(this->soap);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int BillServicePortBindingService::ssl_accept()
{	return soap_ssl_accept(this->soap);
}
#endif
#endif

int BillServicePortBindingService::serve()
{
#ifndef WITH_FASTCGI
	this->soap->keep_alive = this->soap->max_keep_alive + 1;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (this->soap->keep_alive > 0 && this->soap->max_keep_alive > 0)
			this->soap->keep_alive--;
#endif
		if (soap_begin_serve(this->soap))
		{	if (this->soap->error >= SOAP_STOP)
				continue;
			return this->soap->error;
		}
		if ((dispatch() || (this->soap->fserveloop && this->soap->fserveloop(this->soap))) && this->soap->error && this->soap->error < SOAP_STOP)
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this->soap);
#else
			return soap_send_fault(this->soap);
#endif
		}
#ifdef WITH_FASTCGI
		soap_destroy(this->soap);
		soap_end(this->soap);
	} while (1);
#else
	} while (this->soap->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___sunat__getStatus(struct soap*, BillServicePortBindingService*);
static int serve___sunat__sendBill(struct soap*, BillServicePortBindingService*);
static int serve___sunat__sendPack(struct soap*, BillServicePortBindingService*);
static int serve___sunat__sendSummary(struct soap*, BillServicePortBindingService*);

int BillServicePortBindingService::dispatch()
{	return dispatch(this->soap);
}

int BillServicePortBindingService::dispatch(struct soap* soap)
{
	BillServicePortBindingService_init(soap->imode, soap->omode);

	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:getStatus"))
		return serve___sunat__getStatus(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:sendBill"))
		return serve___sunat__sendBill(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:sendPack"))
		return serve___sunat__sendPack(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:sendSummary"))
		return serve___sunat__sendSummary(soap, this);
	return soap->error = SOAP_NO_METHOD;
}

static int serve___sunat__getStatus(struct soap *soap, BillServicePortBindingService *service)
{	struct __sunat__getStatus soap_tmp___sunat__getStatus;
	ns1__getStatusResponse ns1__getStatusResponse_;
	ns1__getStatusResponse_.soap_default(soap);
	soap_default___sunat__getStatus(soap, &soap_tmp___sunat__getStatus);
	if (!soap_get___sunat__getStatus(soap, &soap_tmp___sunat__getStatus, "-sunat:getStatus", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->getStatus(soap_tmp___sunat__getStatus.ns1__getStatus_, ns1__getStatusResponse_);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__getStatusResponse_.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__getStatusResponse_.soap_put(soap, "ns1:getStatusResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__getStatusResponse_.soap_put(soap, "ns1:getStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___sunat__sendBill(struct soap *soap, BillServicePortBindingService *service)
{	struct __sunat__sendBill soap_tmp___sunat__sendBill;
	ns1__sendBillResponse ns1__sendBillResponse_;
	ns1__sendBillResponse_.soap_default(soap);
	soap_default___sunat__sendBill(soap, &soap_tmp___sunat__sendBill);
	if (!soap_get___sunat__sendBill(soap, &soap_tmp___sunat__sendBill, "-sunat:sendBill", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->sendBill(soap_tmp___sunat__sendBill.ns1__sendBill_, ns1__sendBillResponse_);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__sendBillResponse_.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__sendBillResponse_.soap_put(soap, "ns1:sendBillResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__sendBillResponse_.soap_put(soap, "ns1:sendBillResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___sunat__sendPack(struct soap *soap, BillServicePortBindingService *service)
{	struct __sunat__sendPack soap_tmp___sunat__sendPack;
	ns1__sendPackResponse ns1__sendPackResponse_;
	ns1__sendPackResponse_.soap_default(soap);
	soap_default___sunat__sendPack(soap, &soap_tmp___sunat__sendPack);
	if (!soap_get___sunat__sendPack(soap, &soap_tmp___sunat__sendPack, "-sunat:sendPack", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->sendPack(soap_tmp___sunat__sendPack.ns1__sendPack_, ns1__sendPackResponse_);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__sendPackResponse_.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__sendPackResponse_.soap_put(soap, "ns1:sendPackResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__sendPackResponse_.soap_put(soap, "ns1:sendPackResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___sunat__sendSummary(struct soap *soap, BillServicePortBindingService *service)
{	struct __sunat__sendSummary soap_tmp___sunat__sendSummary;
	ns1__sendSummaryResponse ns1__sendSummaryResponse_;
	ns1__sendSummaryResponse_.soap_default(soap);
	soap_default___sunat__sendSummary(soap, &soap_tmp___sunat__sendSummary);
	if (!soap_get___sunat__sendSummary(soap, &soap_tmp___sunat__sendSummary, "-sunat:sendSummary", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->sendSummary(soap_tmp___sunat__sendSummary.ns1__sendSummary_, ns1__sendSummaryResponse_);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__sendSummaryResponse_.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__sendSummaryResponse_.soap_put(soap, "ns1:sendSummaryResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__sendSummaryResponse_.soap_put(soap, "ns1:sendSummaryResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
