/* soapC.cpp
   Generated by gSOAP 2.8.69 for C:\gsoap-2.8\gsoap\bin\win32\service.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.69 2018-08-17 00:06:59 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, ""))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", "");
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_ds__SignaturePropertyType:
		return soap_in_ds__SignaturePropertyType(soap, NULL, NULL, "ds:SignaturePropertyType");
	case SOAP_TYPE_ds__SignaturePropertiesType:
		return soap_in_ds__SignaturePropertiesType(soap, NULL, NULL, "ds:SignaturePropertiesType");
	case SOAP_TYPE_ds__ManifestType:
		return soap_in_ds__ManifestType(soap, NULL, NULL, "ds:ManifestType");
	case SOAP_TYPE_ds__ObjectType:
		return soap_in_ds__ObjectType(soap, NULL, NULL, "ds:ObjectType");
	case SOAP_TYPE_ds__SPKIDataType:
		return soap_in_ds__SPKIDataType(soap, NULL, NULL, "ds:SPKIDataType");
	case SOAP_TYPE_ds__PGPDataType:
		return soap_in_ds__PGPDataType(soap, NULL, NULL, "ds:PGPDataType");
	case SOAP_TYPE_ds__SignatureValueType:
		return soap_in_ds__SignatureValueType(soap, NULL, NULL, "ds:SignatureValueType");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_ULONG64:
		return soap_in_ULONG64(soap, NULL, NULL, "xsd:unsignedLong");
	case SOAP_TYPE_dateTime:
		return soap_in_dateTime(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_saml2__DecisionType:
		return soap_in_saml2__DecisionType(soap, NULL, NULL, "saml2:DecisionType");
	case SOAP_TYPE_saml1__DecisionType:
		return soap_in_saml1__DecisionType(soap, NULL, NULL, "saml1:DecisionType");
	case SOAP_TYPE_wsc__FaultCodeType:
		return soap_in_wsc__FaultCodeType(soap, NULL, NULL, "wsc:FaultCodeType");
	case SOAP_TYPE_wsse__FaultcodeEnum:
		return soap_in_wsse__FaultcodeEnum(soap, NULL, NULL, "wsse:FaultcodeEnum");
	case SOAP_TYPE_wsu__tTimestampFault:
		return soap_in_wsu__tTimestampFault(soap, NULL, NULL, "wsu:tTimestampFault");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ns1__sendBillResponse:
		return soap_in_ns1__sendBillResponse(soap, NULL, NULL, "ns1:sendBillResponse");
	case SOAP_TYPE_ns1__sendBill:
		return soap_in_ns1__sendBill(soap, NULL, NULL, "ns1:sendBill");
	case SOAP_TYPE_ns1__sendPackResponse:
		return soap_in_ns1__sendPackResponse(soap, NULL, NULL, "ns1:sendPackResponse");
	case SOAP_TYPE_ns1__sendPack:
		return soap_in_ns1__sendPack(soap, NULL, NULL, "ns1:sendPack");
	case SOAP_TYPE_ns1__statusResponse:
		return soap_in_ns1__statusResponse(soap, NULL, NULL, "ns1:statusResponse");
	case SOAP_TYPE_ns1__getStatusResponse:
		return soap_in_ns1__getStatusResponse(soap, NULL, NULL, "ns1:getStatusResponse");
	case SOAP_TYPE_ns1__getStatus:
		return soap_in_ns1__getStatus(soap, NULL, NULL, "ns1:getStatus");
	case SOAP_TYPE_ns1__sendSummaryResponse:
		return soap_in_ns1__sendSummaryResponse(soap, NULL, NULL, "ns1:sendSummaryResponse");
	case SOAP_TYPE_ns1__sendSummary:
		return soap_in_ns1__sendSummary(soap, NULL, NULL, "ns1:sendSummary");
	case SOAP_TYPE_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_saml2__AttributeType:
		return soap_in_saml2__AttributeType(soap, NULL, NULL, "saml2:AttributeType");
	case SOAP_TYPE_saml2__AttributeStatementType:
		return soap_in_saml2__AttributeStatementType(soap, NULL, NULL, "saml2:AttributeStatementType");
	case SOAP_TYPE_saml2__EvidenceType:
		return soap_in_saml2__EvidenceType(soap, NULL, NULL, "saml2:EvidenceType");
	case SOAP_TYPE_saml2__ActionType:
		return soap_in_saml2__ActionType(soap, NULL, NULL, "saml2:ActionType");
	case SOAP_TYPE_saml2__AuthzDecisionStatementType:
		return soap_in_saml2__AuthzDecisionStatementType(soap, NULL, NULL, "saml2:AuthzDecisionStatementType");
	case SOAP_TYPE_saml2__AuthnContextType:
		return soap_in_saml2__AuthnContextType(soap, NULL, NULL, "saml2:AuthnContextType");
	case SOAP_TYPE_saml2__SubjectLocalityType:
		return soap_in_saml2__SubjectLocalityType(soap, NULL, NULL, "saml2:SubjectLocalityType");
	case SOAP_TYPE_saml2__AuthnStatementType:
		return soap_in_saml2__AuthnStatementType(soap, NULL, NULL, "saml2:AuthnStatementType");
	case SOAP_TYPE_saml2__StatementAbstractType:
		return soap_in_saml2__StatementAbstractType(soap, NULL, NULL, "saml2:StatementAbstractType");
	case SOAP_TYPE_saml2__AdviceType:
		return soap_in_saml2__AdviceType(soap, NULL, NULL, "saml2:AdviceType");
	case SOAP_TYPE_saml2__ProxyRestrictionType:
		return soap_in_saml2__ProxyRestrictionType(soap, NULL, NULL, "saml2:ProxyRestrictionType");
	case SOAP_TYPE_saml2__OneTimeUseType:
		return soap_in_saml2__OneTimeUseType(soap, NULL, NULL, "saml2:OneTimeUseType");
	case SOAP_TYPE_saml2__AudienceRestrictionType:
		return soap_in_saml2__AudienceRestrictionType(soap, NULL, NULL, "saml2:AudienceRestrictionType");
	case SOAP_TYPE_saml2__ConditionAbstractType:
		return soap_in_saml2__ConditionAbstractType(soap, NULL, NULL, "saml2:ConditionAbstractType");
	case SOAP_TYPE_saml2__ConditionsType:
		return soap_in_saml2__ConditionsType(soap, NULL, NULL, "saml2:ConditionsType");
	case SOAP_TYPE_saml2__KeyInfoConfirmationDataType:
		return soap_in_saml2__KeyInfoConfirmationDataType(soap, NULL, NULL, "saml2:KeyInfoConfirmationDataType");
	case SOAP_TYPE_saml2__SubjectConfirmationDataType:
		return soap_in_saml2__SubjectConfirmationDataType(soap, NULL, NULL, "saml2:SubjectConfirmationDataType");
	case SOAP_TYPE_saml2__SubjectConfirmationType:
		return soap_in_saml2__SubjectConfirmationType(soap, NULL, NULL, "saml2:SubjectConfirmationType");
	case SOAP_TYPE_saml2__SubjectType:
		return soap_in_saml2__SubjectType(soap, NULL, NULL, "saml2:SubjectType");
	case SOAP_TYPE_saml2__AssertionType:
		return soap_in_saml2__AssertionType(soap, NULL, NULL, "saml2:AssertionType");
	case SOAP_TYPE_saml2__EncryptedElementType:
		return soap_in_saml2__EncryptedElementType(soap, NULL, NULL, "saml2:EncryptedElementType");
	case SOAP_TYPE_saml2__NameIDType:
		return soap_in_saml2__NameIDType(soap, NULL, NULL, "saml2:NameIDType");
	case SOAP_TYPE_saml2__BaseIDAbstractType:
		return soap_in_saml2__BaseIDAbstractType(soap, NULL, NULL, "saml2:BaseIDAbstractType");
	case SOAP_TYPE_saml1__AttributeType:
		return soap_in_saml1__AttributeType(soap, NULL, NULL, "saml1:AttributeType");
	case SOAP_TYPE_saml1__AttributeDesignatorType:
		return soap_in_saml1__AttributeDesignatorType(soap, NULL, NULL, "saml1:AttributeDesignatorType");
	case SOAP_TYPE_saml1__AttributeStatementType:
		return soap_in_saml1__AttributeStatementType(soap, NULL, NULL, "saml1:AttributeStatementType");
	case SOAP_TYPE_saml1__EvidenceType:
		return soap_in_saml1__EvidenceType(soap, NULL, NULL, "saml1:EvidenceType");
	case SOAP_TYPE_saml1__ActionType:
		return soap_in_saml1__ActionType(soap, NULL, NULL, "saml1:ActionType");
	case SOAP_TYPE_saml1__AuthorizationDecisionStatementType:
		return soap_in_saml1__AuthorizationDecisionStatementType(soap, NULL, NULL, "saml1:AuthorizationDecisionStatementType");
	case SOAP_TYPE_saml1__AuthorityBindingType:
		return soap_in_saml1__AuthorityBindingType(soap, NULL, NULL, "saml1:AuthorityBindingType");
	case SOAP_TYPE_saml1__SubjectLocalityType:
		return soap_in_saml1__SubjectLocalityType(soap, NULL, NULL, "saml1:SubjectLocalityType");
	case SOAP_TYPE_saml1__AuthenticationStatementType:
		return soap_in_saml1__AuthenticationStatementType(soap, NULL, NULL, "saml1:AuthenticationStatementType");
	case SOAP_TYPE_saml1__SubjectConfirmationType:
		return soap_in_saml1__SubjectConfirmationType(soap, NULL, NULL, "saml1:SubjectConfirmationType");
	case SOAP_TYPE_saml1__NameIdentifierType:
		return soap_in_saml1__NameIdentifierType(soap, NULL, NULL, "saml1:NameIdentifierType");
	case SOAP_TYPE_saml1__SubjectType:
		return soap_in_saml1__SubjectType(soap, NULL, NULL, "saml1:SubjectType");
	case SOAP_TYPE_saml1__SubjectStatementAbstractType:
		return soap_in_saml1__SubjectStatementAbstractType(soap, NULL, NULL, "saml1:SubjectStatementAbstractType");
	case SOAP_TYPE_saml1__StatementAbstractType:
		return soap_in_saml1__StatementAbstractType(soap, NULL, NULL, "saml1:StatementAbstractType");
	case SOAP_TYPE_saml1__AdviceType:
		return soap_in_saml1__AdviceType(soap, NULL, NULL, "saml1:AdviceType");
	case SOAP_TYPE_saml1__DoNotCacheConditionType:
		return soap_in_saml1__DoNotCacheConditionType(soap, NULL, NULL, "saml1:DoNotCacheConditionType");
	case SOAP_TYPE_saml1__AudienceRestrictionConditionType:
		return soap_in_saml1__AudienceRestrictionConditionType(soap, NULL, NULL, "saml1:AudienceRestrictionConditionType");
	case SOAP_TYPE_saml1__ConditionAbstractType:
		return soap_in_saml1__ConditionAbstractType(soap, NULL, NULL, "saml1:ConditionAbstractType");
	case SOAP_TYPE_saml1__ConditionsType:
		return soap_in_saml1__ConditionsType(soap, NULL, NULL, "saml1:ConditionsType");
	case SOAP_TYPE_saml1__AssertionType:
		return soap_in_saml1__AssertionType(soap, NULL, NULL, "saml1:AssertionType");
	case SOAP_TYPE_wsc__PropertiesType:
		return soap_in_wsc__PropertiesType(soap, NULL, NULL, "wsc:PropertiesType");
	case SOAP_TYPE_wsc__DerivedKeyTokenType:
		return soap_in_wsc__DerivedKeyTokenType(soap, NULL, NULL, "wsc:DerivedKeyTokenType");
	case SOAP_TYPE_wsc__SecurityContextTokenType:
		return soap_in_wsc__SecurityContextTokenType(soap, NULL, NULL, "wsc:SecurityContextTokenType");
	case SOAP_TYPE_xenc__EncryptionPropertyType:
		return soap_in_xenc__EncryptionPropertyType(soap, NULL, NULL, "xenc:EncryptionPropertyType");
	case SOAP_TYPE_xenc__EncryptionPropertiesType:
		return soap_in_xenc__EncryptionPropertiesType(soap, NULL, NULL, "xenc:EncryptionPropertiesType");
	case SOAP_TYPE_xenc__ReferenceType:
		return soap_in_xenc__ReferenceType(soap, NULL, NULL, "xenc:ReferenceType");
	case SOAP_TYPE_xenc__AgreementMethodType:
		return soap_in_xenc__AgreementMethodType(soap, NULL, NULL, "xenc:AgreementMethodType");
	case SOAP_TYPE_xenc__EncryptedKeyType:
		return soap_in_xenc__EncryptedKeyType(soap, NULL, NULL, "xenc:EncryptedKeyType");
	case SOAP_TYPE_xenc__EncryptedDataType:
		return soap_in_xenc__EncryptedDataType(soap, NULL, NULL, "xenc:EncryptedDataType");
	case SOAP_TYPE_xenc__TransformsType:
		return soap_in_xenc__TransformsType(soap, NULL, NULL, "xenc:TransformsType");
	case SOAP_TYPE_xenc__CipherReferenceType:
		return soap_in_xenc__CipherReferenceType(soap, NULL, NULL, "xenc:CipherReferenceType");
	case SOAP_TYPE_xenc__CipherDataType:
		return soap_in_xenc__CipherDataType(soap, NULL, NULL, "xenc:CipherDataType");
	case SOAP_TYPE_xenc__EncryptionMethodType:
		return soap_in_xenc__EncryptionMethodType(soap, NULL, NULL, "xenc:EncryptionMethodType");
	case SOAP_TYPE_xenc__EncryptedType:
		return soap_in_xenc__EncryptedType(soap, NULL, NULL, "xenc:EncryptedType");
	case SOAP_TYPE_ds__RSAKeyValueType:
		return soap_in_ds__RSAKeyValueType(soap, NULL, NULL, "ds:RSAKeyValueType");
	case SOAP_TYPE_ds__DSAKeyValueType:
		return soap_in_ds__DSAKeyValueType(soap, NULL, NULL, "ds:DSAKeyValueType");
	case SOAP_TYPE_ds__X509IssuerSerialType:
		return soap_in_ds__X509IssuerSerialType(soap, NULL, NULL, "ds:X509IssuerSerialType");
	case SOAP_TYPE_ds__RetrievalMethodType:
		return soap_in_ds__RetrievalMethodType(soap, NULL, NULL, "ds:RetrievalMethodType");
	case SOAP_TYPE_ds__KeyValueType:
		return soap_in_ds__KeyValueType(soap, NULL, NULL, "ds:KeyValueType");
	case SOAP_TYPE_ds__DigestMethodType:
		return soap_in_ds__DigestMethodType(soap, NULL, NULL, "ds:DigestMethodType");
	case SOAP_TYPE_ds__TransformType:
		return soap_in_ds__TransformType(soap, NULL, NULL, "ds:TransformType");
	case SOAP_TYPE_ds__TransformsType:
		return soap_in_ds__TransformsType(soap, NULL, NULL, "ds:TransformsType");
	case SOAP_TYPE_ds__ReferenceType:
		return soap_in_ds__ReferenceType(soap, NULL, NULL, "ds:ReferenceType");
	case SOAP_TYPE_ds__SignatureMethodType:
		return soap_in_ds__SignatureMethodType(soap, NULL, NULL, "ds:SignatureMethodType");
	case SOAP_TYPE_ds__CanonicalizationMethodType:
		return soap_in_ds__CanonicalizationMethodType(soap, NULL, NULL, "ds:CanonicalizationMethodType");
	case SOAP_TYPE_ds__KeyInfoType:
		return soap_in_ds__KeyInfoType(soap, NULL, NULL, "ds:KeyInfoType");
	case SOAP_TYPE_ds__SignedInfoType:
		return soap_in_ds__SignedInfoType(soap, NULL, NULL, "ds:SignedInfoType");
	case SOAP_TYPE_ds__SignatureType:
		return soap_in_ds__SignatureType(soap, NULL, NULL, "ds:SignatureType");
	case SOAP_TYPE_ds__X509DataType:
		return soap_in_ds__X509DataType(soap, NULL, NULL, "ds:X509DataType");
	case SOAP_TYPE_wsse__EncodedString:
		return soap_in_wsse__EncodedString(soap, NULL, NULL, "wsse:EncodedString");
	case SOAP_TYPE_PointerTons1__sendSummary:
		return soap_in_PointerTons1__sendSummary(soap, NULL, NULL, "ns1:sendSummary");
	case SOAP_TYPE_PointerTons1__sendPack:
		return soap_in_PointerTons1__sendPack(soap, NULL, NULL, "ns1:sendPack");
	case SOAP_TYPE_PointerTons1__sendBill:
		return soap_in_PointerTons1__sendBill(soap, NULL, NULL, "ns1:sendBill");
	case SOAP_TYPE_PointerTons1__getStatus:
		return soap_in_PointerTons1__getStatus(soap, NULL, NULL, "ns1:getStatus");
	case SOAP_TYPE_PointerTons1__statusResponse:
		return soap_in_PointerTons1__statusResponse(soap, NULL, NULL, "ns1:statusResponse");
	case SOAP_TYPE_PointerToxsd__base64Binary:
		return soap_in_PointerToxsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_PointerTods__SignatureType:
		return soap_in_PointerTods__SignatureType(soap, NULL, NULL, "ds:SignatureType");
	case SOAP_TYPE_PointerTo_wsse__BinarySecurityToken:
		return soap_in_PointerTo_wsse__BinarySecurityToken(soap, NULL, NULL, "wsse:BinarySecurityToken");
	case SOAP_TYPE_PointerTo_wsse__UsernameToken:
		return soap_in_PointerTo_wsse__UsernameToken(soap, NULL, NULL, "wsse:UsernameToken");
	case SOAP_TYPE_PointerTo_wsu__Timestamp:
		return soap_in_PointerTo_wsu__Timestamp(soap, NULL, NULL, "wsu:Timestamp");
	case SOAP_TYPE_PointerToPointerTo_ds__KeyInfo:
		return soap_in_PointerToPointerTo_ds__KeyInfo(soap, NULL, NULL, "ds:KeyInfo");
	case SOAP_TYPE_PointerTosaml2__AttributeType:
		return soap_in_PointerTosaml2__AttributeType(soap, NULL, NULL, "saml2:AttributeType");
	case SOAP_TYPE_PointerTosaml2__EvidenceType:
		return soap_in_PointerTosaml2__EvidenceType(soap, NULL, NULL, "saml2:EvidenceType");
	case SOAP_TYPE_PointerTosaml2__ActionType:
		return soap_in_PointerTosaml2__ActionType(soap, NULL, NULL, "saml2:ActionType");
	case SOAP_TYPE_PointerTosaml2__AuthnContextType:
		return soap_in_PointerTosaml2__AuthnContextType(soap, NULL, NULL, "saml2:AuthnContextType");
	case SOAP_TYPE_PointerTosaml2__SubjectLocalityType:
		return soap_in_PointerTosaml2__SubjectLocalityType(soap, NULL, NULL, "saml2:SubjectLocalityType");
	case SOAP_TYPE_PointerTosaml2__AssertionType:
		return soap_in_PointerTosaml2__AssertionType(soap, NULL, NULL, "saml2:AssertionType");
	case SOAP_TYPE_PointerTosaml2__ProxyRestrictionType:
		return soap_in_PointerTosaml2__ProxyRestrictionType(soap, NULL, NULL, "saml2:ProxyRestrictionType");
	case SOAP_TYPE_PointerTosaml2__OneTimeUseType:
		return soap_in_PointerTosaml2__OneTimeUseType(soap, NULL, NULL, "saml2:OneTimeUseType");
	case SOAP_TYPE_PointerTosaml2__AudienceRestrictionType:
		return soap_in_PointerTosaml2__AudienceRestrictionType(soap, NULL, NULL, "saml2:AudienceRestrictionType");
	case SOAP_TYPE_PointerTosaml2__ConditionAbstractType:
		return soap_in_PointerTosaml2__ConditionAbstractType(soap, NULL, NULL, "saml2:ConditionAbstractType");
	case SOAP_TYPE_PointerTosaml2__SubjectConfirmationDataType:
		return soap_in_PointerTosaml2__SubjectConfirmationDataType(soap, NULL, NULL, "saml2:SubjectConfirmationDataType");
	case SOAP_TYPE_PointerTosaml2__SubjectConfirmationType:
		return soap_in_PointerTosaml2__SubjectConfirmationType(soap, NULL, NULL, "saml2:SubjectConfirmationType");
	case SOAP_TYPE_PointerTosaml2__EncryptedElementType:
		return soap_in_PointerTosaml2__EncryptedElementType(soap, NULL, NULL, "saml2:EncryptedElementType");
	case SOAP_TYPE_PointerTosaml2__BaseIDAbstractType:
		return soap_in_PointerTosaml2__BaseIDAbstractType(soap, NULL, NULL, "saml2:BaseIDAbstractType");
	case SOAP_TYPE_PointerTosaml2__AttributeStatementType:
		return soap_in_PointerTosaml2__AttributeStatementType(soap, NULL, NULL, "saml2:AttributeStatementType");
	case SOAP_TYPE_PointerTosaml2__AuthzDecisionStatementType:
		return soap_in_PointerTosaml2__AuthzDecisionStatementType(soap, NULL, NULL, "saml2:AuthzDecisionStatementType");
	case SOAP_TYPE_PointerTosaml2__AuthnStatementType:
		return soap_in_PointerTosaml2__AuthnStatementType(soap, NULL, NULL, "saml2:AuthnStatementType");
	case SOAP_TYPE_PointerTosaml2__StatementAbstractType:
		return soap_in_PointerTosaml2__StatementAbstractType(soap, NULL, NULL, "saml2:StatementAbstractType");
	case SOAP_TYPE_PointerTosaml2__AdviceType:
		return soap_in_PointerTosaml2__AdviceType(soap, NULL, NULL, "saml2:AdviceType");
	case SOAP_TYPE_PointerTosaml2__ConditionsType:
		return soap_in_PointerTosaml2__ConditionsType(soap, NULL, NULL, "saml2:ConditionsType");
	case SOAP_TYPE_PointerTosaml2__SubjectType:
		return soap_in_PointerTosaml2__SubjectType(soap, NULL, NULL, "saml2:SubjectType");
	case SOAP_TYPE_PointerTosaml2__NameIDType:
		return soap_in_PointerTosaml2__NameIDType(soap, NULL, NULL, "saml2:NameIDType");
	case SOAP_TYPE_PointerToPointerToxenc__EncryptedKeyType:
		return soap_in_PointerToPointerToxenc__EncryptedKeyType(soap, NULL, NULL, "xenc:EncryptedKeyType");
	case SOAP_TYPE_PointerToxenc__EncryptedKeyType:
		return soap_in_PointerToxenc__EncryptedKeyType(soap, NULL, NULL, "xenc:EncryptedKeyType");
	case SOAP_TYPE_PointerTosaml1__AttributeType:
		return soap_in_PointerTosaml1__AttributeType(soap, NULL, NULL, "saml1:AttributeType");
	case SOAP_TYPE_PointerTosaml1__EvidenceType:
		return soap_in_PointerTosaml1__EvidenceType(soap, NULL, NULL, "saml1:EvidenceType");
	case SOAP_TYPE_PointerTosaml1__ActionType:
		return soap_in_PointerTosaml1__ActionType(soap, NULL, NULL, "saml1:ActionType");
	case SOAP_TYPE_PointerTosaml1__AuthorityBindingType:
		return soap_in_PointerTosaml1__AuthorityBindingType(soap, NULL, NULL, "saml1:AuthorityBindingType");
	case SOAP_TYPE_PointerTosaml1__SubjectLocalityType:
		return soap_in_PointerTosaml1__SubjectLocalityType(soap, NULL, NULL, "saml1:SubjectLocalityType");
	case SOAP_TYPE_PointerTosaml1__SubjectType:
		return soap_in_PointerTosaml1__SubjectType(soap, NULL, NULL, "saml1:SubjectType");
	case SOAP_TYPE_PointerTostring:
		return soap_in_PointerTostring(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTosaml1__SubjectConfirmationType:
		return soap_in_PointerTosaml1__SubjectConfirmationType(soap, NULL, NULL, "saml1:SubjectConfirmationType");
	case SOAP_TYPE_PointerTosaml1__NameIdentifierType:
		return soap_in_PointerTosaml1__NameIdentifierType(soap, NULL, NULL, "saml1:NameIdentifierType");
	case SOAP_TYPE_PointerTosaml1__AssertionType:
		return soap_in_PointerTosaml1__AssertionType(soap, NULL, NULL, "saml1:AssertionType");
	case SOAP_TYPE_PointerTodateTime:
		return soap_in_PointerTodateTime(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_PointerTosaml1__ConditionAbstractType:
		return soap_in_PointerTosaml1__ConditionAbstractType(soap, NULL, NULL, "saml1:ConditionAbstractType");
	case SOAP_TYPE_PointerTosaml1__DoNotCacheConditionType:
		return soap_in_PointerTosaml1__DoNotCacheConditionType(soap, NULL, NULL, "saml1:DoNotCacheConditionType");
	case SOAP_TYPE_PointerTosaml1__AudienceRestrictionConditionType:
		return soap_in_PointerTosaml1__AudienceRestrictionConditionType(soap, NULL, NULL, "saml1:AudienceRestrictionConditionType");
	case SOAP_TYPE_PointerTo_ds__Signature:
		return soap_in_PointerTo_ds__Signature(soap, NULL, NULL, "ds:Signature");
	case SOAP_TYPE_PointerTosaml1__AttributeStatementType:
		return soap_in_PointerTosaml1__AttributeStatementType(soap, NULL, NULL, "saml1:AttributeStatementType");
	case SOAP_TYPE_PointerTosaml1__AuthorizationDecisionStatementType:
		return soap_in_PointerTosaml1__AuthorizationDecisionStatementType(soap, NULL, NULL, "saml1:AuthorizationDecisionStatementType");
	case SOAP_TYPE_PointerTosaml1__AuthenticationStatementType:
		return soap_in_PointerTosaml1__AuthenticationStatementType(soap, NULL, NULL, "saml1:AuthenticationStatementType");
	case SOAP_TYPE_PointerTosaml1__SubjectStatementAbstractType:
		return soap_in_PointerTosaml1__SubjectStatementAbstractType(soap, NULL, NULL, "saml1:SubjectStatementAbstractType");
	case SOAP_TYPE_PointerTosaml1__StatementAbstractType:
		return soap_in_PointerTosaml1__StatementAbstractType(soap, NULL, NULL, "saml1:StatementAbstractType");
	case SOAP_TYPE_PointerTosaml1__AdviceType:
		return soap_in_PointerTosaml1__AdviceType(soap, NULL, NULL, "saml1:AdviceType");
	case SOAP_TYPE_PointerTosaml1__ConditionsType:
		return soap_in_PointerTosaml1__ConditionsType(soap, NULL, NULL, "saml1:ConditionsType");
	case SOAP_TYPE_PointerToULONG64:
		return soap_in_PointerToULONG64(soap, NULL, NULL, "xsd:unsignedLong");
	case SOAP_TYPE_PointerTowsc__PropertiesType:
		return soap_in_PointerTowsc__PropertiesType(soap, NULL, NULL, "wsc:PropertiesType");
	case SOAP_TYPE_wsc__FaultCodeOpenEnumType:
	{	char **s;
		s = soap_in_wsc__FaultCodeOpenEnumType(soap, NULL, NULL, "wsc:FaultCodeOpenEnumType");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_PointerTo_xenc__ReferenceList:
		return soap_in_PointerTo_xenc__ReferenceList(soap, NULL, NULL, "xenc:ReferenceList");
	case SOAP_TYPE_PointerToxenc__ReferenceType:
		return soap_in_PointerToxenc__ReferenceType(soap, NULL, NULL, "xenc:ReferenceType");
	case SOAP_TYPE_PointerToxenc__EncryptionPropertyType:
		return soap_in_PointerToxenc__EncryptionPropertyType(soap, NULL, NULL, "xenc:EncryptionPropertyType");
	case SOAP_TYPE_PointerToPointerTo_ds__Transform:
		return soap_in_PointerToPointerTo_ds__Transform(soap, NULL, NULL, "ds:Transform");
	case SOAP_TYPE_PointerTo_ds__Transform:
		return soap_in_PointerTo_ds__Transform(soap, NULL, NULL, "ds:Transform");
	case SOAP_TYPE_PointerToxenc__TransformsType:
		return soap_in_PointerToxenc__TransformsType(soap, NULL, NULL, "xenc:TransformsType");
	case SOAP_TYPE_PointerToxenc__CipherReferenceType:
		return soap_in_PointerToxenc__CipherReferenceType(soap, NULL, NULL, "xenc:CipherReferenceType");
	case SOAP_TYPE_PointerToxenc__EncryptionPropertiesType:
		return soap_in_PointerToxenc__EncryptionPropertiesType(soap, NULL, NULL, "xenc:EncryptionPropertiesType");
	case SOAP_TYPE_PointerToxenc__CipherDataType:
		return soap_in_PointerToxenc__CipherDataType(soap, NULL, NULL, "xenc:CipherDataType");
	case SOAP_TYPE_PointerTo_ds__KeyInfo:
		return soap_in_PointerTo_ds__KeyInfo(soap, NULL, NULL, "ds:KeyInfo");
	case SOAP_TYPE_PointerToxenc__EncryptionMethodType:
		return soap_in_PointerToxenc__EncryptionMethodType(soap, NULL, NULL, "xenc:EncryptionMethodType");
	case SOAP_TYPE_PointerTods__X509IssuerSerialType:
		return soap_in_PointerTods__X509IssuerSerialType(soap, NULL, NULL, "ds:X509IssuerSerialType");
	case SOAP_TYPE_PointerTods__RSAKeyValueType:
		return soap_in_PointerTods__RSAKeyValueType(soap, NULL, NULL, "ds:RSAKeyValueType");
	case SOAP_TYPE_PointerTods__DSAKeyValueType:
		return soap_in_PointerTods__DSAKeyValueType(soap, NULL, NULL, "ds:DSAKeyValueType");
	case SOAP_TYPE_PointerTods__TransformType:
		return soap_in_PointerTods__TransformType(soap, NULL, NULL, "ds:TransformType");
	case SOAP_TYPE_PointerTods__DigestMethodType:
		return soap_in_PointerTods__DigestMethodType(soap, NULL, NULL, "ds:DigestMethodType");
	case SOAP_TYPE_PointerTods__TransformsType:
		return soap_in_PointerTods__TransformsType(soap, NULL, NULL, "ds:TransformsType");
	case SOAP_TYPE_PointerToint:
		return soap_in_PointerToint(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_PointerTods__ReferenceType:
		return soap_in_PointerTods__ReferenceType(soap, NULL, NULL, "ds:ReferenceType");
	case SOAP_TYPE_PointerTods__SignatureMethodType:
		return soap_in_PointerTods__SignatureMethodType(soap, NULL, NULL, "ds:SignatureMethodType");
	case SOAP_TYPE_PointerTods__CanonicalizationMethodType:
		return soap_in_PointerTods__CanonicalizationMethodType(soap, NULL, NULL, "ds:CanonicalizationMethodType");
	case SOAP_TYPE_PointerTo_wsse__SecurityTokenReference:
		return soap_in_PointerTo_wsse__SecurityTokenReference(soap, NULL, NULL, "wsse:SecurityTokenReference");
	case SOAP_TYPE_PointerTods__RetrievalMethodType:
		return soap_in_PointerTods__RetrievalMethodType(soap, NULL, NULL, "ds:RetrievalMethodType");
	case SOAP_TYPE_PointerTods__KeyValueType:
		return soap_in_PointerTods__KeyValueType(soap, NULL, NULL, "ds:KeyValueType");
	case SOAP_TYPE_PointerTo_c14n__InclusiveNamespaces:
		return soap_in_PointerTo_c14n__InclusiveNamespaces(soap, NULL, NULL, "c14n:InclusiveNamespaces");
	case SOAP_TYPE_PointerTods__KeyInfoType:
		return soap_in_PointerTods__KeyInfoType(soap, NULL, NULL, "ds:KeyInfoType");
	case SOAP_TYPE_PointerTods__SignedInfoType:
		return soap_in_PointerTods__SignedInfoType(soap, NULL, NULL, "ds:SignedInfoType");
	case SOAP_TYPE_PointerTods__X509DataType:
		return soap_in_PointerTods__X509DataType(soap, NULL, NULL, "ds:X509DataType");
	case SOAP_TYPE_PointerTo_wsse__Embedded:
		return soap_in_PointerTo_wsse__Embedded(soap, NULL, NULL, "wsse:Embedded");
	case SOAP_TYPE_PointerTo_wsse__KeyIdentifier:
		return soap_in_PointerTo_wsse__KeyIdentifier(soap, NULL, NULL, "wsse:KeyIdentifier");
	case SOAP_TYPE_PointerTo_wsse__Reference:
		return soap_in_PointerTo_wsse__Reference(soap, NULL, NULL, "wsse:Reference");
	case SOAP_TYPE_PointerTowsse__EncodedString:
		return soap_in_PointerTowsse__EncodedString(soap, NULL, NULL, "wsse:EncodedString");
	case SOAP_TYPE_PointerTo_wsse__Password:
		return soap_in_PointerTo_wsse__Password(soap, NULL, NULL, "wsse:Password");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:sendBillResponse"))
		{	*type = SOAP_TYPE_ns1__sendBillResponse;
			return soap_in_ns1__sendBillResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:sendBill"))
		{	*type = SOAP_TYPE_ns1__sendBill;
			return soap_in_ns1__sendBill(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:sendPackResponse"))
		{	*type = SOAP_TYPE_ns1__sendPackResponse;
			return soap_in_ns1__sendPackResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:sendPack"))
		{	*type = SOAP_TYPE_ns1__sendPack;
			return soap_in_ns1__sendPack(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:statusResponse"))
		{	*type = SOAP_TYPE_ns1__statusResponse;
			return soap_in_ns1__statusResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getStatusResponse"))
		{	*type = SOAP_TYPE_ns1__getStatusResponse;
			return soap_in_ns1__getStatusResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getStatus"))
		{	*type = SOAP_TYPE_ns1__getStatus;
			return soap_in_ns1__getStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:sendSummaryResponse"))
		{	*type = SOAP_TYPE_ns1__sendSummaryResponse;
			return soap_in_ns1__sendSummaryResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:sendSummary"))
		{	*type = SOAP_TYPE_ns1__sendSummary;
			return soap_in_ns1__sendSummary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:SignaturePropertyType"))
		{	*type = SOAP_TYPE_ds__SignaturePropertyType;
			return soap_in_ds__SignaturePropertyType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:SignaturePropertiesType"))
		{	*type = SOAP_TYPE_ds__SignaturePropertiesType;
			return soap_in_ds__SignaturePropertiesType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:ManifestType"))
		{	*type = SOAP_TYPE_ds__ManifestType;
			return soap_in_ds__ManifestType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:ObjectType"))
		{	*type = SOAP_TYPE_ds__ObjectType;
			return soap_in_ds__ObjectType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:SPKIDataType"))
		{	*type = SOAP_TYPE_ds__SPKIDataType;
			return soap_in_ds__SPKIDataType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:PGPDataType"))
		{	*type = SOAP_TYPE_ds__PGPDataType;
			return soap_in_ds__PGPDataType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:SignatureValueType"))
		{	*type = SOAP_TYPE_ds__SignatureValueType;
			return soap_in_ds__SignatureValueType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedLong"))
		{	*type = SOAP_TYPE_ULONG64;
			return soap_in_ULONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_dateTime;
			return soap_in_dateTime(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:DecisionType"))
		{	*type = SOAP_TYPE_saml2__DecisionType;
			return soap_in_saml2__DecisionType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:DecisionType"))
		{	*type = SOAP_TYPE_saml1__DecisionType;
			return soap_in_saml1__DecisionType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsc:FaultCodeType"))
		{	*type = SOAP_TYPE_wsc__FaultCodeType;
			return soap_in_wsc__FaultCodeType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsse:FaultcodeEnum"))
		{	*type = SOAP_TYPE_wsse__FaultcodeEnum;
			return soap_in_wsse__FaultcodeEnum(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsu:tTimestampFault"))
		{	*type = SOAP_TYPE_wsu__tTimestampFault;
			return soap_in_wsu__tTimestampFault(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:AttributeType"))
		{	*type = SOAP_TYPE_saml2__AttributeType;
			return soap_in_saml2__AttributeType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:AttributeStatementType"))
		{	*type = SOAP_TYPE_saml2__AttributeStatementType;
			return soap_in_saml2__AttributeStatementType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:EvidenceType"))
		{	*type = SOAP_TYPE_saml2__EvidenceType;
			return soap_in_saml2__EvidenceType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:ActionType"))
		{	*type = SOAP_TYPE_saml2__ActionType;
			return soap_in_saml2__ActionType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:AuthzDecisionStatementType"))
		{	*type = SOAP_TYPE_saml2__AuthzDecisionStatementType;
			return soap_in_saml2__AuthzDecisionStatementType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:AuthnContextType"))
		{	*type = SOAP_TYPE_saml2__AuthnContextType;
			return soap_in_saml2__AuthnContextType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:SubjectLocalityType"))
		{	*type = SOAP_TYPE_saml2__SubjectLocalityType;
			return soap_in_saml2__SubjectLocalityType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:AuthnStatementType"))
		{	*type = SOAP_TYPE_saml2__AuthnStatementType;
			return soap_in_saml2__AuthnStatementType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:StatementAbstractType"))
		{	*type = SOAP_TYPE_saml2__StatementAbstractType;
			return soap_in_saml2__StatementAbstractType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:AdviceType"))
		{	*type = SOAP_TYPE_saml2__AdviceType;
			return soap_in_saml2__AdviceType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:ProxyRestrictionType"))
		{	*type = SOAP_TYPE_saml2__ProxyRestrictionType;
			return soap_in_saml2__ProxyRestrictionType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:OneTimeUseType"))
		{	*type = SOAP_TYPE_saml2__OneTimeUseType;
			return soap_in_saml2__OneTimeUseType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:AudienceRestrictionType"))
		{	*type = SOAP_TYPE_saml2__AudienceRestrictionType;
			return soap_in_saml2__AudienceRestrictionType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:ConditionAbstractType"))
		{	*type = SOAP_TYPE_saml2__ConditionAbstractType;
			return soap_in_saml2__ConditionAbstractType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:ConditionsType"))
		{	*type = SOAP_TYPE_saml2__ConditionsType;
			return soap_in_saml2__ConditionsType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:KeyInfoConfirmationDataType"))
		{	*type = SOAP_TYPE_saml2__KeyInfoConfirmationDataType;
			return soap_in_saml2__KeyInfoConfirmationDataType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:SubjectConfirmationDataType"))
		{	*type = SOAP_TYPE_saml2__SubjectConfirmationDataType;
			return soap_in_saml2__SubjectConfirmationDataType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:SubjectConfirmationType"))
		{	*type = SOAP_TYPE_saml2__SubjectConfirmationType;
			return soap_in_saml2__SubjectConfirmationType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:SubjectType"))
		{	*type = SOAP_TYPE_saml2__SubjectType;
			return soap_in_saml2__SubjectType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:AssertionType"))
		{	*type = SOAP_TYPE_saml2__AssertionType;
			return soap_in_saml2__AssertionType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:EncryptedElementType"))
		{	*type = SOAP_TYPE_saml2__EncryptedElementType;
			return soap_in_saml2__EncryptedElementType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:NameIDType"))
		{	*type = SOAP_TYPE_saml2__NameIDType;
			return soap_in_saml2__NameIDType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:BaseIDAbstractType"))
		{	*type = SOAP_TYPE_saml2__BaseIDAbstractType;
			return soap_in_saml2__BaseIDAbstractType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:AttributeType"))
		{	*type = SOAP_TYPE_saml1__AttributeType;
			return soap_in_saml1__AttributeType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:AttributeDesignatorType"))
		{	*type = SOAP_TYPE_saml1__AttributeDesignatorType;
			return soap_in_saml1__AttributeDesignatorType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:AttributeStatementType"))
		{	*type = SOAP_TYPE_saml1__AttributeStatementType;
			return soap_in_saml1__AttributeStatementType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:EvidenceType"))
		{	*type = SOAP_TYPE_saml1__EvidenceType;
			return soap_in_saml1__EvidenceType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:ActionType"))
		{	*type = SOAP_TYPE_saml1__ActionType;
			return soap_in_saml1__ActionType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:AuthorizationDecisionStatementType"))
		{	*type = SOAP_TYPE_saml1__AuthorizationDecisionStatementType;
			return soap_in_saml1__AuthorizationDecisionStatementType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:AuthorityBindingType"))
		{	*type = SOAP_TYPE_saml1__AuthorityBindingType;
			return soap_in_saml1__AuthorityBindingType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:SubjectLocalityType"))
		{	*type = SOAP_TYPE_saml1__SubjectLocalityType;
			return soap_in_saml1__SubjectLocalityType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:AuthenticationStatementType"))
		{	*type = SOAP_TYPE_saml1__AuthenticationStatementType;
			return soap_in_saml1__AuthenticationStatementType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:SubjectConfirmationType"))
		{	*type = SOAP_TYPE_saml1__SubjectConfirmationType;
			return soap_in_saml1__SubjectConfirmationType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:NameIdentifierType"))
		{	*type = SOAP_TYPE_saml1__NameIdentifierType;
			return soap_in_saml1__NameIdentifierType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:SubjectType"))
		{	*type = SOAP_TYPE_saml1__SubjectType;
			return soap_in_saml1__SubjectType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:SubjectStatementAbstractType"))
		{	*type = SOAP_TYPE_saml1__SubjectStatementAbstractType;
			return soap_in_saml1__SubjectStatementAbstractType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:StatementAbstractType"))
		{	*type = SOAP_TYPE_saml1__StatementAbstractType;
			return soap_in_saml1__StatementAbstractType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:AdviceType"))
		{	*type = SOAP_TYPE_saml1__AdviceType;
			return soap_in_saml1__AdviceType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:DoNotCacheConditionType"))
		{	*type = SOAP_TYPE_saml1__DoNotCacheConditionType;
			return soap_in_saml1__DoNotCacheConditionType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:AudienceRestrictionConditionType"))
		{	*type = SOAP_TYPE_saml1__AudienceRestrictionConditionType;
			return soap_in_saml1__AudienceRestrictionConditionType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:ConditionAbstractType"))
		{	*type = SOAP_TYPE_saml1__ConditionAbstractType;
			return soap_in_saml1__ConditionAbstractType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:ConditionsType"))
		{	*type = SOAP_TYPE_saml1__ConditionsType;
			return soap_in_saml1__ConditionsType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:AssertionType"))
		{	*type = SOAP_TYPE_saml1__AssertionType;
			return soap_in_saml1__AssertionType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsc:PropertiesType"))
		{	*type = SOAP_TYPE_wsc__PropertiesType;
			return soap_in_wsc__PropertiesType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsc:DerivedKeyTokenType"))
		{	*type = SOAP_TYPE_wsc__DerivedKeyTokenType;
			return soap_in_wsc__DerivedKeyTokenType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsc:SecurityContextTokenType"))
		{	*type = SOAP_TYPE_wsc__SecurityContextTokenType;
			return soap_in_wsc__SecurityContextTokenType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xenc:EncryptionPropertyType"))
		{	*type = SOAP_TYPE_xenc__EncryptionPropertyType;
			return soap_in_xenc__EncryptionPropertyType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xenc:EncryptionPropertiesType"))
		{	*type = SOAP_TYPE_xenc__EncryptionPropertiesType;
			return soap_in_xenc__EncryptionPropertiesType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xenc:ReferenceType"))
		{	*type = SOAP_TYPE_xenc__ReferenceType;
			return soap_in_xenc__ReferenceType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xenc:AgreementMethodType"))
		{	*type = SOAP_TYPE_xenc__AgreementMethodType;
			return soap_in_xenc__AgreementMethodType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xenc:EncryptedKeyType"))
		{	*type = SOAP_TYPE_xenc__EncryptedKeyType;
			return soap_in_xenc__EncryptedKeyType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xenc:EncryptedDataType"))
		{	*type = SOAP_TYPE_xenc__EncryptedDataType;
			return soap_in_xenc__EncryptedDataType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xenc:TransformsType"))
		{	*type = SOAP_TYPE_xenc__TransformsType;
			return soap_in_xenc__TransformsType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xenc:CipherReferenceType"))
		{	*type = SOAP_TYPE_xenc__CipherReferenceType;
			return soap_in_xenc__CipherReferenceType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xenc:CipherDataType"))
		{	*type = SOAP_TYPE_xenc__CipherDataType;
			return soap_in_xenc__CipherDataType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xenc:EncryptionMethodType"))
		{	*type = SOAP_TYPE_xenc__EncryptionMethodType;
			return soap_in_xenc__EncryptionMethodType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xenc:EncryptedType"))
		{	*type = SOAP_TYPE_xenc__EncryptedType;
			return soap_in_xenc__EncryptedType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:RSAKeyValueType"))
		{	*type = SOAP_TYPE_ds__RSAKeyValueType;
			return soap_in_ds__RSAKeyValueType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:DSAKeyValueType"))
		{	*type = SOAP_TYPE_ds__DSAKeyValueType;
			return soap_in_ds__DSAKeyValueType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:X509IssuerSerialType"))
		{	*type = SOAP_TYPE_ds__X509IssuerSerialType;
			return soap_in_ds__X509IssuerSerialType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:RetrievalMethodType"))
		{	*type = SOAP_TYPE_ds__RetrievalMethodType;
			return soap_in_ds__RetrievalMethodType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:KeyValueType"))
		{	*type = SOAP_TYPE_ds__KeyValueType;
			return soap_in_ds__KeyValueType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:DigestMethodType"))
		{	*type = SOAP_TYPE_ds__DigestMethodType;
			return soap_in_ds__DigestMethodType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:TransformType"))
		{	*type = SOAP_TYPE_ds__TransformType;
			return soap_in_ds__TransformType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:TransformsType"))
		{	*type = SOAP_TYPE_ds__TransformsType;
			return soap_in_ds__TransformsType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:ReferenceType"))
		{	*type = SOAP_TYPE_ds__ReferenceType;
			return soap_in_ds__ReferenceType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:SignatureMethodType"))
		{	*type = SOAP_TYPE_ds__SignatureMethodType;
			return soap_in_ds__SignatureMethodType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:CanonicalizationMethodType"))
		{	*type = SOAP_TYPE_ds__CanonicalizationMethodType;
			return soap_in_ds__CanonicalizationMethodType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:KeyInfoType"))
		{	*type = SOAP_TYPE_ds__KeyInfoType;
			return soap_in_ds__KeyInfoType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:SignedInfoType"))
		{	*type = SOAP_TYPE_ds__SignedInfoType;
			return soap_in_ds__SignedInfoType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:SignatureType"))
		{	*type = SOAP_TYPE_ds__SignatureType;
			return soap_in_ds__SignatureType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:X509DataType"))
		{	*type = SOAP_TYPE_ds__X509DataType;
			return soap_in_ds__X509DataType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsse:EncodedString"))
		{	*type = SOAP_TYPE_wsse__EncodedString;
			return soap_in_wsse__EncodedString(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsc:FaultCodeOpenEnumType"))
		{	char **s;
			*type = SOAP_TYPE_wsc__FaultCodeOpenEnumType;
			s = soap_in_wsc__FaultCodeOpenEnumType(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "wsse:Security"))
		{	*type = SOAP_TYPE__wsse__Security;
			return soap_in__wsse__Security(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:EncryptedAttribute"))
		{	*type = SOAP_TYPE__saml2__EncryptedAttribute;
			return soap_in__saml2__EncryptedAttribute(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:Attribute"))
		{	*type = SOAP_TYPE__saml2__Attribute;
			return soap_in__saml2__Attribute(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:AttributeStatement"))
		{	*type = SOAP_TYPE__saml2__AttributeStatement;
			return soap_in__saml2__AttributeStatement(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:Evidence"))
		{	*type = SOAP_TYPE__saml2__Evidence;
			return soap_in__saml2__Evidence(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:Action"))
		{	*type = SOAP_TYPE__saml2__Action;
			return soap_in__saml2__Action(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:AuthzDecisionStatement"))
		{	*type = SOAP_TYPE__saml2__AuthzDecisionStatement;
			return soap_in__saml2__AuthzDecisionStatement(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:AuthnContext"))
		{	*type = SOAP_TYPE__saml2__AuthnContext;
			return soap_in__saml2__AuthnContext(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:SubjectLocality"))
		{	*type = SOAP_TYPE__saml2__SubjectLocality;
			return soap_in__saml2__SubjectLocality(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:AuthnStatement"))
		{	*type = SOAP_TYPE__saml2__AuthnStatement;
			return soap_in__saml2__AuthnStatement(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:Statement"))
		{	*type = SOAP_TYPE__saml2__Statement;
			return soap_in__saml2__Statement(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:EncryptedAssertion"))
		{	*type = SOAP_TYPE__saml2__EncryptedAssertion;
			return soap_in__saml2__EncryptedAssertion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:Advice"))
		{	*type = SOAP_TYPE__saml2__Advice;
			return soap_in__saml2__Advice(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:ProxyRestriction"))
		{	*type = SOAP_TYPE__saml2__ProxyRestriction;
			return soap_in__saml2__ProxyRestriction(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:OneTimeUse"))
		{	*type = SOAP_TYPE__saml2__OneTimeUse;
			return soap_in__saml2__OneTimeUse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:AudienceRestriction"))
		{	*type = SOAP_TYPE__saml2__AudienceRestriction;
			return soap_in__saml2__AudienceRestriction(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:Condition"))
		{	*type = SOAP_TYPE__saml2__Condition;
			return soap_in__saml2__Condition(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:Conditions"))
		{	*type = SOAP_TYPE__saml2__Conditions;
			return soap_in__saml2__Conditions(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:SubjectConfirmationData"))
		{	*type = SOAP_TYPE__saml2__SubjectConfirmationData;
			return soap_in__saml2__SubjectConfirmationData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:SubjectConfirmation"))
		{	*type = SOAP_TYPE__saml2__SubjectConfirmation;
			return soap_in__saml2__SubjectConfirmation(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:Subject"))
		{	*type = SOAP_TYPE__saml2__Subject;
			return soap_in__saml2__Subject(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:Assertion"))
		{	*type = SOAP_TYPE__saml2__Assertion;
			return soap_in__saml2__Assertion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:Issuer"))
		{	*type = SOAP_TYPE__saml2__Issuer;
			return soap_in__saml2__Issuer(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:EncryptedID"))
		{	*type = SOAP_TYPE__saml2__EncryptedID;
			return soap_in__saml2__EncryptedID(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:NameID"))
		{	*type = SOAP_TYPE__saml2__NameID;
			return soap_in__saml2__NameID(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:BaseID"))
		{	*type = SOAP_TYPE__saml2__BaseID;
			return soap_in__saml2__BaseID(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:Attribute"))
		{	*type = SOAP_TYPE__saml1__Attribute;
			return soap_in__saml1__Attribute(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:AttributeDesignator"))
		{	*type = SOAP_TYPE__saml1__AttributeDesignator;
			return soap_in__saml1__AttributeDesignator(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:AttributeStatement"))
		{	*type = SOAP_TYPE__saml1__AttributeStatement;
			return soap_in__saml1__AttributeStatement(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:Evidence"))
		{	*type = SOAP_TYPE__saml1__Evidence;
			return soap_in__saml1__Evidence(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:Action"))
		{	*type = SOAP_TYPE__saml1__Action;
			return soap_in__saml1__Action(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:AuthorizationDecisionStatement"))
		{	*type = SOAP_TYPE__saml1__AuthorizationDecisionStatement;
			return soap_in__saml1__AuthorizationDecisionStatement(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:AuthorityBinding"))
		{	*type = SOAP_TYPE__saml1__AuthorityBinding;
			return soap_in__saml1__AuthorityBinding(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:SubjectLocality"))
		{	*type = SOAP_TYPE__saml1__SubjectLocality;
			return soap_in__saml1__SubjectLocality(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:AuthenticationStatement"))
		{	*type = SOAP_TYPE__saml1__AuthenticationStatement;
			return soap_in__saml1__AuthenticationStatement(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:SubjectConfirmation"))
		{	*type = SOAP_TYPE__saml1__SubjectConfirmation;
			return soap_in__saml1__SubjectConfirmation(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:NameIdentifier"))
		{	*type = SOAP_TYPE__saml1__NameIdentifier;
			return soap_in__saml1__NameIdentifier(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:Subject"))
		{	*type = SOAP_TYPE__saml1__Subject;
			return soap_in__saml1__Subject(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:SubjectStatement"))
		{	*type = SOAP_TYPE__saml1__SubjectStatement;
			return soap_in__saml1__SubjectStatement(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:Statement"))
		{	*type = SOAP_TYPE__saml1__Statement;
			return soap_in__saml1__Statement(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:Advice"))
		{	*type = SOAP_TYPE__saml1__Advice;
			return soap_in__saml1__Advice(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:DoNotCacheCondition"))
		{	*type = SOAP_TYPE__saml1__DoNotCacheCondition;
			return soap_in__saml1__DoNotCacheCondition(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:AudienceRestrictionCondition"))
		{	*type = SOAP_TYPE__saml1__AudienceRestrictionCondition;
			return soap_in__saml1__AudienceRestrictionCondition(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:Condition"))
		{	*type = SOAP_TYPE__saml1__Condition;
			return soap_in__saml1__Condition(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:Conditions"))
		{	*type = SOAP_TYPE__saml1__Conditions;
			return soap_in__saml1__Conditions(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml1:Assertion"))
		{	*type = SOAP_TYPE__saml1__Assertion;
			return soap_in__saml1__Assertion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xenc:EncryptionProperty"))
		{	*type = SOAP_TYPE__xenc__EncryptionProperty;
			return soap_in__xenc__EncryptionProperty(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xenc:EncryptionProperties"))
		{	*type = SOAP_TYPE__xenc__EncryptionProperties;
			return soap_in__xenc__EncryptionProperties(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xenc:AgreementMethod"))
		{	*type = SOAP_TYPE__xenc__AgreementMethod;
			return soap_in__xenc__AgreementMethod(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xenc:CipherReference"))
		{	*type = SOAP_TYPE__xenc__CipherReference;
			return soap_in__xenc__CipherReference(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xenc:CipherData"))
		{	*type = SOAP_TYPE__xenc__CipherData;
			return soap_in__xenc__CipherData(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xenc:ReferenceList"))
		{	*type = SOAP_TYPE__xenc__ReferenceList;
			return soap_in__xenc__ReferenceList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:RSAKeyValue"))
		{	*type = SOAP_TYPE__ds__RSAKeyValue;
			return soap_in__ds__RSAKeyValue(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:DSAKeyValue"))
		{	*type = SOAP_TYPE__ds__DSAKeyValue;
			return soap_in__ds__DSAKeyValue(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:X509Data"))
		{	*type = SOAP_TYPE__ds__X509Data;
			return soap_in__ds__X509Data(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:RetrievalMethod"))
		{	*type = SOAP_TYPE__ds__RetrievalMethod;
			return soap_in__ds__RetrievalMethod(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:KeyValue"))
		{	*type = SOAP_TYPE__ds__KeyValue;
			return soap_in__ds__KeyValue(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:DigestMethod"))
		{	*type = SOAP_TYPE__ds__DigestMethod;
			return soap_in__ds__DigestMethod(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:Transforms"))
		{	*type = SOAP_TYPE__ds__Transforms;
			return soap_in__ds__Transforms(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:Reference"))
		{	*type = SOAP_TYPE__ds__Reference;
			return soap_in__ds__Reference(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:SignatureMethod"))
		{	*type = SOAP_TYPE__ds__SignatureMethod;
			return soap_in__ds__SignatureMethod(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:CanonicalizationMethod"))
		{	*type = SOAP_TYPE__ds__CanonicalizationMethod;
			return soap_in__ds__CanonicalizationMethod(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:SignedInfo"))
		{	*type = SOAP_TYPE__ds__SignedInfo;
			return soap_in__ds__SignedInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:KeyInfo"))
		{	*type = SOAP_TYPE__ds__KeyInfo;
			return soap_in__ds__KeyInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:Transform"))
		{	*type = SOAP_TYPE__ds__Transform;
			return soap_in__ds__Transform(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "c14n:InclusiveNamespaces"))
		{	*type = SOAP_TYPE__c14n__InclusiveNamespaces;
			return soap_in__c14n__InclusiveNamespaces(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ds:Signature"))
		{	*type = SOAP_TYPE__ds__Signature;
			return soap_in__ds__Signature(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsse:SecurityTokenReference"))
		{	*type = SOAP_TYPE__wsse__SecurityTokenReference;
			return soap_in__wsse__SecurityTokenReference(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsse:KeyIdentifier"))
		{	*type = SOAP_TYPE__wsse__KeyIdentifier;
			return soap_in__wsse__KeyIdentifier(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsse:Embedded"))
		{	*type = SOAP_TYPE__wsse__Embedded;
			return soap_in__wsse__Embedded(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsse:Reference"))
		{	*type = SOAP_TYPE__wsse__Reference;
			return soap_in__wsse__Reference(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsse:BinarySecurityToken"))
		{	*type = SOAP_TYPE__wsse__BinarySecurityToken;
			return soap_in__wsse__BinarySecurityToken(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsse:Password"))
		{	*type = SOAP_TYPE__wsse__Password;
			return soap_in__wsse__Password(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsse:UsernameToken"))
		{	*type = SOAP_TYPE__wsse__UsernameToken;
			return soap_in__wsse__UsernameToken(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsu:Timestamp"))
		{	*type = SOAP_TYPE__wsu__Timestamp;
			return soap_in__wsu__Timestamp(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "saml2:AuthenticatingAuthority"))
		{	char **s;
			*type = SOAP_TYPE__saml2__AuthenticatingAuthority;
			s = soap_in__saml2__AuthenticatingAuthority(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "saml2:AuthnContextDeclRef"))
		{	char **s;
			*type = SOAP_TYPE__saml2__AuthnContextDeclRef;
			s = soap_in__saml2__AuthnContextDeclRef(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "saml2:AuthnContextClassRef"))
		{	char **s;
			*type = SOAP_TYPE__saml2__AuthnContextClassRef;
			s = soap_in__saml2__AuthnContextClassRef(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "saml2:Audience"))
		{	char **s;
			*type = SOAP_TYPE__saml2__Audience;
			s = soap_in__saml2__Audience(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "saml2:AssertionURIRef"))
		{	char **s;
			*type = SOAP_TYPE__saml2__AssertionURIRef;
			s = soap_in__saml2__AssertionURIRef(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "saml2:AssertionIDRef"))
		{	char **s;
			*type = SOAP_TYPE__saml2__AssertionIDRef;
			s = soap_in__saml2__AssertionIDRef(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "saml1:ConfirmationMethod"))
		{	char **s;
			*type = SOAP_TYPE__saml1__ConfirmationMethod;
			s = soap_in__saml1__ConfirmationMethod(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "saml1:Audience"))
		{	char **s;
			*type = SOAP_TYPE__saml1__Audience;
			s = soap_in__saml1__Audience(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "saml1:AssertionIDReference"))
		{	char **s;
			*type = SOAP_TYPE__saml1__AssertionIDReference;
			s = soap_in__saml1__AssertionIDReference(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "ds:MgmtData"))
		{	char **s;
			*type = SOAP_TYPE__ds__MgmtData;
			s = soap_in__ds__MgmtData(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "ds:KeyName"))
		{	char **s;
			*type = SOAP_TYPE__ds__KeyName;
			s = soap_in__ds__KeyName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "ds:DigestValue"))
		{	char **s;
			*type = SOAP_TYPE__ds__DigestValue;
			s = soap_in__ds__DigestValue(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "ds:SignatureValue"))
		{	char **s;
			*type = SOAP_TYPE__ds__SignatureValue;
			s = soap_in__ds__SignatureValue(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && !soap->fignore && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body && soap_ignore(soap))
				return soap->error;
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_ds__SignaturePropertyType:
		return soap_out_ds__SignaturePropertyType(soap, tag, id, (const int *)ptr, "ds:SignaturePropertyType");
	case SOAP_TYPE_ds__SignaturePropertiesType:
		return soap_out_ds__SignaturePropertiesType(soap, tag, id, (const int *)ptr, "ds:SignaturePropertiesType");
	case SOAP_TYPE_ds__ManifestType:
		return soap_out_ds__ManifestType(soap, tag, id, (const int *)ptr, "ds:ManifestType");
	case SOAP_TYPE_ds__ObjectType:
		return soap_out_ds__ObjectType(soap, tag, id, (const int *)ptr, "ds:ObjectType");
	case SOAP_TYPE_ds__SPKIDataType:
		return soap_out_ds__SPKIDataType(soap, tag, id, (const int *)ptr, "ds:SPKIDataType");
	case SOAP_TYPE_ds__PGPDataType:
		return soap_out_ds__PGPDataType(soap, tag, id, (const int *)ptr, "ds:PGPDataType");
	case SOAP_TYPE_ds__SignatureValueType:
		return soap_out_ds__SignatureValueType(soap, tag, id, (const int *)ptr, "ds:SignatureValueType");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_ULONG64:
		return soap_out_ULONG64(soap, tag, id, (const ULONG64 *)ptr, "xsd:unsignedLong");
	case SOAP_TYPE_dateTime:
		return soap_out_dateTime(soap, tag, id, (const time_t *)ptr, "xsd:dateTime");
	case SOAP_TYPE_saml2__DecisionType:
		return soap_out_saml2__DecisionType(soap, tag, id, (const enum saml2__DecisionType *)ptr, "saml2:DecisionType");
	case SOAP_TYPE_saml1__DecisionType:
		return soap_out_saml1__DecisionType(soap, tag, id, (const enum saml1__DecisionType *)ptr, "saml1:DecisionType");
	case SOAP_TYPE_wsc__FaultCodeType:
		return soap_out_wsc__FaultCodeType(soap, tag, id, (const enum wsc__FaultCodeType *)ptr, "wsc:FaultCodeType");
	case SOAP_TYPE_wsse__FaultcodeEnum:
		return soap_out_wsse__FaultcodeEnum(soap, tag, id, (const enum wsse__FaultcodeEnum *)ptr, "wsse:FaultcodeEnum");
	case SOAP_TYPE_wsu__tTimestampFault:
		return soap_out_wsu__tTimestampFault(soap, tag, id, (const enum wsu__tTimestampFault *)ptr, "wsu:tTimestampFault");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_ns1__sendBillResponse:
		return ((ns1__sendBillResponse *)ptr)->soap_out(soap, tag, id, "ns1:sendBillResponse");
	case SOAP_TYPE_ns1__sendBill:
		return ((ns1__sendBill *)ptr)->soap_out(soap, tag, id, "ns1:sendBill");
	case SOAP_TYPE_ns1__sendPackResponse:
		return ((ns1__sendPackResponse *)ptr)->soap_out(soap, tag, id, "ns1:sendPackResponse");
	case SOAP_TYPE_ns1__sendPack:
		return ((ns1__sendPack *)ptr)->soap_out(soap, tag, id, "ns1:sendPack");
	case SOAP_TYPE_ns1__statusResponse:
		return ((ns1__statusResponse *)ptr)->soap_out(soap, tag, id, "ns1:statusResponse");
	case SOAP_TYPE_ns1__getStatusResponse:
		return ((ns1__getStatusResponse *)ptr)->soap_out(soap, tag, id, "ns1:getStatusResponse");
	case SOAP_TYPE_ns1__getStatus:
		return ((ns1__getStatus *)ptr)->soap_out(soap, tag, id, "ns1:getStatus");
	case SOAP_TYPE_ns1__sendSummaryResponse:
		return ((ns1__sendSummaryResponse *)ptr)->soap_out(soap, tag, id, "ns1:sendSummaryResponse");
	case SOAP_TYPE_ns1__sendSummary:
		return ((ns1__sendSummary *)ptr)->soap_out(soap, tag, id, "ns1:sendSummary");
	case SOAP_TYPE_xsd__base64Binary:
		return ((xsd__base64Binary *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE__wsse__Security:
		return soap_out__wsse__Security(soap, "wsse:Security", id, (const struct _wsse__Security *)ptr, "");
	case SOAP_TYPE__saml2__EncryptedAttribute:
		return soap_out__saml2__EncryptedAttribute(soap, "saml2:EncryptedAttribute", id, (const struct saml2__EncryptedElementType *)ptr, "");
	case SOAP_TYPE__saml2__Attribute:
		return soap_out__saml2__Attribute(soap, "saml2:Attribute", id, (const struct saml2__AttributeType *)ptr, "");
	case SOAP_TYPE__saml2__AttributeStatement:
		return soap_out__saml2__AttributeStatement(soap, "saml2:AttributeStatement", id, (const struct saml2__AttributeStatementType *)ptr, "");
	case SOAP_TYPE__saml2__Evidence:
		return soap_out__saml2__Evidence(soap, "saml2:Evidence", id, (const struct saml2__EvidenceType *)ptr, "");
	case SOAP_TYPE__saml2__Action:
		return soap_out__saml2__Action(soap, "saml2:Action", id, (const struct saml2__ActionType *)ptr, "");
	case SOAP_TYPE__saml2__AuthzDecisionStatement:
		return soap_out__saml2__AuthzDecisionStatement(soap, "saml2:AuthzDecisionStatement", id, (const struct saml2__AuthzDecisionStatementType *)ptr, "");
	case SOAP_TYPE__saml2__AuthnContext:
		return soap_out__saml2__AuthnContext(soap, "saml2:AuthnContext", id, (const struct saml2__AuthnContextType *)ptr, "");
	case SOAP_TYPE__saml2__SubjectLocality:
		return soap_out__saml2__SubjectLocality(soap, "saml2:SubjectLocality", id, (const struct saml2__SubjectLocalityType *)ptr, "");
	case SOAP_TYPE__saml2__AuthnStatement:
		return soap_out__saml2__AuthnStatement(soap, "saml2:AuthnStatement", id, (const struct saml2__AuthnStatementType *)ptr, "");
	case SOAP_TYPE__saml2__Statement:
		return soap_out__saml2__Statement(soap, "saml2:Statement", id, (const struct saml2__StatementAbstractType *)ptr, "");
	case SOAP_TYPE__saml2__EncryptedAssertion:
		return soap_out__saml2__EncryptedAssertion(soap, "saml2:EncryptedAssertion", id, (const struct saml2__EncryptedElementType *)ptr, "");
	case SOAP_TYPE__saml2__Advice:
		return soap_out__saml2__Advice(soap, "saml2:Advice", id, (const struct saml2__AdviceType *)ptr, "");
	case SOAP_TYPE__saml2__ProxyRestriction:
		return soap_out__saml2__ProxyRestriction(soap, "saml2:ProxyRestriction", id, (const struct saml2__ProxyRestrictionType *)ptr, "");
	case SOAP_TYPE__saml2__OneTimeUse:
		return soap_out__saml2__OneTimeUse(soap, "saml2:OneTimeUse", id, (const struct saml2__OneTimeUseType *)ptr, "");
	case SOAP_TYPE__saml2__AudienceRestriction:
		return soap_out__saml2__AudienceRestriction(soap, "saml2:AudienceRestriction", id, (const struct saml2__AudienceRestrictionType *)ptr, "");
	case SOAP_TYPE__saml2__Condition:
		return soap_out__saml2__Condition(soap, "saml2:Condition", id, (const struct saml2__ConditionAbstractType *)ptr, "");
	case SOAP_TYPE__saml2__Conditions:
		return soap_out__saml2__Conditions(soap, "saml2:Conditions", id, (const struct saml2__ConditionsType *)ptr, "");
	case SOAP_TYPE__saml2__SubjectConfirmationData:
		return soap_out__saml2__SubjectConfirmationData(soap, "saml2:SubjectConfirmationData", id, (const struct saml2__SubjectConfirmationDataType *)ptr, "");
	case SOAP_TYPE__saml2__SubjectConfirmation:
		return soap_out__saml2__SubjectConfirmation(soap, "saml2:SubjectConfirmation", id, (const struct saml2__SubjectConfirmationType *)ptr, "");
	case SOAP_TYPE__saml2__Subject:
		return soap_out__saml2__Subject(soap, "saml2:Subject", id, (const struct saml2__SubjectType *)ptr, "");
	case SOAP_TYPE__saml2__Assertion:
		return soap_out__saml2__Assertion(soap, "saml2:Assertion", id, (const struct saml2__AssertionType *)ptr, "");
	case SOAP_TYPE__saml2__Issuer:
		return soap_out__saml2__Issuer(soap, "saml2:Issuer", id, (const struct saml2__NameIDType *)ptr, "");
	case SOAP_TYPE__saml2__EncryptedID:
		return soap_out__saml2__EncryptedID(soap, "saml2:EncryptedID", id, (const struct saml2__EncryptedElementType *)ptr, "");
	case SOAP_TYPE__saml2__NameID:
		return soap_out__saml2__NameID(soap, "saml2:NameID", id, (const struct saml2__NameIDType *)ptr, "");
	case SOAP_TYPE__saml2__BaseID:
		return soap_out__saml2__BaseID(soap, "saml2:BaseID", id, (const struct saml2__BaseIDAbstractType *)ptr, "");
	case SOAP_TYPE_saml2__AttributeType:
		return soap_out_saml2__AttributeType(soap, tag, id, (const struct saml2__AttributeType *)ptr, "saml2:AttributeType");
	case SOAP_TYPE_saml2__AttributeStatementType:
		return soap_out_saml2__AttributeStatementType(soap, tag, id, (const struct saml2__AttributeStatementType *)ptr, "saml2:AttributeStatementType");
	case SOAP_TYPE_saml2__EvidenceType:
		return soap_out_saml2__EvidenceType(soap, tag, id, (const struct saml2__EvidenceType *)ptr, "saml2:EvidenceType");
	case SOAP_TYPE_saml2__ActionType:
		return soap_out_saml2__ActionType(soap, tag, id, (const struct saml2__ActionType *)ptr, "saml2:ActionType");
	case SOAP_TYPE_saml2__AuthzDecisionStatementType:
		return soap_out_saml2__AuthzDecisionStatementType(soap, tag, id, (const struct saml2__AuthzDecisionStatementType *)ptr, "saml2:AuthzDecisionStatementType");
	case SOAP_TYPE_saml2__AuthnContextType:
		return soap_out_saml2__AuthnContextType(soap, tag, id, (const struct saml2__AuthnContextType *)ptr, "saml2:AuthnContextType");
	case SOAP_TYPE_saml2__SubjectLocalityType:
		return soap_out_saml2__SubjectLocalityType(soap, tag, id, (const struct saml2__SubjectLocalityType *)ptr, "saml2:SubjectLocalityType");
	case SOAP_TYPE_saml2__AuthnStatementType:
		return soap_out_saml2__AuthnStatementType(soap, tag, id, (const struct saml2__AuthnStatementType *)ptr, "saml2:AuthnStatementType");
	case SOAP_TYPE_saml2__StatementAbstractType:
		return soap_out_saml2__StatementAbstractType(soap, tag, id, (const struct saml2__StatementAbstractType *)ptr, "saml2:StatementAbstractType");
	case SOAP_TYPE_saml2__AdviceType:
		return soap_out_saml2__AdviceType(soap, tag, id, (const struct saml2__AdviceType *)ptr, "saml2:AdviceType");
	case SOAP_TYPE_saml2__ProxyRestrictionType:
		return soap_out_saml2__ProxyRestrictionType(soap, tag, id, (const struct saml2__ProxyRestrictionType *)ptr, "saml2:ProxyRestrictionType");
	case SOAP_TYPE_saml2__OneTimeUseType:
		return soap_out_saml2__OneTimeUseType(soap, tag, id, (const struct saml2__OneTimeUseType *)ptr, "saml2:OneTimeUseType");
	case SOAP_TYPE_saml2__AudienceRestrictionType:
		return soap_out_saml2__AudienceRestrictionType(soap, tag, id, (const struct saml2__AudienceRestrictionType *)ptr, "saml2:AudienceRestrictionType");
	case SOAP_TYPE_saml2__ConditionAbstractType:
		return soap_out_saml2__ConditionAbstractType(soap, tag, id, (const struct saml2__ConditionAbstractType *)ptr, "saml2:ConditionAbstractType");
	case SOAP_TYPE_saml2__ConditionsType:
		return soap_out_saml2__ConditionsType(soap, tag, id, (const struct saml2__ConditionsType *)ptr, "saml2:ConditionsType");
	case SOAP_TYPE_saml2__KeyInfoConfirmationDataType:
		return soap_out_saml2__KeyInfoConfirmationDataType(soap, tag, id, (const struct saml2__KeyInfoConfirmationDataType *)ptr, "saml2:KeyInfoConfirmationDataType");
	case SOAP_TYPE_saml2__SubjectConfirmationDataType:
		return soap_out_saml2__SubjectConfirmationDataType(soap, tag, id, (const struct saml2__SubjectConfirmationDataType *)ptr, "saml2:SubjectConfirmationDataType");
	case SOAP_TYPE_saml2__SubjectConfirmationType:
		return soap_out_saml2__SubjectConfirmationType(soap, tag, id, (const struct saml2__SubjectConfirmationType *)ptr, "saml2:SubjectConfirmationType");
	case SOAP_TYPE_saml2__SubjectType:
		return soap_out_saml2__SubjectType(soap, tag, id, (const struct saml2__SubjectType *)ptr, "saml2:SubjectType");
	case SOAP_TYPE_saml2__AssertionType:
		return soap_out_saml2__AssertionType(soap, tag, id, (const struct saml2__AssertionType *)ptr, "saml2:AssertionType");
	case SOAP_TYPE_saml2__EncryptedElementType:
		return soap_out_saml2__EncryptedElementType(soap, tag, id, (const struct saml2__EncryptedElementType *)ptr, "saml2:EncryptedElementType");
	case SOAP_TYPE_saml2__NameIDType:
		return soap_out_saml2__NameIDType(soap, tag, id, (const struct saml2__NameIDType *)ptr, "saml2:NameIDType");
	case SOAP_TYPE_saml2__BaseIDAbstractType:
		return soap_out_saml2__BaseIDAbstractType(soap, tag, id, (const struct saml2__BaseIDAbstractType *)ptr, "saml2:BaseIDAbstractType");
	case SOAP_TYPE__saml1__Attribute:
		return soap_out__saml1__Attribute(soap, "saml1:Attribute", id, (const struct saml1__AttributeType *)ptr, "");
	case SOAP_TYPE__saml1__AttributeDesignator:
		return soap_out__saml1__AttributeDesignator(soap, "saml1:AttributeDesignator", id, (const struct saml1__AttributeDesignatorType *)ptr, "");
	case SOAP_TYPE__saml1__AttributeStatement:
		return soap_out__saml1__AttributeStatement(soap, "saml1:AttributeStatement", id, (const struct saml1__AttributeStatementType *)ptr, "");
	case SOAP_TYPE__saml1__Evidence:
		return soap_out__saml1__Evidence(soap, "saml1:Evidence", id, (const struct saml1__EvidenceType *)ptr, "");
	case SOAP_TYPE__saml1__Action:
		return soap_out__saml1__Action(soap, "saml1:Action", id, (const struct saml1__ActionType *)ptr, "");
	case SOAP_TYPE__saml1__AuthorizationDecisionStatement:
		return soap_out__saml1__AuthorizationDecisionStatement(soap, "saml1:AuthorizationDecisionStatement", id, (const struct saml1__AuthorizationDecisionStatementType *)ptr, "");
	case SOAP_TYPE__saml1__AuthorityBinding:
		return soap_out__saml1__AuthorityBinding(soap, "saml1:AuthorityBinding", id, (const struct saml1__AuthorityBindingType *)ptr, "");
	case SOAP_TYPE__saml1__SubjectLocality:
		return soap_out__saml1__SubjectLocality(soap, "saml1:SubjectLocality", id, (const struct saml1__SubjectLocalityType *)ptr, "");
	case SOAP_TYPE__saml1__AuthenticationStatement:
		return soap_out__saml1__AuthenticationStatement(soap, "saml1:AuthenticationStatement", id, (const struct saml1__AuthenticationStatementType *)ptr, "");
	case SOAP_TYPE__saml1__SubjectConfirmation:
		return soap_out__saml1__SubjectConfirmation(soap, "saml1:SubjectConfirmation", id, (const struct saml1__SubjectConfirmationType *)ptr, "");
	case SOAP_TYPE__saml1__NameIdentifier:
		return soap_out__saml1__NameIdentifier(soap, "saml1:NameIdentifier", id, (const struct saml1__NameIdentifierType *)ptr, "");
	case SOAP_TYPE__saml1__Subject:
		return soap_out__saml1__Subject(soap, "saml1:Subject", id, (const struct saml1__SubjectType *)ptr, "");
	case SOAP_TYPE__saml1__SubjectStatement:
		return soap_out__saml1__SubjectStatement(soap, "saml1:SubjectStatement", id, (const struct saml1__SubjectStatementAbstractType *)ptr, "");
	case SOAP_TYPE__saml1__Statement:
		return soap_out__saml1__Statement(soap, "saml1:Statement", id, (const struct saml1__StatementAbstractType *)ptr, "");
	case SOAP_TYPE__saml1__Advice:
		return soap_out__saml1__Advice(soap, "saml1:Advice", id, (const struct saml1__AdviceType *)ptr, "");
	case SOAP_TYPE__saml1__DoNotCacheCondition:
		return soap_out__saml1__DoNotCacheCondition(soap, "saml1:DoNotCacheCondition", id, (const struct saml1__DoNotCacheConditionType *)ptr, "");
	case SOAP_TYPE__saml1__AudienceRestrictionCondition:
		return soap_out__saml1__AudienceRestrictionCondition(soap, "saml1:AudienceRestrictionCondition", id, (const struct saml1__AudienceRestrictionConditionType *)ptr, "");
	case SOAP_TYPE__saml1__Condition:
		return soap_out__saml1__Condition(soap, "saml1:Condition", id, (const struct saml1__ConditionAbstractType *)ptr, "");
	case SOAP_TYPE__saml1__Conditions:
		return soap_out__saml1__Conditions(soap, "saml1:Conditions", id, (const struct saml1__ConditionsType *)ptr, "");
	case SOAP_TYPE__saml1__Assertion:
		return soap_out__saml1__Assertion(soap, "saml1:Assertion", id, (const struct saml1__AssertionType *)ptr, "");
	case SOAP_TYPE_saml1__AttributeType:
		return soap_out_saml1__AttributeType(soap, tag, id, (const struct saml1__AttributeType *)ptr, "saml1:AttributeType");
	case SOAP_TYPE_saml1__AttributeDesignatorType:
		return soap_out_saml1__AttributeDesignatorType(soap, tag, id, (const struct saml1__AttributeDesignatorType *)ptr, "saml1:AttributeDesignatorType");
	case SOAP_TYPE_saml1__AttributeStatementType:
		return soap_out_saml1__AttributeStatementType(soap, tag, id, (const struct saml1__AttributeStatementType *)ptr, "saml1:AttributeStatementType");
	case SOAP_TYPE_saml1__EvidenceType:
		return soap_out_saml1__EvidenceType(soap, tag, id, (const struct saml1__EvidenceType *)ptr, "saml1:EvidenceType");
	case SOAP_TYPE_saml1__ActionType:
		return soap_out_saml1__ActionType(soap, tag, id, (const struct saml1__ActionType *)ptr, "saml1:ActionType");
	case SOAP_TYPE_saml1__AuthorizationDecisionStatementType:
		return soap_out_saml1__AuthorizationDecisionStatementType(soap, tag, id, (const struct saml1__AuthorizationDecisionStatementType *)ptr, "saml1:AuthorizationDecisionStatementType");
	case SOAP_TYPE_saml1__AuthorityBindingType:
		return soap_out_saml1__AuthorityBindingType(soap, tag, id, (const struct saml1__AuthorityBindingType *)ptr, "saml1:AuthorityBindingType");
	case SOAP_TYPE_saml1__SubjectLocalityType:
		return soap_out_saml1__SubjectLocalityType(soap, tag, id, (const struct saml1__SubjectLocalityType *)ptr, "saml1:SubjectLocalityType");
	case SOAP_TYPE_saml1__AuthenticationStatementType:
		return soap_out_saml1__AuthenticationStatementType(soap, tag, id, (const struct saml1__AuthenticationStatementType *)ptr, "saml1:AuthenticationStatementType");
	case SOAP_TYPE_saml1__SubjectConfirmationType:
		return soap_out_saml1__SubjectConfirmationType(soap, tag, id, (const struct saml1__SubjectConfirmationType *)ptr, "saml1:SubjectConfirmationType");
	case SOAP_TYPE_saml1__NameIdentifierType:
		return soap_out_saml1__NameIdentifierType(soap, tag, id, (const struct saml1__NameIdentifierType *)ptr, "saml1:NameIdentifierType");
	case SOAP_TYPE_saml1__SubjectType:
		return soap_out_saml1__SubjectType(soap, tag, id, (const struct saml1__SubjectType *)ptr, "saml1:SubjectType");
	case SOAP_TYPE_saml1__SubjectStatementAbstractType:
		return soap_out_saml1__SubjectStatementAbstractType(soap, tag, id, (const struct saml1__SubjectStatementAbstractType *)ptr, "saml1:SubjectStatementAbstractType");
	case SOAP_TYPE_saml1__StatementAbstractType:
		return soap_out_saml1__StatementAbstractType(soap, tag, id, (const struct saml1__StatementAbstractType *)ptr, "saml1:StatementAbstractType");
	case SOAP_TYPE_saml1__AdviceType:
		return soap_out_saml1__AdviceType(soap, tag, id, (const struct saml1__AdviceType *)ptr, "saml1:AdviceType");
	case SOAP_TYPE_saml1__DoNotCacheConditionType:
		return soap_out_saml1__DoNotCacheConditionType(soap, tag, id, (const struct saml1__DoNotCacheConditionType *)ptr, "saml1:DoNotCacheConditionType");
	case SOAP_TYPE_saml1__AudienceRestrictionConditionType:
		return soap_out_saml1__AudienceRestrictionConditionType(soap, tag, id, (const struct saml1__AudienceRestrictionConditionType *)ptr, "saml1:AudienceRestrictionConditionType");
	case SOAP_TYPE_saml1__ConditionAbstractType:
		return soap_out_saml1__ConditionAbstractType(soap, tag, id, (const struct saml1__ConditionAbstractType *)ptr, "saml1:ConditionAbstractType");
	case SOAP_TYPE_saml1__ConditionsType:
		return soap_out_saml1__ConditionsType(soap, tag, id, (const struct saml1__ConditionsType *)ptr, "saml1:ConditionsType");
	case SOAP_TYPE_saml1__AssertionType:
		return soap_out_saml1__AssertionType(soap, tag, id, (const struct saml1__AssertionType *)ptr, "saml1:AssertionType");
	case SOAP_TYPE_wsc__PropertiesType:
		return soap_out_wsc__PropertiesType(soap, tag, id, (const struct wsc__PropertiesType *)ptr, "wsc:PropertiesType");
	case SOAP_TYPE_wsc__DerivedKeyTokenType:
		return soap_out_wsc__DerivedKeyTokenType(soap, tag, id, (const struct wsc__DerivedKeyTokenType *)ptr, "wsc:DerivedKeyTokenType");
	case SOAP_TYPE_wsc__SecurityContextTokenType:
		return soap_out_wsc__SecurityContextTokenType(soap, tag, id, (const struct wsc__SecurityContextTokenType *)ptr, "wsc:SecurityContextTokenType");
	case SOAP_TYPE__xenc__EncryptionProperty:
		return soap_out__xenc__EncryptionProperty(soap, "xenc:EncryptionProperty", id, (const struct xenc__EncryptionPropertyType *)ptr, "");
	case SOAP_TYPE__xenc__EncryptionProperties:
		return soap_out__xenc__EncryptionProperties(soap, "xenc:EncryptionProperties", id, (const struct xenc__EncryptionPropertiesType *)ptr, "");
	case SOAP_TYPE__xenc__AgreementMethod:
		return soap_out__xenc__AgreementMethod(soap, "xenc:AgreementMethod", id, (const struct xenc__AgreementMethodType *)ptr, "");
	case SOAP_TYPE__xenc__CipherReference:
		return soap_out__xenc__CipherReference(soap, "xenc:CipherReference", id, (const struct xenc__CipherReferenceType *)ptr, "");
	case SOAP_TYPE__xenc__CipherData:
		return soap_out__xenc__CipherData(soap, "xenc:CipherData", id, (const struct xenc__CipherDataType *)ptr, "");
	case SOAP_TYPE__xenc__ReferenceList:
		return soap_out__xenc__ReferenceList(soap, "xenc:ReferenceList", id, (const struct _xenc__ReferenceList *)ptr, "");
	case SOAP_TYPE_xenc__EncryptionPropertyType:
		return soap_out_xenc__EncryptionPropertyType(soap, tag, id, (const struct xenc__EncryptionPropertyType *)ptr, "xenc:EncryptionPropertyType");
	case SOAP_TYPE_xenc__EncryptionPropertiesType:
		return soap_out_xenc__EncryptionPropertiesType(soap, tag, id, (const struct xenc__EncryptionPropertiesType *)ptr, "xenc:EncryptionPropertiesType");
	case SOAP_TYPE_xenc__ReferenceType:
		return soap_out_xenc__ReferenceType(soap, tag, id, (const struct xenc__ReferenceType *)ptr, "xenc:ReferenceType");
	case SOAP_TYPE_xenc__AgreementMethodType:
		return soap_out_xenc__AgreementMethodType(soap, tag, id, (const struct xenc__AgreementMethodType *)ptr, "xenc:AgreementMethodType");
	case SOAP_TYPE_xenc__EncryptedKeyType:
		return soap_out_xenc__EncryptedKeyType(soap, tag, id, (const struct xenc__EncryptedKeyType *)ptr, "xenc:EncryptedKeyType");
	case SOAP_TYPE_xenc__EncryptedDataType:
		return soap_out_xenc__EncryptedDataType(soap, tag, id, (const struct xenc__EncryptedDataType *)ptr, "xenc:EncryptedDataType");
	case SOAP_TYPE_xenc__TransformsType:
		return soap_out_xenc__TransformsType(soap, tag, id, (const struct xenc__TransformsType *)ptr, "xenc:TransformsType");
	case SOAP_TYPE_xenc__CipherReferenceType:
		return soap_out_xenc__CipherReferenceType(soap, tag, id, (const struct xenc__CipherReferenceType *)ptr, "xenc:CipherReferenceType");
	case SOAP_TYPE_xenc__CipherDataType:
		return soap_out_xenc__CipherDataType(soap, tag, id, (const struct xenc__CipherDataType *)ptr, "xenc:CipherDataType");
	case SOAP_TYPE_xenc__EncryptionMethodType:
		return soap_out_xenc__EncryptionMethodType(soap, tag, id, (const struct xenc__EncryptionMethodType *)ptr, "xenc:EncryptionMethodType");
	case SOAP_TYPE_xenc__EncryptedType:
		return soap_out_xenc__EncryptedType(soap, tag, id, (const struct xenc__EncryptedType *)ptr, "xenc:EncryptedType");
	case SOAP_TYPE__ds__RSAKeyValue:
		return soap_out__ds__RSAKeyValue(soap, "ds:RSAKeyValue", id, (const struct ds__RSAKeyValueType *)ptr, "");
	case SOAP_TYPE__ds__DSAKeyValue:
		return soap_out__ds__DSAKeyValue(soap, "ds:DSAKeyValue", id, (const struct ds__DSAKeyValueType *)ptr, "");
	case SOAP_TYPE__ds__X509Data:
		return soap_out__ds__X509Data(soap, "ds:X509Data", id, (const struct ds__X509DataType *)ptr, "");
	case SOAP_TYPE__ds__RetrievalMethod:
		return soap_out__ds__RetrievalMethod(soap, "ds:RetrievalMethod", id, (const struct ds__RetrievalMethodType *)ptr, "");
	case SOAP_TYPE__ds__KeyValue:
		return soap_out__ds__KeyValue(soap, "ds:KeyValue", id, (const struct ds__KeyValueType *)ptr, "");
	case SOAP_TYPE__ds__DigestMethod:
		return soap_out__ds__DigestMethod(soap, "ds:DigestMethod", id, (const struct ds__DigestMethodType *)ptr, "");
	case SOAP_TYPE__ds__Transforms:
		return soap_out__ds__Transforms(soap, "ds:Transforms", id, (const struct ds__TransformsType *)ptr, "");
	case SOAP_TYPE__ds__Reference:
		return soap_out__ds__Reference(soap, "ds:Reference", id, (const struct ds__ReferenceType *)ptr, "");
	case SOAP_TYPE__ds__SignatureMethod:
		return soap_out__ds__SignatureMethod(soap, "ds:SignatureMethod", id, (const struct ds__SignatureMethodType *)ptr, "");
	case SOAP_TYPE__ds__CanonicalizationMethod:
		return soap_out__ds__CanonicalizationMethod(soap, "ds:CanonicalizationMethod", id, (const struct ds__CanonicalizationMethodType *)ptr, "");
	case SOAP_TYPE__ds__SignedInfo:
		return soap_out__ds__SignedInfo(soap, "ds:SignedInfo", id, (const struct ds__SignedInfoType *)ptr, "");
	case SOAP_TYPE_ds__RSAKeyValueType:
		return soap_out_ds__RSAKeyValueType(soap, tag, id, (const struct ds__RSAKeyValueType *)ptr, "ds:RSAKeyValueType");
	case SOAP_TYPE_ds__DSAKeyValueType:
		return soap_out_ds__DSAKeyValueType(soap, tag, id, (const struct ds__DSAKeyValueType *)ptr, "ds:DSAKeyValueType");
	case SOAP_TYPE_ds__X509IssuerSerialType:
		return soap_out_ds__X509IssuerSerialType(soap, tag, id, (const struct ds__X509IssuerSerialType *)ptr, "ds:X509IssuerSerialType");
	case SOAP_TYPE__ds__KeyInfo:
		return soap_out__ds__KeyInfo(soap, "ds:KeyInfo", id, (const struct ds__KeyInfoType *)ptr, "");
	case SOAP_TYPE_ds__RetrievalMethodType:
		return soap_out_ds__RetrievalMethodType(soap, tag, id, (const struct ds__RetrievalMethodType *)ptr, "ds:RetrievalMethodType");
	case SOAP_TYPE_ds__KeyValueType:
		return soap_out_ds__KeyValueType(soap, tag, id, (const struct ds__KeyValueType *)ptr, "ds:KeyValueType");
	case SOAP_TYPE_ds__DigestMethodType:
		return soap_out_ds__DigestMethodType(soap, tag, id, (const struct ds__DigestMethodType *)ptr, "ds:DigestMethodType");
	case SOAP_TYPE__ds__Transform:
		return soap_out__ds__Transform(soap, "ds:Transform", id, (const struct ds__TransformType *)ptr, "");
	case SOAP_TYPE_ds__TransformType:
		return soap_out_ds__TransformType(soap, tag, id, (const struct ds__TransformType *)ptr, "ds:TransformType");
	case SOAP_TYPE__c14n__InclusiveNamespaces:
		return soap_out__c14n__InclusiveNamespaces(soap, "c14n:InclusiveNamespaces", id, (const struct _c14n__InclusiveNamespaces *)ptr, "");
	case SOAP_TYPE_ds__TransformsType:
		return soap_out_ds__TransformsType(soap, tag, id, (const struct ds__TransformsType *)ptr, "ds:TransformsType");
	case SOAP_TYPE_ds__ReferenceType:
		return soap_out_ds__ReferenceType(soap, tag, id, (const struct ds__ReferenceType *)ptr, "ds:ReferenceType");
	case SOAP_TYPE_ds__SignatureMethodType:
		return soap_out_ds__SignatureMethodType(soap, tag, id, (const struct ds__SignatureMethodType *)ptr, "ds:SignatureMethodType");
	case SOAP_TYPE_ds__CanonicalizationMethodType:
		return soap_out_ds__CanonicalizationMethodType(soap, tag, id, (const struct ds__CanonicalizationMethodType *)ptr, "ds:CanonicalizationMethodType");
	case SOAP_TYPE__ds__Signature:
		return soap_out__ds__Signature(soap, "ds:Signature", id, (const struct ds__SignatureType *)ptr, "");
	case SOAP_TYPE_ds__KeyInfoType:
		return soap_out_ds__KeyInfoType(soap, tag, id, (const struct ds__KeyInfoType *)ptr, "ds:KeyInfoType");
	case SOAP_TYPE_ds__SignedInfoType:
		return soap_out_ds__SignedInfoType(soap, tag, id, (const struct ds__SignedInfoType *)ptr, "ds:SignedInfoType");
	case SOAP_TYPE_ds__SignatureType:
		return soap_out_ds__SignatureType(soap, tag, id, (const struct ds__SignatureType *)ptr, "ds:SignatureType");
	case SOAP_TYPE_ds__X509DataType:
		return soap_out_ds__X509DataType(soap, tag, id, (const struct ds__X509DataType *)ptr, "ds:X509DataType");
	case SOAP_TYPE__wsse__SecurityTokenReference:
		return soap_out__wsse__SecurityTokenReference(soap, "wsse:SecurityTokenReference", id, (const struct _wsse__SecurityTokenReference *)ptr, "");
	case SOAP_TYPE__wsse__KeyIdentifier:
		return soap_out__wsse__KeyIdentifier(soap, "wsse:KeyIdentifier", id, (const struct _wsse__KeyIdentifier *)ptr, "");
	case SOAP_TYPE__wsse__Embedded:
		return soap_out__wsse__Embedded(soap, "wsse:Embedded", id, (const struct _wsse__Embedded *)ptr, "");
	case SOAP_TYPE__wsse__Reference:
		return soap_out__wsse__Reference(soap, "wsse:Reference", id, (const struct _wsse__Reference *)ptr, "");
	case SOAP_TYPE__wsse__BinarySecurityToken:
		return soap_out__wsse__BinarySecurityToken(soap, "wsse:BinarySecurityToken", id, (const struct _wsse__BinarySecurityToken *)ptr, "");
	case SOAP_TYPE__wsse__Password:
		return soap_out__wsse__Password(soap, "wsse:Password", id, (const struct _wsse__Password *)ptr, "");
	case SOAP_TYPE__wsse__UsernameToken:
		return soap_out__wsse__UsernameToken(soap, "wsse:UsernameToken", id, (const struct _wsse__UsernameToken *)ptr, "");
	case SOAP_TYPE_wsse__EncodedString:
		return soap_out_wsse__EncodedString(soap, tag, id, (const struct wsse__EncodedString *)ptr, "wsse:EncodedString");
	case SOAP_TYPE__wsu__Timestamp:
		return soap_out__wsu__Timestamp(soap, "wsu:Timestamp", id, (const struct _wsu__Timestamp *)ptr, "");
	case SOAP_TYPE_PointerTons1__sendSummary:
		return soap_out_PointerTons1__sendSummary(soap, tag, id, (ns1__sendSummary *const*)ptr, "ns1:sendSummary");
	case SOAP_TYPE_PointerTons1__sendPack:
		return soap_out_PointerTons1__sendPack(soap, tag, id, (ns1__sendPack *const*)ptr, "ns1:sendPack");
	case SOAP_TYPE_PointerTons1__sendBill:
		return soap_out_PointerTons1__sendBill(soap, tag, id, (ns1__sendBill *const*)ptr, "ns1:sendBill");
	case SOAP_TYPE_PointerTons1__getStatus:
		return soap_out_PointerTons1__getStatus(soap, tag, id, (ns1__getStatus *const*)ptr, "ns1:getStatus");
	case SOAP_TYPE_PointerTons1__statusResponse:
		return soap_out_PointerTons1__statusResponse(soap, tag, id, (ns1__statusResponse *const*)ptr, "ns1:statusResponse");
	case SOAP_TYPE_PointerToxsd__base64Binary:
		return soap_out_PointerToxsd__base64Binary(soap, tag, id, (xsd__base64Binary *const*)ptr, "xsd:base64Binary");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_PointerTods__SignatureType:
		return soap_out_PointerTods__SignatureType(soap, tag, id, (struct ds__SignatureType *const*)ptr, "ds:SignatureType");
	case SOAP_TYPE_PointerTo_wsse__BinarySecurityToken:
		return soap_out_PointerTo_wsse__BinarySecurityToken(soap, tag, id, (struct _wsse__BinarySecurityToken *const*)ptr, "wsse:BinarySecurityToken");
	case SOAP_TYPE_PointerTo_wsse__UsernameToken:
		return soap_out_PointerTo_wsse__UsernameToken(soap, tag, id, (struct _wsse__UsernameToken *const*)ptr, "wsse:UsernameToken");
	case SOAP_TYPE_PointerTo_wsu__Timestamp:
		return soap_out_PointerTo_wsu__Timestamp(soap, tag, id, (struct _wsu__Timestamp *const*)ptr, "wsu:Timestamp");
	case SOAP_TYPE__saml2__AuthenticatingAuthority:
		return soap_out_string(soap, "saml2:AuthenticatingAuthority", id, (char*const*)(void*)&ptr, "");
	case SOAP_TYPE__saml2__AuthnContextDeclRef:
		return soap_out_string(soap, "saml2:AuthnContextDeclRef", id, (char*const*)(void*)&ptr, "");
	case SOAP_TYPE__saml2__AuthnContextClassRef:
		return soap_out_string(soap, "saml2:AuthnContextClassRef", id, (char*const*)(void*)&ptr, "");
	case SOAP_TYPE__saml2__Audience:
		return soap_out_string(soap, "saml2:Audience", id, (char*const*)(void*)&ptr, "");
	case SOAP_TYPE__saml2__AssertionURIRef:
		return soap_out_string(soap, "saml2:AssertionURIRef", id, (char*const*)(void*)&ptr, "");
	case SOAP_TYPE__saml2__AssertionIDRef:
		return soap_out_string(soap, "saml2:AssertionIDRef", id, (char*const*)(void*)&ptr, "");
	case SOAP_TYPE_PointerToPointerTo_ds__KeyInfo:
		return soap_out_PointerToPointerTo_ds__KeyInfo(soap, tag, id, (struct ds__KeyInfoType **const*)ptr, "ds:KeyInfo");
	case SOAP_TYPE_PointerTosaml2__AttributeType:
		return soap_out_PointerTosaml2__AttributeType(soap, tag, id, (struct saml2__AttributeType *const*)ptr, "saml2:AttributeType");
	case SOAP_TYPE_PointerTosaml2__EvidenceType:
		return soap_out_PointerTosaml2__EvidenceType(soap, tag, id, (struct saml2__EvidenceType *const*)ptr, "saml2:EvidenceType");
	case SOAP_TYPE_PointerTosaml2__ActionType:
		return soap_out_PointerTosaml2__ActionType(soap, tag, id, (struct saml2__ActionType *const*)ptr, "saml2:ActionType");
	case SOAP_TYPE_PointerTosaml2__AuthnContextType:
		return soap_out_PointerTosaml2__AuthnContextType(soap, tag, id, (struct saml2__AuthnContextType *const*)ptr, "saml2:AuthnContextType");
	case SOAP_TYPE_PointerTosaml2__SubjectLocalityType:
		return soap_out_PointerTosaml2__SubjectLocalityType(soap, tag, id, (struct saml2__SubjectLocalityType *const*)ptr, "saml2:SubjectLocalityType");
	case SOAP_TYPE_PointerTosaml2__AssertionType:
		return soap_out_PointerTosaml2__AssertionType(soap, tag, id, (struct saml2__AssertionType *const*)ptr, "saml2:AssertionType");
	case SOAP_TYPE_PointerTosaml2__ProxyRestrictionType:
		return soap_out_PointerTosaml2__ProxyRestrictionType(soap, tag, id, (struct saml2__ProxyRestrictionType *const*)ptr, "saml2:ProxyRestrictionType");
	case SOAP_TYPE_PointerTosaml2__OneTimeUseType:
		return soap_out_PointerTosaml2__OneTimeUseType(soap, tag, id, (struct saml2__OneTimeUseType *const*)ptr, "saml2:OneTimeUseType");
	case SOAP_TYPE_PointerTosaml2__AudienceRestrictionType:
		return soap_out_PointerTosaml2__AudienceRestrictionType(soap, tag, id, (struct saml2__AudienceRestrictionType *const*)ptr, "saml2:AudienceRestrictionType");
	case SOAP_TYPE_PointerTosaml2__ConditionAbstractType:
		return soap_out_PointerTosaml2__ConditionAbstractType(soap, tag, id, (struct saml2__ConditionAbstractType *const*)ptr, "saml2:ConditionAbstractType");
	case SOAP_TYPE_PointerTosaml2__SubjectConfirmationDataType:
		return soap_out_PointerTosaml2__SubjectConfirmationDataType(soap, tag, id, (struct saml2__SubjectConfirmationDataType *const*)ptr, "saml2:SubjectConfirmationDataType");
	case SOAP_TYPE_PointerTosaml2__SubjectConfirmationType:
		return soap_out_PointerTosaml2__SubjectConfirmationType(soap, tag, id, (struct saml2__SubjectConfirmationType *const*)ptr, "saml2:SubjectConfirmationType");
	case SOAP_TYPE_PointerTosaml2__EncryptedElementType:
		return soap_out_PointerTosaml2__EncryptedElementType(soap, tag, id, (struct saml2__EncryptedElementType *const*)ptr, "saml2:EncryptedElementType");
	case SOAP_TYPE_PointerTosaml2__BaseIDAbstractType:
		return soap_out_PointerTosaml2__BaseIDAbstractType(soap, tag, id, (struct saml2__BaseIDAbstractType *const*)ptr, "saml2:BaseIDAbstractType");
	case SOAP_TYPE_PointerTosaml2__AttributeStatementType:
		return soap_out_PointerTosaml2__AttributeStatementType(soap, tag, id, (struct saml2__AttributeStatementType *const*)ptr, "saml2:AttributeStatementType");
	case SOAP_TYPE_PointerTosaml2__AuthzDecisionStatementType:
		return soap_out_PointerTosaml2__AuthzDecisionStatementType(soap, tag, id, (struct saml2__AuthzDecisionStatementType *const*)ptr, "saml2:AuthzDecisionStatementType");
	case SOAP_TYPE_PointerTosaml2__AuthnStatementType:
		return soap_out_PointerTosaml2__AuthnStatementType(soap, tag, id, (struct saml2__AuthnStatementType *const*)ptr, "saml2:AuthnStatementType");
	case SOAP_TYPE_PointerTosaml2__StatementAbstractType:
		return soap_out_PointerTosaml2__StatementAbstractType(soap, tag, id, (struct saml2__StatementAbstractType *const*)ptr, "saml2:StatementAbstractType");
	case SOAP_TYPE_PointerTosaml2__AdviceType:
		return soap_out_PointerTosaml2__AdviceType(soap, tag, id, (struct saml2__AdviceType *const*)ptr, "saml2:AdviceType");
	case SOAP_TYPE_PointerTosaml2__ConditionsType:
		return soap_out_PointerTosaml2__ConditionsType(soap, tag, id, (struct saml2__ConditionsType *const*)ptr, "saml2:ConditionsType");
	case SOAP_TYPE_PointerTosaml2__SubjectType:
		return soap_out_PointerTosaml2__SubjectType(soap, tag, id, (struct saml2__SubjectType *const*)ptr, "saml2:SubjectType");
	case SOAP_TYPE_PointerTosaml2__NameIDType:
		return soap_out_PointerTosaml2__NameIDType(soap, tag, id, (struct saml2__NameIDType *const*)ptr, "saml2:NameIDType");
	case SOAP_TYPE_PointerToPointerToxenc__EncryptedKeyType:
		return soap_out_PointerToPointerToxenc__EncryptedKeyType(soap, tag, id, (struct xenc__EncryptedKeyType **const*)ptr, "xenc:EncryptedKeyType");
	case SOAP_TYPE_PointerToxenc__EncryptedKeyType:
		return soap_out_PointerToxenc__EncryptedKeyType(soap, tag, id, (struct xenc__EncryptedKeyType *const*)ptr, "xenc:EncryptedKeyType");
	case SOAP_TYPE__saml1__ConfirmationMethod:
		return soap_out_string(soap, "saml1:ConfirmationMethod", id, (char*const*)(void*)&ptr, "");
	case SOAP_TYPE__saml1__Audience:
		return soap_out_string(soap, "saml1:Audience", id, (char*const*)(void*)&ptr, "");
	case SOAP_TYPE__saml1__AssertionIDReference:
		return soap_out_string(soap, "saml1:AssertionIDReference", id, (char*const*)(void*)&ptr, "");
	case SOAP_TYPE_PointerTosaml1__AttributeType:
		return soap_out_PointerTosaml1__AttributeType(soap, tag, id, (struct saml1__AttributeType *const*)ptr, "saml1:AttributeType");
	case SOAP_TYPE_PointerTosaml1__EvidenceType:
		return soap_out_PointerTosaml1__EvidenceType(soap, tag, id, (struct saml1__EvidenceType *const*)ptr, "saml1:EvidenceType");
	case SOAP_TYPE_PointerTosaml1__ActionType:
		return soap_out_PointerTosaml1__ActionType(soap, tag, id, (struct saml1__ActionType *const*)ptr, "saml1:ActionType");
	case SOAP_TYPE_PointerTosaml1__AuthorityBindingType:
		return soap_out_PointerTosaml1__AuthorityBindingType(soap, tag, id, (struct saml1__AuthorityBindingType *const*)ptr, "saml1:AuthorityBindingType");
	case SOAP_TYPE_PointerTosaml1__SubjectLocalityType:
		return soap_out_PointerTosaml1__SubjectLocalityType(soap, tag, id, (struct saml1__SubjectLocalityType *const*)ptr, "saml1:SubjectLocalityType");
	case SOAP_TYPE_PointerTosaml1__SubjectType:
		return soap_out_PointerTosaml1__SubjectType(soap, tag, id, (struct saml1__SubjectType *const*)ptr, "saml1:SubjectType");
	case SOAP_TYPE_PointerTostring:
		return soap_out_PointerTostring(soap, tag, id, (char **const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerTosaml1__SubjectConfirmationType:
		return soap_out_PointerTosaml1__SubjectConfirmationType(soap, tag, id, (struct saml1__SubjectConfirmationType *const*)ptr, "saml1:SubjectConfirmationType");
	case SOAP_TYPE_PointerTosaml1__NameIdentifierType:
		return soap_out_PointerTosaml1__NameIdentifierType(soap, tag, id, (struct saml1__NameIdentifierType *const*)ptr, "saml1:NameIdentifierType");
	case SOAP_TYPE_PointerTosaml1__AssertionType:
		return soap_out_PointerTosaml1__AssertionType(soap, tag, id, (struct saml1__AssertionType *const*)ptr, "saml1:AssertionType");
	case SOAP_TYPE_PointerTodateTime:
		return soap_out_PointerTodateTime(soap, tag, id, (time_t *const*)ptr, "xsd:dateTime");
	case SOAP_TYPE_PointerTosaml1__ConditionAbstractType:
		return soap_out_PointerTosaml1__ConditionAbstractType(soap, tag, id, (struct saml1__ConditionAbstractType *const*)ptr, "saml1:ConditionAbstractType");
	case SOAP_TYPE_PointerTosaml1__DoNotCacheConditionType:
		return soap_out_PointerTosaml1__DoNotCacheConditionType(soap, tag, id, (struct saml1__DoNotCacheConditionType *const*)ptr, "saml1:DoNotCacheConditionType");
	case SOAP_TYPE_PointerTosaml1__AudienceRestrictionConditionType:
		return soap_out_PointerTosaml1__AudienceRestrictionConditionType(soap, tag, id, (struct saml1__AudienceRestrictionConditionType *const*)ptr, "saml1:AudienceRestrictionConditionType");
	case SOAP_TYPE_PointerTo_ds__Signature:
		return soap_out_PointerTo_ds__Signature(soap, tag, id, (struct ds__SignatureType *const*)ptr, "ds:Signature");
	case SOAP_TYPE_PointerTosaml1__AttributeStatementType:
		return soap_out_PointerTosaml1__AttributeStatementType(soap, tag, id, (struct saml1__AttributeStatementType *const*)ptr, "saml1:AttributeStatementType");
	case SOAP_TYPE_PointerTosaml1__AuthorizationDecisionStatementType:
		return soap_out_PointerTosaml1__AuthorizationDecisionStatementType(soap, tag, id, (struct saml1__AuthorizationDecisionStatementType *const*)ptr, "saml1:AuthorizationDecisionStatementType");
	case SOAP_TYPE_PointerTosaml1__AuthenticationStatementType:
		return soap_out_PointerTosaml1__AuthenticationStatementType(soap, tag, id, (struct saml1__AuthenticationStatementType *const*)ptr, "saml1:AuthenticationStatementType");
	case SOAP_TYPE_PointerTosaml1__SubjectStatementAbstractType:
		return soap_out_PointerTosaml1__SubjectStatementAbstractType(soap, tag, id, (struct saml1__SubjectStatementAbstractType *const*)ptr, "saml1:SubjectStatementAbstractType");
	case SOAP_TYPE_PointerTosaml1__StatementAbstractType:
		return soap_out_PointerTosaml1__StatementAbstractType(soap, tag, id, (struct saml1__StatementAbstractType *const*)ptr, "saml1:StatementAbstractType");
	case SOAP_TYPE_PointerTosaml1__AdviceType:
		return soap_out_PointerTosaml1__AdviceType(soap, tag, id, (struct saml1__AdviceType *const*)ptr, "saml1:AdviceType");
	case SOAP_TYPE_PointerTosaml1__ConditionsType:
		return soap_out_PointerTosaml1__ConditionsType(soap, tag, id, (struct saml1__ConditionsType *const*)ptr, "saml1:ConditionsType");
	case SOAP_TYPE_PointerToULONG64:
		return soap_out_PointerToULONG64(soap, tag, id, (ULONG64 *const*)ptr, "xsd:unsignedLong");
	case SOAP_TYPE_PointerTowsc__PropertiesType:
		return soap_out_PointerTowsc__PropertiesType(soap, tag, id, (struct wsc__PropertiesType *const*)ptr, "wsc:PropertiesType");
	case SOAP_TYPE_wsc__FaultCodeOpenEnumType:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "wsc:FaultCodeOpenEnumType");
	case SOAP_TYPE_PointerTo_xenc__ReferenceList:
		return soap_out_PointerTo_xenc__ReferenceList(soap, tag, id, (struct _xenc__ReferenceList *const*)ptr, "xenc:ReferenceList");
	case SOAP_TYPE_PointerToxenc__ReferenceType:
		return soap_out_PointerToxenc__ReferenceType(soap, tag, id, (struct xenc__ReferenceType *const*)ptr, "xenc:ReferenceType");
	case SOAP_TYPE_PointerToxenc__EncryptionPropertyType:
		return soap_out_PointerToxenc__EncryptionPropertyType(soap, tag, id, (struct xenc__EncryptionPropertyType *const*)ptr, "xenc:EncryptionPropertyType");
	case SOAP_TYPE_PointerToPointerTo_ds__Transform:
		return soap_out_PointerToPointerTo_ds__Transform(soap, tag, id, (struct ds__TransformType **const*)ptr, "ds:Transform");
	case SOAP_TYPE_PointerTo_ds__Transform:
		return soap_out_PointerTo_ds__Transform(soap, tag, id, (struct ds__TransformType *const*)ptr, "ds:Transform");
	case SOAP_TYPE_PointerToxenc__TransformsType:
		return soap_out_PointerToxenc__TransformsType(soap, tag, id, (struct xenc__TransformsType *const*)ptr, "xenc:TransformsType");
	case SOAP_TYPE_PointerToxenc__CipherReferenceType:
		return soap_out_PointerToxenc__CipherReferenceType(soap, tag, id, (struct xenc__CipherReferenceType *const*)ptr, "xenc:CipherReferenceType");
	case SOAP_TYPE_PointerToxenc__EncryptionPropertiesType:
		return soap_out_PointerToxenc__EncryptionPropertiesType(soap, tag, id, (struct xenc__EncryptionPropertiesType *const*)ptr, "xenc:EncryptionPropertiesType");
	case SOAP_TYPE_PointerToxenc__CipherDataType:
		return soap_out_PointerToxenc__CipherDataType(soap, tag, id, (struct xenc__CipherDataType *const*)ptr, "xenc:CipherDataType");
	case SOAP_TYPE_PointerTo_ds__KeyInfo:
		return soap_out_PointerTo_ds__KeyInfo(soap, tag, id, (struct ds__KeyInfoType *const*)ptr, "ds:KeyInfo");
	case SOAP_TYPE_PointerToxenc__EncryptionMethodType:
		return soap_out_PointerToxenc__EncryptionMethodType(soap, tag, id, (struct xenc__EncryptionMethodType *const*)ptr, "xenc:EncryptionMethodType");
	case SOAP_TYPE__ds__MgmtData:
		return soap_out_string(soap, "ds:MgmtData", id, (char*const*)(void*)&ptr, "");
	case SOAP_TYPE__ds__KeyName:
		return soap_out_string(soap, "ds:KeyName", id, (char*const*)(void*)&ptr, "");
	case SOAP_TYPE__ds__DigestValue:
		return soap_out_string(soap, "ds:DigestValue", id, (char*const*)(void*)&ptr, "");
	case SOAP_TYPE_PointerTods__X509IssuerSerialType:
		return soap_out_PointerTods__X509IssuerSerialType(soap, tag, id, (struct ds__X509IssuerSerialType *const*)ptr, "ds:X509IssuerSerialType");
	case SOAP_TYPE_PointerTods__RSAKeyValueType:
		return soap_out_PointerTods__RSAKeyValueType(soap, tag, id, (struct ds__RSAKeyValueType *const*)ptr, "ds:RSAKeyValueType");
	case SOAP_TYPE_PointerTods__DSAKeyValueType:
		return soap_out_PointerTods__DSAKeyValueType(soap, tag, id, (struct ds__DSAKeyValueType *const*)ptr, "ds:DSAKeyValueType");
	case SOAP_TYPE_PointerTods__TransformType:
		return soap_out_PointerTods__TransformType(soap, tag, id, (struct ds__TransformType *const*)ptr, "ds:TransformType");
	case SOAP_TYPE_PointerTods__DigestMethodType:
		return soap_out_PointerTods__DigestMethodType(soap, tag, id, (struct ds__DigestMethodType *const*)ptr, "ds:DigestMethodType");
	case SOAP_TYPE_PointerTods__TransformsType:
		return soap_out_PointerTods__TransformsType(soap, tag, id, (struct ds__TransformsType *const*)ptr, "ds:TransformsType");
	case SOAP_TYPE_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE_PointerTods__ReferenceType:
		return soap_out_PointerTods__ReferenceType(soap, tag, id, (struct ds__ReferenceType *const*)ptr, "ds:ReferenceType");
	case SOAP_TYPE_PointerTods__SignatureMethodType:
		return soap_out_PointerTods__SignatureMethodType(soap, tag, id, (struct ds__SignatureMethodType *const*)ptr, "ds:SignatureMethodType");
	case SOAP_TYPE_PointerTods__CanonicalizationMethodType:
		return soap_out_PointerTods__CanonicalizationMethodType(soap, tag, id, (struct ds__CanonicalizationMethodType *const*)ptr, "ds:CanonicalizationMethodType");
	case SOAP_TYPE_PointerTo_wsse__SecurityTokenReference:
		return soap_out_PointerTo_wsse__SecurityTokenReference(soap, tag, id, (struct _wsse__SecurityTokenReference *const*)ptr, "wsse:SecurityTokenReference");
	case SOAP_TYPE_PointerTods__RetrievalMethodType:
		return soap_out_PointerTods__RetrievalMethodType(soap, tag, id, (struct ds__RetrievalMethodType *const*)ptr, "ds:RetrievalMethodType");
	case SOAP_TYPE_PointerTods__KeyValueType:
		return soap_out_PointerTods__KeyValueType(soap, tag, id, (struct ds__KeyValueType *const*)ptr, "ds:KeyValueType");
	case SOAP_TYPE_PointerTo_c14n__InclusiveNamespaces:
		return soap_out_PointerTo_c14n__InclusiveNamespaces(soap, tag, id, (struct _c14n__InclusiveNamespaces *const*)ptr, "c14n:InclusiveNamespaces");
	case SOAP_TYPE_PointerTods__KeyInfoType:
		return soap_out_PointerTods__KeyInfoType(soap, tag, id, (struct ds__KeyInfoType *const*)ptr, "ds:KeyInfoType");
	case SOAP_TYPE_PointerTods__SignedInfoType:
		return soap_out_PointerTods__SignedInfoType(soap, tag, id, (struct ds__SignedInfoType *const*)ptr, "ds:SignedInfoType");
	case SOAP_TYPE__ds__SignatureValue:
		return soap_out_string(soap, "ds:SignatureValue", id, (char*const*)(void*)&ptr, "");
	case SOAP_TYPE_PointerTods__X509DataType:
		return soap_out_PointerTods__X509DataType(soap, tag, id, (struct ds__X509DataType *const*)ptr, "ds:X509DataType");
	case SOAP_TYPE_PointerTo_wsse__Embedded:
		return soap_out_PointerTo_wsse__Embedded(soap, tag, id, (struct _wsse__Embedded *const*)ptr, "wsse:Embedded");
	case SOAP_TYPE_PointerTo_wsse__KeyIdentifier:
		return soap_out_PointerTo_wsse__KeyIdentifier(soap, tag, id, (struct _wsse__KeyIdentifier *const*)ptr, "wsse:KeyIdentifier");
	case SOAP_TYPE_PointerTo_wsse__Reference:
		return soap_out_PointerTo_wsse__Reference(soap, tag, id, (struct _wsse__Reference *const*)ptr, "wsse:Reference");
	case SOAP_TYPE_PointerTowsse__EncodedString:
		return soap_out_PointerTowsse__EncodedString(soap, tag, id, (struct wsse__EncodedString *const*)ptr, "wsse:EncodedString");
	case SOAP_TYPE_PointerTo_wsse__Password:
		return soap_out_PointerTo_wsse__Password(soap, tag, id, (struct _wsse__Password *const*)ptr, "wsse:Password");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	case 0:
		return SOAP_OK;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_putelement '%s' failed for type %d in C:\\gsoap-2.8\\gsoap\\bin\\win32\\soapC.cpp\n", tag ? tag : "", type));
	return soap_element_empty(soap, tag); /* unknown type to serialize */
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ns1__sendBillResponse:
		((ns1__sendBillResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__sendBill:
		((ns1__sendBill *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__sendPackResponse:
		((ns1__sendPackResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__sendPack:
		((ns1__sendPack *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__statusResponse:
		((ns1__statusResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__getStatusResponse:
		((ns1__getStatusResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__getStatus:
		((ns1__getStatus *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__sendSummaryResponse:
		((ns1__sendSummaryResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__sendSummary:
		((ns1__sendSummary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__base64Binary:
		((xsd__base64Binary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___sunat__sendSummary:
		soap_serialize___sunat__sendSummary(soap, (const struct __sunat__sendSummary *)ptr);
		break;
	case SOAP_TYPE___sunat__sendPack:
		soap_serialize___sunat__sendPack(soap, (const struct __sunat__sendPack *)ptr);
		break;
	case SOAP_TYPE___sunat__sendBill:
		soap_serialize___sunat__sendBill(soap, (const struct __sunat__sendBill *)ptr);
		break;
	case SOAP_TYPE___sunat__getStatus:
		soap_serialize___sunat__getStatus(soap, (const struct __sunat__getStatus *)ptr);
		break;
	case SOAP_TYPE__wsse__Security:
		soap_serialize__wsse__Security(soap, (const struct _wsse__Security *)ptr);
		break;
	case SOAP_TYPE__saml2__EncryptedAttribute:
		soap_serialize__saml2__EncryptedAttribute(soap, (const struct saml2__EncryptedElementType *)ptr);
		break;
	case SOAP_TYPE__saml2__Attribute:
		soap_serialize__saml2__Attribute(soap, (const struct saml2__AttributeType *)ptr);
		break;
	case SOAP_TYPE__saml2__AttributeStatement:
		soap_serialize__saml2__AttributeStatement(soap, (const struct saml2__AttributeStatementType *)ptr);
		break;
	case SOAP_TYPE__saml2__Evidence:
		soap_serialize__saml2__Evidence(soap, (const struct saml2__EvidenceType *)ptr);
		break;
	case SOAP_TYPE__saml2__Action:
		soap_serialize__saml2__Action(soap, (const struct saml2__ActionType *)ptr);
		break;
	case SOAP_TYPE__saml2__AuthzDecisionStatement:
		soap_serialize__saml2__AuthzDecisionStatement(soap, (const struct saml2__AuthzDecisionStatementType *)ptr);
		break;
	case SOAP_TYPE__saml2__AuthnContext:
		soap_serialize__saml2__AuthnContext(soap, (const struct saml2__AuthnContextType *)ptr);
		break;
	case SOAP_TYPE__saml2__SubjectLocality:
		soap_serialize__saml2__SubjectLocality(soap, (const struct saml2__SubjectLocalityType *)ptr);
		break;
	case SOAP_TYPE__saml2__AuthnStatement:
		soap_serialize__saml2__AuthnStatement(soap, (const struct saml2__AuthnStatementType *)ptr);
		break;
	case SOAP_TYPE__saml2__Statement:
		soap_serialize__saml2__Statement(soap, (const struct saml2__StatementAbstractType *)ptr);
		break;
	case SOAP_TYPE__saml2__EncryptedAssertion:
		soap_serialize__saml2__EncryptedAssertion(soap, (const struct saml2__EncryptedElementType *)ptr);
		break;
	case SOAP_TYPE__saml2__Advice:
		soap_serialize__saml2__Advice(soap, (const struct saml2__AdviceType *)ptr);
		break;
	case SOAP_TYPE__saml2__ProxyRestriction:
		soap_serialize__saml2__ProxyRestriction(soap, (const struct saml2__ProxyRestrictionType *)ptr);
		break;
	case SOAP_TYPE__saml2__OneTimeUse:
		soap_serialize__saml2__OneTimeUse(soap, (const struct saml2__OneTimeUseType *)ptr);
		break;
	case SOAP_TYPE__saml2__AudienceRestriction:
		soap_serialize__saml2__AudienceRestriction(soap, (const struct saml2__AudienceRestrictionType *)ptr);
		break;
	case SOAP_TYPE__saml2__Condition:
		soap_serialize__saml2__Condition(soap, (const struct saml2__ConditionAbstractType *)ptr);
		break;
	case SOAP_TYPE__saml2__Conditions:
		soap_serialize__saml2__Conditions(soap, (const struct saml2__ConditionsType *)ptr);
		break;
	case SOAP_TYPE__saml2__SubjectConfirmationData:
		soap_serialize__saml2__SubjectConfirmationData(soap, (const struct saml2__SubjectConfirmationDataType *)ptr);
		break;
	case SOAP_TYPE__saml2__SubjectConfirmation:
		soap_serialize__saml2__SubjectConfirmation(soap, (const struct saml2__SubjectConfirmationType *)ptr);
		break;
	case SOAP_TYPE__saml2__Subject:
		soap_serialize__saml2__Subject(soap, (const struct saml2__SubjectType *)ptr);
		break;
	case SOAP_TYPE__saml2__Assertion:
		soap_serialize__saml2__Assertion(soap, (const struct saml2__AssertionType *)ptr);
		break;
	case SOAP_TYPE__saml2__Issuer:
		soap_serialize__saml2__Issuer(soap, (const struct saml2__NameIDType *)ptr);
		break;
	case SOAP_TYPE__saml2__EncryptedID:
		soap_serialize__saml2__EncryptedID(soap, (const struct saml2__EncryptedElementType *)ptr);
		break;
	case SOAP_TYPE__saml2__NameID:
		soap_serialize__saml2__NameID(soap, (const struct saml2__NameIDType *)ptr);
		break;
	case SOAP_TYPE__saml2__BaseID:
		soap_serialize__saml2__BaseID(soap, (const struct saml2__BaseIDAbstractType *)ptr);
		break;
	case SOAP_TYPE___saml2__union_AttributeStatementType:
		soap_serialize___saml2__union_AttributeStatementType(soap, (const struct __saml2__union_AttributeStatementType *)ptr);
		break;
	case SOAP_TYPE___saml2__union_EvidenceType:
		soap_serialize___saml2__union_EvidenceType(soap, (const struct __saml2__union_EvidenceType *)ptr);
		break;
	case SOAP_TYPE___saml2__union_AdviceType:
		soap_serialize___saml2__union_AdviceType(soap, (const struct __saml2__union_AdviceType *)ptr);
		break;
	case SOAP_TYPE___saml2__union_ConditionsType:
		soap_serialize___saml2__union_ConditionsType(soap, (const struct __saml2__union_ConditionsType *)ptr);
		break;
	case SOAP_TYPE___saml2__union_AssertionType:
		soap_serialize___saml2__union_AssertionType(soap, (const struct __saml2__union_AssertionType *)ptr);
		break;
	case SOAP_TYPE_saml2__AttributeType:
		soap_serialize_saml2__AttributeType(soap, (const struct saml2__AttributeType *)ptr);
		break;
	case SOAP_TYPE_saml2__AttributeStatementType:
		soap_serialize_saml2__AttributeStatementType(soap, (const struct saml2__AttributeStatementType *)ptr);
		break;
	case SOAP_TYPE_saml2__EvidenceType:
		soap_serialize_saml2__EvidenceType(soap, (const struct saml2__EvidenceType *)ptr);
		break;
	case SOAP_TYPE_saml2__ActionType:
		soap_serialize_saml2__ActionType(soap, (const struct saml2__ActionType *)ptr);
		break;
	case SOAP_TYPE_saml2__AuthzDecisionStatementType:
		soap_serialize_saml2__AuthzDecisionStatementType(soap, (const struct saml2__AuthzDecisionStatementType *)ptr);
		break;
	case SOAP_TYPE_saml2__AuthnContextType:
		soap_serialize_saml2__AuthnContextType(soap, (const struct saml2__AuthnContextType *)ptr);
		break;
	case SOAP_TYPE_saml2__SubjectLocalityType:
		soap_serialize_saml2__SubjectLocalityType(soap, (const struct saml2__SubjectLocalityType *)ptr);
		break;
	case SOAP_TYPE_saml2__AuthnStatementType:
		soap_serialize_saml2__AuthnStatementType(soap, (const struct saml2__AuthnStatementType *)ptr);
		break;
	case SOAP_TYPE_saml2__StatementAbstractType:
		soap_serialize_saml2__StatementAbstractType(soap, (const struct saml2__StatementAbstractType *)ptr);
		break;
	case SOAP_TYPE_saml2__AdviceType:
		soap_serialize_saml2__AdviceType(soap, (const struct saml2__AdviceType *)ptr);
		break;
	case SOAP_TYPE_saml2__ProxyRestrictionType:
		soap_serialize_saml2__ProxyRestrictionType(soap, (const struct saml2__ProxyRestrictionType *)ptr);
		break;
	case SOAP_TYPE_saml2__OneTimeUseType:
		soap_serialize_saml2__OneTimeUseType(soap, (const struct saml2__OneTimeUseType *)ptr);
		break;
	case SOAP_TYPE_saml2__AudienceRestrictionType:
		soap_serialize_saml2__AudienceRestrictionType(soap, (const struct saml2__AudienceRestrictionType *)ptr);
		break;
	case SOAP_TYPE_saml2__ConditionAbstractType:
		soap_serialize_saml2__ConditionAbstractType(soap, (const struct saml2__ConditionAbstractType *)ptr);
		break;
	case SOAP_TYPE_saml2__ConditionsType:
		soap_serialize_saml2__ConditionsType(soap, (const struct saml2__ConditionsType *)ptr);
		break;
	case SOAP_TYPE_saml2__KeyInfoConfirmationDataType:
		soap_serialize_saml2__KeyInfoConfirmationDataType(soap, (const struct saml2__KeyInfoConfirmationDataType *)ptr);
		break;
	case SOAP_TYPE_saml2__SubjectConfirmationDataType:
		soap_serialize_saml2__SubjectConfirmationDataType(soap, (const struct saml2__SubjectConfirmationDataType *)ptr);
		break;
	case SOAP_TYPE_saml2__SubjectConfirmationType:
		soap_serialize_saml2__SubjectConfirmationType(soap, (const struct saml2__SubjectConfirmationType *)ptr);
		break;
	case SOAP_TYPE_saml2__SubjectType:
		soap_serialize_saml2__SubjectType(soap, (const struct saml2__SubjectType *)ptr);
		break;
	case SOAP_TYPE_saml2__AssertionType:
		soap_serialize_saml2__AssertionType(soap, (const struct saml2__AssertionType *)ptr);
		break;
	case SOAP_TYPE_saml2__EncryptedElementType:
		soap_serialize_saml2__EncryptedElementType(soap, (const struct saml2__EncryptedElementType *)ptr);
		break;
	case SOAP_TYPE_saml2__NameIDType:
		soap_serialize_saml2__NameIDType(soap, (const struct saml2__NameIDType *)ptr);
		break;
	case SOAP_TYPE_saml2__BaseIDAbstractType:
		soap_serialize_saml2__BaseIDAbstractType(soap, (const struct saml2__BaseIDAbstractType *)ptr);
		break;
	case SOAP_TYPE__saml1__Attribute:
		soap_serialize__saml1__Attribute(soap, (const struct saml1__AttributeType *)ptr);
		break;
	case SOAP_TYPE__saml1__AttributeDesignator:
		soap_serialize__saml1__AttributeDesignator(soap, (const struct saml1__AttributeDesignatorType *)ptr);
		break;
	case SOAP_TYPE__saml1__AttributeStatement:
		soap_serialize__saml1__AttributeStatement(soap, (const struct saml1__AttributeStatementType *)ptr);
		break;
	case SOAP_TYPE__saml1__Evidence:
		soap_serialize__saml1__Evidence(soap, (const struct saml1__EvidenceType *)ptr);
		break;
	case SOAP_TYPE__saml1__Action:
		soap_serialize__saml1__Action(soap, (const struct saml1__ActionType *)ptr);
		break;
	case SOAP_TYPE__saml1__AuthorizationDecisionStatement:
		soap_serialize__saml1__AuthorizationDecisionStatement(soap, (const struct saml1__AuthorizationDecisionStatementType *)ptr);
		break;
	case SOAP_TYPE__saml1__AuthorityBinding:
		soap_serialize__saml1__AuthorityBinding(soap, (const struct saml1__AuthorityBindingType *)ptr);
		break;
	case SOAP_TYPE__saml1__SubjectLocality:
		soap_serialize__saml1__SubjectLocality(soap, (const struct saml1__SubjectLocalityType *)ptr);
		break;
	case SOAP_TYPE__saml1__AuthenticationStatement:
		soap_serialize__saml1__AuthenticationStatement(soap, (const struct saml1__AuthenticationStatementType *)ptr);
		break;
	case SOAP_TYPE__saml1__SubjectConfirmation:
		soap_serialize__saml1__SubjectConfirmation(soap, (const struct saml1__SubjectConfirmationType *)ptr);
		break;
	case SOAP_TYPE__saml1__NameIdentifier:
		soap_serialize__saml1__NameIdentifier(soap, (const struct saml1__NameIdentifierType *)ptr);
		break;
	case SOAP_TYPE__saml1__Subject:
		soap_serialize__saml1__Subject(soap, (const struct saml1__SubjectType *)ptr);
		break;
	case SOAP_TYPE__saml1__SubjectStatement:
		soap_serialize__saml1__SubjectStatement(soap, (const struct saml1__SubjectStatementAbstractType *)ptr);
		break;
	case SOAP_TYPE__saml1__Statement:
		soap_serialize__saml1__Statement(soap, (const struct saml1__StatementAbstractType *)ptr);
		break;
	case SOAP_TYPE__saml1__Advice:
		soap_serialize__saml1__Advice(soap, (const struct saml1__AdviceType *)ptr);
		break;
	case SOAP_TYPE__saml1__DoNotCacheCondition:
		soap_serialize__saml1__DoNotCacheCondition(soap, (const struct saml1__DoNotCacheConditionType *)ptr);
		break;
	case SOAP_TYPE__saml1__AudienceRestrictionCondition:
		soap_serialize__saml1__AudienceRestrictionCondition(soap, (const struct saml1__AudienceRestrictionConditionType *)ptr);
		break;
	case SOAP_TYPE__saml1__Condition:
		soap_serialize__saml1__Condition(soap, (const struct saml1__ConditionAbstractType *)ptr);
		break;
	case SOAP_TYPE__saml1__Conditions:
		soap_serialize__saml1__Conditions(soap, (const struct saml1__ConditionsType *)ptr);
		break;
	case SOAP_TYPE__saml1__Assertion:
		soap_serialize__saml1__Assertion(soap, (const struct saml1__AssertionType *)ptr);
		break;
	case SOAP_TYPE___saml1__union_EvidenceType:
		soap_serialize___saml1__union_EvidenceType(soap, (const struct __saml1__union_EvidenceType *)ptr);
		break;
	case SOAP_TYPE___saml1__union_AdviceType:
		soap_serialize___saml1__union_AdviceType(soap, (const struct __saml1__union_AdviceType *)ptr);
		break;
	case SOAP_TYPE___saml1__union_ConditionsType:
		soap_serialize___saml1__union_ConditionsType(soap, (const struct __saml1__union_ConditionsType *)ptr);
		break;
	case SOAP_TYPE___saml1__union_AssertionType:
		soap_serialize___saml1__union_AssertionType(soap, (const struct __saml1__union_AssertionType *)ptr);
		break;
	case SOAP_TYPE_saml1__AttributeType:
		soap_serialize_saml1__AttributeType(soap, (const struct saml1__AttributeType *)ptr);
		break;
	case SOAP_TYPE_saml1__AttributeDesignatorType:
		soap_serialize_saml1__AttributeDesignatorType(soap, (const struct saml1__AttributeDesignatorType *)ptr);
		break;
	case SOAP_TYPE_saml1__AttributeStatementType:
		soap_serialize_saml1__AttributeStatementType(soap, (const struct saml1__AttributeStatementType *)ptr);
		break;
	case SOAP_TYPE_saml1__EvidenceType:
		soap_serialize_saml1__EvidenceType(soap, (const struct saml1__EvidenceType *)ptr);
		break;
	case SOAP_TYPE_saml1__ActionType:
		soap_serialize_saml1__ActionType(soap, (const struct saml1__ActionType *)ptr);
		break;
	case SOAP_TYPE_saml1__AuthorizationDecisionStatementType:
		soap_serialize_saml1__AuthorizationDecisionStatementType(soap, (const struct saml1__AuthorizationDecisionStatementType *)ptr);
		break;
	case SOAP_TYPE_saml1__AuthorityBindingType:
		soap_serialize_saml1__AuthorityBindingType(soap, (const struct saml1__AuthorityBindingType *)ptr);
		break;
	case SOAP_TYPE_saml1__SubjectLocalityType:
		soap_serialize_saml1__SubjectLocalityType(soap, (const struct saml1__SubjectLocalityType *)ptr);
		break;
	case SOAP_TYPE_saml1__AuthenticationStatementType:
		soap_serialize_saml1__AuthenticationStatementType(soap, (const struct saml1__AuthenticationStatementType *)ptr);
		break;
	case SOAP_TYPE_saml1__SubjectConfirmationType:
		soap_serialize_saml1__SubjectConfirmationType(soap, (const struct saml1__SubjectConfirmationType *)ptr);
		break;
	case SOAP_TYPE_saml1__NameIdentifierType:
		soap_serialize_saml1__NameIdentifierType(soap, (const struct saml1__NameIdentifierType *)ptr);
		break;
	case SOAP_TYPE_saml1__SubjectType:
		soap_serialize_saml1__SubjectType(soap, (const struct saml1__SubjectType *)ptr);
		break;
	case SOAP_TYPE_saml1__SubjectStatementAbstractType:
		soap_serialize_saml1__SubjectStatementAbstractType(soap, (const struct saml1__SubjectStatementAbstractType *)ptr);
		break;
	case SOAP_TYPE_saml1__StatementAbstractType:
		soap_serialize_saml1__StatementAbstractType(soap, (const struct saml1__StatementAbstractType *)ptr);
		break;
	case SOAP_TYPE_saml1__AdviceType:
		soap_serialize_saml1__AdviceType(soap, (const struct saml1__AdviceType *)ptr);
		break;
	case SOAP_TYPE_saml1__DoNotCacheConditionType:
		soap_serialize_saml1__DoNotCacheConditionType(soap, (const struct saml1__DoNotCacheConditionType *)ptr);
		break;
	case SOAP_TYPE_saml1__AudienceRestrictionConditionType:
		soap_serialize_saml1__AudienceRestrictionConditionType(soap, (const struct saml1__AudienceRestrictionConditionType *)ptr);
		break;
	case SOAP_TYPE_saml1__ConditionAbstractType:
		soap_serialize_saml1__ConditionAbstractType(soap, (const struct saml1__ConditionAbstractType *)ptr);
		break;
	case SOAP_TYPE_saml1__ConditionsType:
		soap_serialize_saml1__ConditionsType(soap, (const struct saml1__ConditionsType *)ptr);
		break;
	case SOAP_TYPE_saml1__AssertionType:
		soap_serialize_saml1__AssertionType(soap, (const struct saml1__AssertionType *)ptr);
		break;
	case SOAP_TYPE___wsc__DerivedKeyTokenType_sequence:
		soap_serialize___wsc__DerivedKeyTokenType_sequence(soap, (const struct __wsc__DerivedKeyTokenType_sequence *)ptr);
		break;
	case SOAP_TYPE_wsc__PropertiesType:
		soap_serialize_wsc__PropertiesType(soap, (const struct wsc__PropertiesType *)ptr);
		break;
	case SOAP_TYPE_wsc__DerivedKeyTokenType:
		soap_serialize_wsc__DerivedKeyTokenType(soap, (const struct wsc__DerivedKeyTokenType *)ptr);
		break;
	case SOAP_TYPE_wsc__SecurityContextTokenType:
		soap_serialize_wsc__SecurityContextTokenType(soap, (const struct wsc__SecurityContextTokenType *)ptr);
		break;
	case SOAP_TYPE__xenc__EncryptionProperty:
		soap_serialize__xenc__EncryptionProperty(soap, (const struct xenc__EncryptionPropertyType *)ptr);
		break;
	case SOAP_TYPE__xenc__EncryptionProperties:
		soap_serialize__xenc__EncryptionProperties(soap, (const struct xenc__EncryptionPropertiesType *)ptr);
		break;
	case SOAP_TYPE__xenc__AgreementMethod:
		soap_serialize__xenc__AgreementMethod(soap, (const struct xenc__AgreementMethodType *)ptr);
		break;
	case SOAP_TYPE__xenc__CipherReference:
		soap_serialize__xenc__CipherReference(soap, (const struct xenc__CipherReferenceType *)ptr);
		break;
	case SOAP_TYPE__xenc__CipherData:
		soap_serialize__xenc__CipherData(soap, (const struct xenc__CipherDataType *)ptr);
		break;
	case SOAP_TYPE___xenc__union_ReferenceList:
		soap_serialize___xenc__union_ReferenceList(soap, (const struct __xenc__union_ReferenceList *)ptr);
		break;
	case SOAP_TYPE__xenc__ReferenceList:
		soap_serialize__xenc__ReferenceList(soap, (const struct _xenc__ReferenceList *)ptr);
		break;
	case SOAP_TYPE_xenc__EncryptionPropertyType:
		soap_serialize_xenc__EncryptionPropertyType(soap, (const struct xenc__EncryptionPropertyType *)ptr);
		break;
	case SOAP_TYPE_xenc__EncryptionPropertiesType:
		soap_serialize_xenc__EncryptionPropertiesType(soap, (const struct xenc__EncryptionPropertiesType *)ptr);
		break;
	case SOAP_TYPE_xenc__ReferenceType:
		soap_serialize_xenc__ReferenceType(soap, (const struct xenc__ReferenceType *)ptr);
		break;
	case SOAP_TYPE_xenc__AgreementMethodType:
		soap_serialize_xenc__AgreementMethodType(soap, (const struct xenc__AgreementMethodType *)ptr);
		break;
	case SOAP_TYPE_xenc__EncryptedKeyType:
		soap_serialize_xenc__EncryptedKeyType(soap, (const struct xenc__EncryptedKeyType *)ptr);
		break;
	case SOAP_TYPE_xenc__EncryptedDataType:
		soap_serialize_xenc__EncryptedDataType(soap, (const struct xenc__EncryptedDataType *)ptr);
		break;
	case SOAP_TYPE_xenc__TransformsType:
		soap_serialize_xenc__TransformsType(soap, (const struct xenc__TransformsType *)ptr);
		break;
	case SOAP_TYPE_xenc__CipherReferenceType:
		soap_serialize_xenc__CipherReferenceType(soap, (const struct xenc__CipherReferenceType *)ptr);
		break;
	case SOAP_TYPE_xenc__CipherDataType:
		soap_serialize_xenc__CipherDataType(soap, (const struct xenc__CipherDataType *)ptr);
		break;
	case SOAP_TYPE_xenc__EncryptionMethodType:
		soap_serialize_xenc__EncryptionMethodType(soap, (const struct xenc__EncryptionMethodType *)ptr);
		break;
	case SOAP_TYPE_xenc__EncryptedType:
		soap_serialize_xenc__EncryptedType(soap, (const struct xenc__EncryptedType *)ptr);
		break;
	case SOAP_TYPE__ds__RSAKeyValue:
		soap_serialize__ds__RSAKeyValue(soap, (const struct ds__RSAKeyValueType *)ptr);
		break;
	case SOAP_TYPE__ds__DSAKeyValue:
		soap_serialize__ds__DSAKeyValue(soap, (const struct ds__DSAKeyValueType *)ptr);
		break;
	case SOAP_TYPE__ds__X509Data:
		soap_serialize__ds__X509Data(soap, (const struct ds__X509DataType *)ptr);
		break;
	case SOAP_TYPE__ds__RetrievalMethod:
		soap_serialize__ds__RetrievalMethod(soap, (const struct ds__RetrievalMethodType *)ptr);
		break;
	case SOAP_TYPE__ds__KeyValue:
		soap_serialize__ds__KeyValue(soap, (const struct ds__KeyValueType *)ptr);
		break;
	case SOAP_TYPE__ds__DigestMethod:
		soap_serialize__ds__DigestMethod(soap, (const struct ds__DigestMethodType *)ptr);
		break;
	case SOAP_TYPE__ds__Transforms:
		soap_serialize__ds__Transforms(soap, (const struct ds__TransformsType *)ptr);
		break;
	case SOAP_TYPE__ds__Reference:
		soap_serialize__ds__Reference(soap, (const struct ds__ReferenceType *)ptr);
		break;
	case SOAP_TYPE__ds__SignatureMethod:
		soap_serialize__ds__SignatureMethod(soap, (const struct ds__SignatureMethodType *)ptr);
		break;
	case SOAP_TYPE__ds__CanonicalizationMethod:
		soap_serialize__ds__CanonicalizationMethod(soap, (const struct ds__CanonicalizationMethodType *)ptr);
		break;
	case SOAP_TYPE__ds__SignedInfo:
		soap_serialize__ds__SignedInfo(soap, (const struct ds__SignedInfoType *)ptr);
		break;
	case SOAP_TYPE___ds__DSAKeyValueType_sequence_:
		soap_serialize___ds__DSAKeyValueType_sequence_(soap, (const struct __ds__DSAKeyValueType_sequence_ *)ptr);
		break;
	case SOAP_TYPE___ds__DSAKeyValueType_sequence:
		soap_serialize___ds__DSAKeyValueType_sequence(soap, (const struct __ds__DSAKeyValueType_sequence *)ptr);
		break;
	case SOAP_TYPE___ds__X509DataType_sequence:
		soap_serialize___ds__X509DataType_sequence(soap, (const struct __ds__X509DataType_sequence *)ptr);
		break;
	case SOAP_TYPE_ds__RSAKeyValueType:
		soap_serialize_ds__RSAKeyValueType(soap, (const struct ds__RSAKeyValueType *)ptr);
		break;
	case SOAP_TYPE_ds__DSAKeyValueType:
		soap_serialize_ds__DSAKeyValueType(soap, (const struct ds__DSAKeyValueType *)ptr);
		break;
	case SOAP_TYPE_ds__X509IssuerSerialType:
		soap_serialize_ds__X509IssuerSerialType(soap, (const struct ds__X509IssuerSerialType *)ptr);
		break;
	case SOAP_TYPE__ds__KeyInfo:
		soap_serialize__ds__KeyInfo(soap, (const struct ds__KeyInfoType *)ptr);
		break;
	case SOAP_TYPE_ds__RetrievalMethodType:
		soap_serialize_ds__RetrievalMethodType(soap, (const struct ds__RetrievalMethodType *)ptr);
		break;
	case SOAP_TYPE_ds__KeyValueType:
		soap_serialize_ds__KeyValueType(soap, (const struct ds__KeyValueType *)ptr);
		break;
	case SOAP_TYPE_ds__DigestMethodType:
		soap_serialize_ds__DigestMethodType(soap, (const struct ds__DigestMethodType *)ptr);
		break;
	case SOAP_TYPE__ds__Transform:
		soap_serialize__ds__Transform(soap, (const struct ds__TransformType *)ptr);
		break;
	case SOAP_TYPE_ds__TransformType:
		soap_serialize_ds__TransformType(soap, (const struct ds__TransformType *)ptr);
		break;
	case SOAP_TYPE__c14n__InclusiveNamespaces:
		soap_serialize__c14n__InclusiveNamespaces(soap, (const struct _c14n__InclusiveNamespaces *)ptr);
		break;
	case SOAP_TYPE_ds__TransformsType:
		soap_serialize_ds__TransformsType(soap, (const struct ds__TransformsType *)ptr);
		break;
	case SOAP_TYPE_ds__ReferenceType:
		soap_serialize_ds__ReferenceType(soap, (const struct ds__ReferenceType *)ptr);
		break;
	case SOAP_TYPE_ds__SignatureMethodType:
		soap_serialize_ds__SignatureMethodType(soap, (const struct ds__SignatureMethodType *)ptr);
		break;
	case SOAP_TYPE_ds__CanonicalizationMethodType:
		soap_serialize_ds__CanonicalizationMethodType(soap, (const struct ds__CanonicalizationMethodType *)ptr);
		break;
	case SOAP_TYPE__ds__Signature:
		soap_serialize__ds__Signature(soap, (const struct ds__SignatureType *)ptr);
		break;
	case SOAP_TYPE_ds__KeyInfoType:
		soap_serialize_ds__KeyInfoType(soap, (const struct ds__KeyInfoType *)ptr);
		break;
	case SOAP_TYPE_ds__SignedInfoType:
		soap_serialize_ds__SignedInfoType(soap, (const struct ds__SignedInfoType *)ptr);
		break;
	case SOAP_TYPE_ds__SignatureType:
		soap_serialize_ds__SignatureType(soap, (const struct ds__SignatureType *)ptr);
		break;
	case SOAP_TYPE_ds__X509DataType:
		soap_serialize_ds__X509DataType(soap, (const struct ds__X509DataType *)ptr);
		break;
	case SOAP_TYPE__wsse__SecurityTokenReference:
		soap_serialize__wsse__SecurityTokenReference(soap, (const struct _wsse__SecurityTokenReference *)ptr);
		break;
	case SOAP_TYPE__wsse__KeyIdentifier:
		soap_serialize__wsse__KeyIdentifier(soap, (const struct _wsse__KeyIdentifier *)ptr);
		break;
	case SOAP_TYPE__wsse__Embedded:
		soap_serialize__wsse__Embedded(soap, (const struct _wsse__Embedded *)ptr);
		break;
	case SOAP_TYPE__wsse__Reference:
		soap_serialize__wsse__Reference(soap, (const struct _wsse__Reference *)ptr);
		break;
	case SOAP_TYPE__wsse__BinarySecurityToken:
		soap_serialize__wsse__BinarySecurityToken(soap, (const struct _wsse__BinarySecurityToken *)ptr);
		break;
	case SOAP_TYPE__wsse__Password:
		soap_serialize__wsse__Password(soap, (const struct _wsse__Password *)ptr);
		break;
	case SOAP_TYPE__wsse__UsernameToken:
		soap_serialize__wsse__UsernameToken(soap, (const struct _wsse__UsernameToken *)ptr);
		break;
	case SOAP_TYPE_wsse__EncodedString:
		soap_serialize_wsse__EncodedString(soap, (const struct wsse__EncodedString *)ptr);
		break;
	case SOAP_TYPE__wsu__Timestamp:
		soap_serialize__wsu__Timestamp(soap, (const struct _wsu__Timestamp *)ptr);
		break;
	case SOAP_TYPE_PointerTons1__sendSummary:
		soap_serialize_PointerTons1__sendSummary(soap, (ns1__sendSummary *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__sendPack:
		soap_serialize_PointerTons1__sendPack(soap, (ns1__sendPack *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__sendBill:
		soap_serialize_PointerTons1__sendBill(soap, (ns1__sendBill *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__getStatus:
		soap_serialize_PointerTons1__getStatus(soap, (ns1__getStatus *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__statusResponse:
		soap_serialize_PointerTons1__statusResponse(soap, (ns1__statusResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__base64Binary:
		soap_serialize_PointerToxsd__base64Binary(soap, (xsd__base64Binary *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE_PointerTods__SignatureType:
		soap_serialize_PointerTods__SignatureType(soap, (struct ds__SignatureType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsse__BinarySecurityToken:
		soap_serialize_PointerTo_wsse__BinarySecurityToken(soap, (struct _wsse__BinarySecurityToken *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsse__UsernameToken:
		soap_serialize_PointerTo_wsse__UsernameToken(soap, (struct _wsse__UsernameToken *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsu__Timestamp:
		soap_serialize_PointerTo_wsu__Timestamp(soap, (struct _wsu__Timestamp *const*)ptr);
		break;
	case SOAP_TYPE__saml2__AuthenticatingAuthority:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE__saml2__AuthnContextDeclRef:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE__saml2__AuthnContextClassRef:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE__saml2__Audience:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE__saml2__AssertionURIRef:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE__saml2__AssertionIDRef:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_PointerToPointerTo_ds__KeyInfo:
		soap_serialize_PointerToPointerTo_ds__KeyInfo(soap, (struct ds__KeyInfoType **const*)ptr);
		break;
	case SOAP_TYPE_PointerTo__saml2__union_AttributeStatementType:
		soap_serialize_PointerTo__saml2__union_AttributeStatementType(soap, (struct __saml2__union_AttributeStatementType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__AttributeType:
		soap_serialize_PointerTosaml2__AttributeType(soap, (struct saml2__AttributeType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__EvidenceType:
		soap_serialize_PointerTosaml2__EvidenceType(soap, (struct saml2__EvidenceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__ActionType:
		soap_serialize_PointerTosaml2__ActionType(soap, (struct saml2__ActionType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__AuthnContextType:
		soap_serialize_PointerTosaml2__AuthnContextType(soap, (struct saml2__AuthnContextType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__SubjectLocalityType:
		soap_serialize_PointerTosaml2__SubjectLocalityType(soap, (struct saml2__SubjectLocalityType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo__saml2__union_EvidenceType:
		soap_serialize_PointerTo__saml2__union_EvidenceType(soap, (struct __saml2__union_EvidenceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo__saml2__union_AdviceType:
		soap_serialize_PointerTo__saml2__union_AdviceType(soap, (struct __saml2__union_AdviceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__AssertionType:
		soap_serialize_PointerTosaml2__AssertionType(soap, (struct saml2__AssertionType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo__saml2__union_ConditionsType:
		soap_serialize_PointerTo__saml2__union_ConditionsType(soap, (struct __saml2__union_ConditionsType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__ProxyRestrictionType:
		soap_serialize_PointerTosaml2__ProxyRestrictionType(soap, (struct saml2__ProxyRestrictionType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__OneTimeUseType:
		soap_serialize_PointerTosaml2__OneTimeUseType(soap, (struct saml2__OneTimeUseType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__AudienceRestrictionType:
		soap_serialize_PointerTosaml2__AudienceRestrictionType(soap, (struct saml2__AudienceRestrictionType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__ConditionAbstractType:
		soap_serialize_PointerTosaml2__ConditionAbstractType(soap, (struct saml2__ConditionAbstractType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__SubjectConfirmationDataType:
		soap_serialize_PointerTosaml2__SubjectConfirmationDataType(soap, (struct saml2__SubjectConfirmationDataType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__SubjectConfirmationType:
		soap_serialize_PointerTosaml2__SubjectConfirmationType(soap, (struct saml2__SubjectConfirmationType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__EncryptedElementType:
		soap_serialize_PointerTosaml2__EncryptedElementType(soap, (struct saml2__EncryptedElementType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__BaseIDAbstractType:
		soap_serialize_PointerTosaml2__BaseIDAbstractType(soap, (struct saml2__BaseIDAbstractType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo__saml2__union_AssertionType:
		soap_serialize_PointerTo__saml2__union_AssertionType(soap, (struct __saml2__union_AssertionType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__AttributeStatementType:
		soap_serialize_PointerTosaml2__AttributeStatementType(soap, (struct saml2__AttributeStatementType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__AuthzDecisionStatementType:
		soap_serialize_PointerTosaml2__AuthzDecisionStatementType(soap, (struct saml2__AuthzDecisionStatementType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__AuthnStatementType:
		soap_serialize_PointerTosaml2__AuthnStatementType(soap, (struct saml2__AuthnStatementType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__StatementAbstractType:
		soap_serialize_PointerTosaml2__StatementAbstractType(soap, (struct saml2__StatementAbstractType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__AdviceType:
		soap_serialize_PointerTosaml2__AdviceType(soap, (struct saml2__AdviceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__ConditionsType:
		soap_serialize_PointerTosaml2__ConditionsType(soap, (struct saml2__ConditionsType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__SubjectType:
		soap_serialize_PointerTosaml2__SubjectType(soap, (struct saml2__SubjectType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml2__NameIDType:
		soap_serialize_PointerTosaml2__NameIDType(soap, (struct saml2__NameIDType *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerToxenc__EncryptedKeyType:
		soap_serialize_PointerToPointerToxenc__EncryptedKeyType(soap, (struct xenc__EncryptedKeyType **const*)ptr);
		break;
	case SOAP_TYPE_PointerToxenc__EncryptedKeyType:
		soap_serialize_PointerToxenc__EncryptedKeyType(soap, (struct xenc__EncryptedKeyType *const*)ptr);
		break;
	case SOAP_TYPE__saml1__ConfirmationMethod:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE__saml1__Audience:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE__saml1__AssertionIDReference:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__AttributeType:
		soap_serialize_PointerTosaml1__AttributeType(soap, (struct saml1__AttributeType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__EvidenceType:
		soap_serialize_PointerTosaml1__EvidenceType(soap, (struct saml1__EvidenceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__ActionType:
		soap_serialize_PointerTosaml1__ActionType(soap, (struct saml1__ActionType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__AuthorityBindingType:
		soap_serialize_PointerTosaml1__AuthorityBindingType(soap, (struct saml1__AuthorityBindingType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__SubjectLocalityType:
		soap_serialize_PointerTosaml1__SubjectLocalityType(soap, (struct saml1__SubjectLocalityType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__SubjectType:
		soap_serialize_PointerTosaml1__SubjectType(soap, (struct saml1__SubjectType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo__saml1__union_EvidenceType:
		soap_serialize_PointerTo__saml1__union_EvidenceType(soap, (struct __saml1__union_EvidenceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostring:
		soap_serialize_PointerTostring(soap, (char **const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__SubjectConfirmationType:
		soap_serialize_PointerTosaml1__SubjectConfirmationType(soap, (struct saml1__SubjectConfirmationType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__NameIdentifierType:
		soap_serialize_PointerTosaml1__NameIdentifierType(soap, (struct saml1__NameIdentifierType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo__saml1__union_AdviceType:
		soap_serialize_PointerTo__saml1__union_AdviceType(soap, (struct __saml1__union_AdviceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__AssertionType:
		soap_serialize_PointerTosaml1__AssertionType(soap, (struct saml1__AssertionType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTodateTime:
		soap_serialize_PointerTodateTime(soap, (time_t *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo__saml1__union_ConditionsType:
		soap_serialize_PointerTo__saml1__union_ConditionsType(soap, (struct __saml1__union_ConditionsType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__ConditionAbstractType:
		soap_serialize_PointerTosaml1__ConditionAbstractType(soap, (struct saml1__ConditionAbstractType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__DoNotCacheConditionType:
		soap_serialize_PointerTosaml1__DoNotCacheConditionType(soap, (struct saml1__DoNotCacheConditionType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__AudienceRestrictionConditionType:
		soap_serialize_PointerTosaml1__AudienceRestrictionConditionType(soap, (struct saml1__AudienceRestrictionConditionType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ds__Signature:
		soap_serialize_PointerTo_ds__Signature(soap, (struct ds__SignatureType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo__saml1__union_AssertionType:
		soap_serialize_PointerTo__saml1__union_AssertionType(soap, (struct __saml1__union_AssertionType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__AttributeStatementType:
		soap_serialize_PointerTosaml1__AttributeStatementType(soap, (struct saml1__AttributeStatementType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__AuthorizationDecisionStatementType:
		soap_serialize_PointerTosaml1__AuthorizationDecisionStatementType(soap, (struct saml1__AuthorizationDecisionStatementType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__AuthenticationStatementType:
		soap_serialize_PointerTosaml1__AuthenticationStatementType(soap, (struct saml1__AuthenticationStatementType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__SubjectStatementAbstractType:
		soap_serialize_PointerTosaml1__SubjectStatementAbstractType(soap, (struct saml1__SubjectStatementAbstractType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__StatementAbstractType:
		soap_serialize_PointerTosaml1__StatementAbstractType(soap, (struct saml1__StatementAbstractType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__AdviceType:
		soap_serialize_PointerTosaml1__AdviceType(soap, (struct saml1__AdviceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTosaml1__ConditionsType:
		soap_serialize_PointerTosaml1__ConditionsType(soap, (struct saml1__ConditionsType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo__wsc__DerivedKeyTokenType_sequence:
		soap_serialize_PointerTo__wsc__DerivedKeyTokenType_sequence(soap, (struct __wsc__DerivedKeyTokenType_sequence *const*)ptr);
		break;
	case SOAP_TYPE_PointerToULONG64:
		soap_serialize_PointerToULONG64(soap, (ULONG64 *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsc__PropertiesType:
		soap_serialize_PointerTowsc__PropertiesType(soap, (struct wsc__PropertiesType *const*)ptr);
		break;
	case SOAP_TYPE_wsc__FaultCodeOpenEnumType:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_PointerTo_xenc__ReferenceList:
		soap_serialize_PointerTo_xenc__ReferenceList(soap, (struct _xenc__ReferenceList *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo__xenc__union_ReferenceList:
		soap_serialize_PointerTo__xenc__union_ReferenceList(soap, (struct __xenc__union_ReferenceList *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxenc__ReferenceType:
		soap_serialize_PointerToxenc__ReferenceType(soap, (struct xenc__ReferenceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxenc__EncryptionPropertyType:
		soap_serialize_PointerToxenc__EncryptionPropertyType(soap, (struct xenc__EncryptionPropertyType *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTo_ds__Transform:
		soap_serialize_PointerToPointerTo_ds__Transform(soap, (struct ds__TransformType **const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ds__Transform:
		soap_serialize_PointerTo_ds__Transform(soap, (struct ds__TransformType *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxenc__TransformsType:
		soap_serialize_PointerToxenc__TransformsType(soap, (struct xenc__TransformsType *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxenc__CipherReferenceType:
		soap_serialize_PointerToxenc__CipherReferenceType(soap, (struct xenc__CipherReferenceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxenc__EncryptionPropertiesType:
		soap_serialize_PointerToxenc__EncryptionPropertiesType(soap, (struct xenc__EncryptionPropertiesType *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxenc__CipherDataType:
		soap_serialize_PointerToxenc__CipherDataType(soap, (struct xenc__CipherDataType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ds__KeyInfo:
		soap_serialize_PointerTo_ds__KeyInfo(soap, (struct ds__KeyInfoType *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxenc__EncryptionMethodType:
		soap_serialize_PointerToxenc__EncryptionMethodType(soap, (struct xenc__EncryptionMethodType *const*)ptr);
		break;
	case SOAP_TYPE__ds__MgmtData:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE__ds__KeyName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE__ds__DigestValue:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_PointerTo__ds__DSAKeyValueType_sequence_:
		soap_serialize_PointerTo__ds__DSAKeyValueType_sequence_(soap, (struct __ds__DSAKeyValueType_sequence_ *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo__ds__DSAKeyValueType_sequence:
		soap_serialize_PointerTo__ds__DSAKeyValueType_sequence(soap, (struct __ds__DSAKeyValueType_sequence *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo__ds__X509DataType_sequence:
		soap_serialize_PointerTo__ds__X509DataType_sequence(soap, (struct __ds__X509DataType_sequence *const*)ptr);
		break;
	case SOAP_TYPE_PointerTods__X509IssuerSerialType:
		soap_serialize_PointerTods__X509IssuerSerialType(soap, (struct ds__X509IssuerSerialType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTods__RSAKeyValueType:
		soap_serialize_PointerTods__RSAKeyValueType(soap, (struct ds__RSAKeyValueType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTods__DSAKeyValueType:
		soap_serialize_PointerTods__DSAKeyValueType(soap, (struct ds__DSAKeyValueType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTods__TransformType:
		soap_serialize_PointerTods__TransformType(soap, (struct ds__TransformType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTods__DigestMethodType:
		soap_serialize_PointerTods__DigestMethodType(soap, (struct ds__DigestMethodType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTods__TransformsType:
		soap_serialize_PointerTods__TransformsType(soap, (struct ds__TransformsType *const*)ptr);
		break;
	case SOAP_TYPE_PointerToint:
		soap_serialize_PointerToint(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE_PointerTods__ReferenceType:
		soap_serialize_PointerTods__ReferenceType(soap, (struct ds__ReferenceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTods__SignatureMethodType:
		soap_serialize_PointerTods__SignatureMethodType(soap, (struct ds__SignatureMethodType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTods__CanonicalizationMethodType:
		soap_serialize_PointerTods__CanonicalizationMethodType(soap, (struct ds__CanonicalizationMethodType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsse__SecurityTokenReference:
		soap_serialize_PointerTo_wsse__SecurityTokenReference(soap, (struct _wsse__SecurityTokenReference *const*)ptr);
		break;
	case SOAP_TYPE_PointerTods__RetrievalMethodType:
		soap_serialize_PointerTods__RetrievalMethodType(soap, (struct ds__RetrievalMethodType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTods__KeyValueType:
		soap_serialize_PointerTods__KeyValueType(soap, (struct ds__KeyValueType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_c14n__InclusiveNamespaces:
		soap_serialize_PointerTo_c14n__InclusiveNamespaces(soap, (struct _c14n__InclusiveNamespaces *const*)ptr);
		break;
	case SOAP_TYPE_PointerTods__KeyInfoType:
		soap_serialize_PointerTods__KeyInfoType(soap, (struct ds__KeyInfoType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTods__SignedInfoType:
		soap_serialize_PointerTods__SignedInfoType(soap, (struct ds__SignedInfoType *const*)ptr);
		break;
	case SOAP_TYPE__ds__SignatureValue:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_PointerTods__X509DataType:
		soap_serialize_PointerTods__X509DataType(soap, (struct ds__X509DataType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsse__Embedded:
		soap_serialize_PointerTo_wsse__Embedded(soap, (struct _wsse__Embedded *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsse__KeyIdentifier:
		soap_serialize_PointerTo_wsse__KeyIdentifier(soap, (struct _wsse__KeyIdentifier *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsse__Reference:
		soap_serialize_PointerTo_wsse__Reference(soap, (struct _wsse__Reference *const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsse__EncodedString:
		soap_serialize_PointerTowsse__EncodedString(soap, (struct wsse__EncodedString *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsse__Password:
		soap_serialize_PointerTo_wsse__Password(soap, (struct _wsse__Password *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#ifdef __cplusplus
}
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap *soap, const void *ptr, int type)
{(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	return NULL;
}
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void *ptr, int type)
{(void)ptr; (void)type; /* appease -Wall -Werror */
}
#ifdef __cplusplus
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE__wsu__Timestamp:
		return (void*)soap_instantiate__wsu__Timestamp(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsse__EncodedString:
		return (void*)soap_instantiate_wsse__EncodedString(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsse__UsernameToken:
		return (void*)soap_instantiate__wsse__UsernameToken(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsse__BinarySecurityToken:
		return (void*)soap_instantiate__wsse__BinarySecurityToken(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsse__Reference:
		return (void*)soap_instantiate__wsse__Reference(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsse__Embedded:
		return (void*)soap_instantiate__wsse__Embedded(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsse__KeyIdentifier:
		return (void*)soap_instantiate__wsse__KeyIdentifier(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsse__SecurityTokenReference:
		return (void*)soap_instantiate__wsse__SecurityTokenReference(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ds__SignatureType:
		return (void*)soap_instantiate_ds__SignatureType(soap, -1, type, arrayType, n);
	case SOAP_TYPE__c14n__InclusiveNamespaces:
		return (void*)soap_instantiate__c14n__InclusiveNamespaces(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ds__TransformType:
		return (void*)soap_instantiate_ds__TransformType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ds__KeyInfoType:
		return (void*)soap_instantiate_ds__KeyInfoType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ds__SignedInfoType:
		return (void*)soap_instantiate_ds__SignedInfoType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ds__CanonicalizationMethodType:
		return (void*)soap_instantiate_ds__CanonicalizationMethodType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ds__SignatureMethodType:
		return (void*)soap_instantiate_ds__SignatureMethodType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ds__ReferenceType:
		return (void*)soap_instantiate_ds__ReferenceType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ds__TransformsType:
		return (void*)soap_instantiate_ds__TransformsType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ds__DigestMethodType:
		return (void*)soap_instantiate_ds__DigestMethodType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ds__KeyValueType:
		return (void*)soap_instantiate_ds__KeyValueType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ds__RetrievalMethodType:
		return (void*)soap_instantiate_ds__RetrievalMethodType(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ds__X509DataType_sequence:
		return (void*)soap_instantiate___ds__X509DataType_sequence(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ds__X509DataType:
		return (void*)soap_instantiate_ds__X509DataType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ds__X509IssuerSerialType:
		return (void*)soap_instantiate_ds__X509IssuerSerialType(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ds__DSAKeyValueType_sequence:
		return (void*)soap_instantiate___ds__DSAKeyValueType_sequence(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ds__DSAKeyValueType_sequence_:
		return (void*)soap_instantiate___ds__DSAKeyValueType_sequence_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ds__DSAKeyValueType:
		return (void*)soap_instantiate_ds__DSAKeyValueType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ds__RSAKeyValueType:
		return (void*)soap_instantiate_ds__RSAKeyValueType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xenc__EncryptionPropertyType:
		return (void*)soap_instantiate_xenc__EncryptionPropertyType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xenc__EncryptedType:
		return (void*)soap_instantiate_xenc__EncryptedType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xenc__EncryptionMethodType:
		return (void*)soap_instantiate_xenc__EncryptionMethodType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xenc__CipherDataType:
		return (void*)soap_instantiate_xenc__CipherDataType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xenc__CipherReferenceType:
		return (void*)soap_instantiate_xenc__CipherReferenceType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xenc__TransformsType:
		return (void*)soap_instantiate_xenc__TransformsType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xenc__AgreementMethodType:
		return (void*)soap_instantiate_xenc__AgreementMethodType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xenc__ReferenceType:
		return (void*)soap_instantiate_xenc__ReferenceType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xenc__EncryptionPropertiesType:
		return (void*)soap_instantiate_xenc__EncryptionPropertiesType(soap, -1, type, arrayType, n);
	case SOAP_TYPE___xenc__union_ReferenceList:
		return (void*)soap_instantiate___xenc__union_ReferenceList(soap, -1, type, arrayType, n);
	case SOAP_TYPE__xenc__ReferenceList:
		return (void*)soap_instantiate__xenc__ReferenceList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xenc__EncryptedDataType:
		return (void*)soap_instantiate_xenc__EncryptedDataType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xenc__EncryptedKeyType:
		return (void*)soap_instantiate_xenc__EncryptedKeyType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsc__SecurityContextTokenType:
		return (void*)soap_instantiate_wsc__SecurityContextTokenType(soap, -1, type, arrayType, n);
	case SOAP_TYPE___wsc__DerivedKeyTokenType_sequence:
		return (void*)soap_instantiate___wsc__DerivedKeyTokenType_sequence(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsc__DerivedKeyTokenType:
		return (void*)soap_instantiate_wsc__DerivedKeyTokenType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsc__PropertiesType:
		return (void*)soap_instantiate_wsc__PropertiesType(soap, -1, type, arrayType, n);
	case SOAP_TYPE___saml1__union_AssertionType:
		return (void*)soap_instantiate___saml1__union_AssertionType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__AssertionType:
		return (void*)soap_instantiate_saml1__AssertionType(soap, -1, type, arrayType, n);
	case SOAP_TYPE___saml1__union_ConditionsType:
		return (void*)soap_instantiate___saml1__union_ConditionsType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__ConditionsType:
		return (void*)soap_instantiate_saml1__ConditionsType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__ConditionAbstractType:
		return (void*)soap_instantiate_saml1__ConditionAbstractType(soap, -1, type, arrayType, n);
	case SOAP_TYPE___saml1__union_AdviceType:
		return (void*)soap_instantiate___saml1__union_AdviceType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__AdviceType:
		return (void*)soap_instantiate_saml1__AdviceType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__StatementAbstractType:
		return (void*)soap_instantiate_saml1__StatementAbstractType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__SubjectType:
		return (void*)soap_instantiate_saml1__SubjectType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__SubjectConfirmationType:
		return (void*)soap_instantiate_saml1__SubjectConfirmationType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__SubjectLocalityType:
		return (void*)soap_instantiate_saml1__SubjectLocalityType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__AuthorityBindingType:
		return (void*)soap_instantiate_saml1__AuthorityBindingType(soap, -1, type, arrayType, n);
	case SOAP_TYPE___saml1__union_EvidenceType:
		return (void*)soap_instantiate___saml1__union_EvidenceType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__EvidenceType:
		return (void*)soap_instantiate_saml1__EvidenceType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__AttributeDesignatorType:
		return (void*)soap_instantiate_saml1__AttributeDesignatorType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__AudienceRestrictionConditionType:
		return (void*)soap_instantiate_saml1__AudienceRestrictionConditionType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__DoNotCacheConditionType:
		return (void*)soap_instantiate_saml1__DoNotCacheConditionType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__SubjectStatementAbstractType:
		return (void*)soap_instantiate_saml1__SubjectStatementAbstractType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__NameIdentifierType:
		return (void*)soap_instantiate_saml1__NameIdentifierType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__ActionType:
		return (void*)soap_instantiate_saml1__ActionType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__AttributeType:
		return (void*)soap_instantiate_saml1__AttributeType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__AuthenticationStatementType:
		return (void*)soap_instantiate_saml1__AuthenticationStatementType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__AuthorizationDecisionStatementType:
		return (void*)soap_instantiate_saml1__AuthorizationDecisionStatementType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml1__AttributeStatementType:
		return (void*)soap_instantiate_saml1__AttributeStatementType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__BaseIDAbstractType:
		return (void*)soap_instantiate_saml2__BaseIDAbstractType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__EncryptedElementType:
		return (void*)soap_instantiate_saml2__EncryptedElementType(soap, -1, type, arrayType, n);
	case SOAP_TYPE___saml2__union_AssertionType:
		return (void*)soap_instantiate___saml2__union_AssertionType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__AssertionType:
		return (void*)soap_instantiate_saml2__AssertionType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__SubjectType:
		return (void*)soap_instantiate_saml2__SubjectType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__SubjectConfirmationType:
		return (void*)soap_instantiate_saml2__SubjectConfirmationType(soap, -1, type, arrayType, n);
	case SOAP_TYPE___saml2__union_ConditionsType:
		return (void*)soap_instantiate___saml2__union_ConditionsType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__ConditionsType:
		return (void*)soap_instantiate_saml2__ConditionsType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__ConditionAbstractType:
		return (void*)soap_instantiate_saml2__ConditionAbstractType(soap, -1, type, arrayType, n);
	case SOAP_TYPE___saml2__union_AdviceType:
		return (void*)soap_instantiate___saml2__union_AdviceType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__AdviceType:
		return (void*)soap_instantiate_saml2__AdviceType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__StatementAbstractType:
		return (void*)soap_instantiate_saml2__StatementAbstractType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__SubjectLocalityType:
		return (void*)soap_instantiate_saml2__SubjectLocalityType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__AuthnContextType:
		return (void*)soap_instantiate_saml2__AuthnContextType(soap, -1, type, arrayType, n);
	case SOAP_TYPE___saml2__union_EvidenceType:
		return (void*)soap_instantiate___saml2__union_EvidenceType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__EvidenceType:
		return (void*)soap_instantiate_saml2__EvidenceType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__AttributeType:
		return (void*)soap_instantiate_saml2__AttributeType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__NameIDType:
		return (void*)soap_instantiate_saml2__NameIDType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__SubjectConfirmationDataType:
		return (void*)soap_instantiate_saml2__SubjectConfirmationDataType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__AudienceRestrictionType:
		return (void*)soap_instantiate_saml2__AudienceRestrictionType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__OneTimeUseType:
		return (void*)soap_instantiate_saml2__OneTimeUseType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__ProxyRestrictionType:
		return (void*)soap_instantiate_saml2__ProxyRestrictionType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__AuthnStatementType:
		return (void*)soap_instantiate_saml2__AuthnStatementType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__AuthzDecisionStatementType:
		return (void*)soap_instantiate_saml2__AuthzDecisionStatementType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__ActionType:
		return (void*)soap_instantiate_saml2__ActionType(soap, -1, type, arrayType, n);
	case SOAP_TYPE___saml2__union_AttributeStatementType:
		return (void*)soap_instantiate___saml2__union_AttributeStatementType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__AttributeStatementType:
		return (void*)soap_instantiate_saml2__AttributeStatementType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_saml2__KeyInfoConfirmationDataType:
		return (void*)soap_instantiate_saml2__KeyInfoConfirmationDataType(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsse__Security:
		return (void*)soap_instantiate__wsse__Security(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsse__Password:
		return (void*)soap_instantiate__wsse__Password(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__base64Binary:
		return (void*)soap_instantiate_xsd__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__sendSummary:
		return (void*)soap_instantiate_ns1__sendSummary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__sendSummaryResponse:
		return (void*)soap_instantiate_ns1__sendSummaryResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getStatus:
		return (void*)soap_instantiate_ns1__getStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__getStatusResponse:
		return (void*)soap_instantiate_ns1__getStatusResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__statusResponse:
		return (void*)soap_instantiate_ns1__statusResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__sendPack:
		return (void*)soap_instantiate_ns1__sendPack(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__sendPackResponse:
		return (void*)soap_instantiate_ns1__sendPackResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__sendBill:
		return (void*)soap_instantiate_ns1__sendBill(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__sendBillResponse:
		return (void*)soap_instantiate_ns1__sendBillResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___sunat__getStatus:
		return (void*)soap_instantiate___sunat__getStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE___sunat__sendBill:
		return (void*)soap_instantiate___sunat__sendBill(soap, -1, type, arrayType, n);
	case SOAP_TYPE___sunat__sendPack:
		return (void*)soap_instantiate___sunat__sendPack(soap, -1, type, arrayType, n);
	case SOAP_TYPE___sunat__sendSummary:
		return (void*)soap_instantiate___sunat__sendSummary(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE__ds__Signature:
		return (void*)soap_instantiate__ds__Signature(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ds__Transform:
		return (void*)soap_instantiate__ds__Transform(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ds__KeyInfo:
		return (void*)soap_instantiate__ds__KeyInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ds__SignedInfo:
		return (void*)soap_instantiate__ds__SignedInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ds__CanonicalizationMethod:
		return (void*)soap_instantiate__ds__CanonicalizationMethod(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ds__SignatureMethod:
		return (void*)soap_instantiate__ds__SignatureMethod(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ds__Reference:
		return (void*)soap_instantiate__ds__Reference(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ds__Transforms:
		return (void*)soap_instantiate__ds__Transforms(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ds__DigestMethod:
		return (void*)soap_instantiate__ds__DigestMethod(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ds__KeyValue:
		return (void*)soap_instantiate__ds__KeyValue(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ds__RetrievalMethod:
		return (void*)soap_instantiate__ds__RetrievalMethod(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ds__X509Data:
		return (void*)soap_instantiate__ds__X509Data(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ds__DSAKeyValue:
		return (void*)soap_instantiate__ds__DSAKeyValue(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ds__RSAKeyValue:
		return (void*)soap_instantiate__ds__RSAKeyValue(soap, -1, type, arrayType, n);
	case SOAP_TYPE__xenc__CipherData:
		return (void*)soap_instantiate__xenc__CipherData(soap, -1, type, arrayType, n);
	case SOAP_TYPE__xenc__CipherReference:
		return (void*)soap_instantiate__xenc__CipherReference(soap, -1, type, arrayType, n);
	case SOAP_TYPE__xenc__AgreementMethod:
		return (void*)soap_instantiate__xenc__AgreementMethod(soap, -1, type, arrayType, n);
	case SOAP_TYPE__xenc__EncryptionProperties:
		return (void*)soap_instantiate__xenc__EncryptionProperties(soap, -1, type, arrayType, n);
	case SOAP_TYPE__xenc__EncryptionProperty:
		return (void*)soap_instantiate__xenc__EncryptionProperty(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__Assertion:
		return (void*)soap_instantiate__saml1__Assertion(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__Conditions:
		return (void*)soap_instantiate__saml1__Conditions(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__Condition:
		return (void*)soap_instantiate__saml1__Condition(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__AudienceRestrictionCondition:
		return (void*)soap_instantiate__saml1__AudienceRestrictionCondition(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__DoNotCacheCondition:
		return (void*)soap_instantiate__saml1__DoNotCacheCondition(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__Advice:
		return (void*)soap_instantiate__saml1__Advice(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__Statement:
		return (void*)soap_instantiate__saml1__Statement(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__SubjectStatement:
		return (void*)soap_instantiate__saml1__SubjectStatement(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__Subject:
		return (void*)soap_instantiate__saml1__Subject(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__NameIdentifier:
		return (void*)soap_instantiate__saml1__NameIdentifier(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__SubjectConfirmation:
		return (void*)soap_instantiate__saml1__SubjectConfirmation(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__AuthenticationStatement:
		return (void*)soap_instantiate__saml1__AuthenticationStatement(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__SubjectLocality:
		return (void*)soap_instantiate__saml1__SubjectLocality(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__AuthorityBinding:
		return (void*)soap_instantiate__saml1__AuthorityBinding(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__AuthorizationDecisionStatement:
		return (void*)soap_instantiate__saml1__AuthorizationDecisionStatement(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__Action:
		return (void*)soap_instantiate__saml1__Action(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__Evidence:
		return (void*)soap_instantiate__saml1__Evidence(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__AttributeStatement:
		return (void*)soap_instantiate__saml1__AttributeStatement(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__AttributeDesignator:
		return (void*)soap_instantiate__saml1__AttributeDesignator(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml1__Attribute:
		return (void*)soap_instantiate__saml1__Attribute(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__BaseID:
		return (void*)soap_instantiate__saml2__BaseID(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__NameID:
		return (void*)soap_instantiate__saml2__NameID(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__EncryptedID:
		return (void*)soap_instantiate__saml2__EncryptedID(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__Issuer:
		return (void*)soap_instantiate__saml2__Issuer(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__Assertion:
		return (void*)soap_instantiate__saml2__Assertion(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__Subject:
		return (void*)soap_instantiate__saml2__Subject(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__SubjectConfirmation:
		return (void*)soap_instantiate__saml2__SubjectConfirmation(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__SubjectConfirmationData:
		return (void*)soap_instantiate__saml2__SubjectConfirmationData(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__Conditions:
		return (void*)soap_instantiate__saml2__Conditions(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__Condition:
		return (void*)soap_instantiate__saml2__Condition(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__AudienceRestriction:
		return (void*)soap_instantiate__saml2__AudienceRestriction(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__OneTimeUse:
		return (void*)soap_instantiate__saml2__OneTimeUse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__ProxyRestriction:
		return (void*)soap_instantiate__saml2__ProxyRestriction(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__Advice:
		return (void*)soap_instantiate__saml2__Advice(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__EncryptedAssertion:
		return (void*)soap_instantiate__saml2__EncryptedAssertion(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__Statement:
		return (void*)soap_instantiate__saml2__Statement(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__AuthnStatement:
		return (void*)soap_instantiate__saml2__AuthnStatement(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__SubjectLocality:
		return (void*)soap_instantiate__saml2__SubjectLocality(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__AuthnContext:
		return (void*)soap_instantiate__saml2__AuthnContext(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__AuthzDecisionStatement:
		return (void*)soap_instantiate__saml2__AuthzDecisionStatement(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__Action:
		return (void*)soap_instantiate__saml2__Action(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__Evidence:
		return (void*)soap_instantiate__saml2__Evidence(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__AttributeStatement:
		return (void*)soap_instantiate__saml2__AttributeStatement(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__Attribute:
		return (void*)soap_instantiate__saml2__Attribute(soap, -1, type, arrayType, n);
	case SOAP_TYPE__saml2__EncryptedAttribute:
		return (void*)soap_instantiate__saml2__EncryptedAttribute(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist *p)
{	(void)soap; /* appease -Wall -Werror */
	if (!p->ptr)
		return SOAP_OK;
	switch (p->type)
	{
	case SOAP_TYPE__wsu__Timestamp:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct _wsu__Timestamp*>(p->ptr), struct _wsu__Timestamp);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct _wsu__Timestamp*>(p->ptr), struct _wsu__Timestamp);
		break;
	case SOAP_TYPE_wsse__EncodedString:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct wsse__EncodedString*>(p->ptr), struct wsse__EncodedString);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct wsse__EncodedString*>(p->ptr), struct wsse__EncodedString);
		break;
	case SOAP_TYPE__wsse__UsernameToken:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct _wsse__UsernameToken*>(p->ptr), struct _wsse__UsernameToken);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct _wsse__UsernameToken*>(p->ptr), struct _wsse__UsernameToken);
		break;
	case SOAP_TYPE__wsse__BinarySecurityToken:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct _wsse__BinarySecurityToken*>(p->ptr), struct _wsse__BinarySecurityToken);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct _wsse__BinarySecurityToken*>(p->ptr), struct _wsse__BinarySecurityToken);
		break;
	case SOAP_TYPE__wsse__Reference:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct _wsse__Reference*>(p->ptr), struct _wsse__Reference);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct _wsse__Reference*>(p->ptr), struct _wsse__Reference);
		break;
	case SOAP_TYPE__wsse__Embedded:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct _wsse__Embedded*>(p->ptr), struct _wsse__Embedded);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct _wsse__Embedded*>(p->ptr), struct _wsse__Embedded);
		break;
	case SOAP_TYPE__wsse__KeyIdentifier:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct _wsse__KeyIdentifier*>(p->ptr), struct _wsse__KeyIdentifier);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct _wsse__KeyIdentifier*>(p->ptr), struct _wsse__KeyIdentifier);
		break;
	case SOAP_TYPE__wsse__SecurityTokenReference:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct _wsse__SecurityTokenReference*>(p->ptr), struct _wsse__SecurityTokenReference);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct _wsse__SecurityTokenReference*>(p->ptr), struct _wsse__SecurityTokenReference);
		break;
	case SOAP_TYPE_ds__SignatureType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__SignatureType*>(p->ptr), struct ds__SignatureType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__SignatureType*>(p->ptr), struct ds__SignatureType);
		break;
	case SOAP_TYPE__c14n__InclusiveNamespaces:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct _c14n__InclusiveNamespaces*>(p->ptr), struct _c14n__InclusiveNamespaces);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct _c14n__InclusiveNamespaces*>(p->ptr), struct _c14n__InclusiveNamespaces);
		break;
	case SOAP_TYPE_ds__TransformType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__TransformType*>(p->ptr), struct ds__TransformType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__TransformType*>(p->ptr), struct ds__TransformType);
		break;
	case SOAP_TYPE_ds__KeyInfoType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__KeyInfoType*>(p->ptr), struct ds__KeyInfoType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__KeyInfoType*>(p->ptr), struct ds__KeyInfoType);
		break;
	case SOAP_TYPE_ds__SignedInfoType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__SignedInfoType*>(p->ptr), struct ds__SignedInfoType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__SignedInfoType*>(p->ptr), struct ds__SignedInfoType);
		break;
	case SOAP_TYPE_ds__CanonicalizationMethodType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__CanonicalizationMethodType*>(p->ptr), struct ds__CanonicalizationMethodType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__CanonicalizationMethodType*>(p->ptr), struct ds__CanonicalizationMethodType);
		break;
	case SOAP_TYPE_ds__SignatureMethodType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__SignatureMethodType*>(p->ptr), struct ds__SignatureMethodType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__SignatureMethodType*>(p->ptr), struct ds__SignatureMethodType);
		break;
	case SOAP_TYPE_ds__ReferenceType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__ReferenceType*>(p->ptr), struct ds__ReferenceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__ReferenceType*>(p->ptr), struct ds__ReferenceType);
		break;
	case SOAP_TYPE_ds__TransformsType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__TransformsType*>(p->ptr), struct ds__TransformsType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__TransformsType*>(p->ptr), struct ds__TransformsType);
		break;
	case SOAP_TYPE_ds__DigestMethodType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__DigestMethodType*>(p->ptr), struct ds__DigestMethodType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__DigestMethodType*>(p->ptr), struct ds__DigestMethodType);
		break;
	case SOAP_TYPE_ds__KeyValueType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__KeyValueType*>(p->ptr), struct ds__KeyValueType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__KeyValueType*>(p->ptr), struct ds__KeyValueType);
		break;
	case SOAP_TYPE_ds__RetrievalMethodType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__RetrievalMethodType*>(p->ptr), struct ds__RetrievalMethodType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__RetrievalMethodType*>(p->ptr), struct ds__RetrievalMethodType);
		break;
	case SOAP_TYPE___ds__X509DataType_sequence:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ds__X509DataType_sequence*>(p->ptr), struct __ds__X509DataType_sequence);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ds__X509DataType_sequence*>(p->ptr), struct __ds__X509DataType_sequence);
		break;
	case SOAP_TYPE_ds__X509DataType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__X509DataType*>(p->ptr), struct ds__X509DataType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__X509DataType*>(p->ptr), struct ds__X509DataType);
		break;
	case SOAP_TYPE_ds__X509IssuerSerialType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__X509IssuerSerialType*>(p->ptr), struct ds__X509IssuerSerialType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__X509IssuerSerialType*>(p->ptr), struct ds__X509IssuerSerialType);
		break;
	case SOAP_TYPE___ds__DSAKeyValueType_sequence:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ds__DSAKeyValueType_sequence*>(p->ptr), struct __ds__DSAKeyValueType_sequence);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ds__DSAKeyValueType_sequence*>(p->ptr), struct __ds__DSAKeyValueType_sequence);
		break;
	case SOAP_TYPE___ds__DSAKeyValueType_sequence_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ds__DSAKeyValueType_sequence_*>(p->ptr), struct __ds__DSAKeyValueType_sequence_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ds__DSAKeyValueType_sequence_*>(p->ptr), struct __ds__DSAKeyValueType_sequence_);
		break;
	case SOAP_TYPE_ds__DSAKeyValueType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__DSAKeyValueType*>(p->ptr), struct ds__DSAKeyValueType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__DSAKeyValueType*>(p->ptr), struct ds__DSAKeyValueType);
		break;
	case SOAP_TYPE_ds__RSAKeyValueType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__RSAKeyValueType*>(p->ptr), struct ds__RSAKeyValueType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__RSAKeyValueType*>(p->ptr), struct ds__RSAKeyValueType);
		break;
	case SOAP_TYPE_xenc__EncryptionPropertyType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct xenc__EncryptionPropertyType*>(p->ptr), struct xenc__EncryptionPropertyType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct xenc__EncryptionPropertyType*>(p->ptr), struct xenc__EncryptionPropertyType);
		break;
	case SOAP_TYPE_xenc__EncryptedType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct xenc__EncryptedType*>(p->ptr), struct xenc__EncryptedType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct xenc__EncryptedType*>(p->ptr), struct xenc__EncryptedType);
		break;
	case SOAP_TYPE_xenc__EncryptionMethodType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct xenc__EncryptionMethodType*>(p->ptr), struct xenc__EncryptionMethodType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct xenc__EncryptionMethodType*>(p->ptr), struct xenc__EncryptionMethodType);
		break;
	case SOAP_TYPE_xenc__CipherDataType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct xenc__CipherDataType*>(p->ptr), struct xenc__CipherDataType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct xenc__CipherDataType*>(p->ptr), struct xenc__CipherDataType);
		break;
	case SOAP_TYPE_xenc__CipherReferenceType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct xenc__CipherReferenceType*>(p->ptr), struct xenc__CipherReferenceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct xenc__CipherReferenceType*>(p->ptr), struct xenc__CipherReferenceType);
		break;
	case SOAP_TYPE_xenc__TransformsType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct xenc__TransformsType*>(p->ptr), struct xenc__TransformsType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct xenc__TransformsType*>(p->ptr), struct xenc__TransformsType);
		break;
	case SOAP_TYPE_xenc__AgreementMethodType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct xenc__AgreementMethodType*>(p->ptr), struct xenc__AgreementMethodType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct xenc__AgreementMethodType*>(p->ptr), struct xenc__AgreementMethodType);
		break;
	case SOAP_TYPE_xenc__ReferenceType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct xenc__ReferenceType*>(p->ptr), struct xenc__ReferenceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct xenc__ReferenceType*>(p->ptr), struct xenc__ReferenceType);
		break;
	case SOAP_TYPE_xenc__EncryptionPropertiesType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct xenc__EncryptionPropertiesType*>(p->ptr), struct xenc__EncryptionPropertiesType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct xenc__EncryptionPropertiesType*>(p->ptr), struct xenc__EncryptionPropertiesType);
		break;
	case SOAP_TYPE___xenc__union_ReferenceList:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __xenc__union_ReferenceList*>(p->ptr), struct __xenc__union_ReferenceList);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __xenc__union_ReferenceList*>(p->ptr), struct __xenc__union_ReferenceList);
		break;
	case SOAP_TYPE__xenc__ReferenceList:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct _xenc__ReferenceList*>(p->ptr), struct _xenc__ReferenceList);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct _xenc__ReferenceList*>(p->ptr), struct _xenc__ReferenceList);
		break;
	case SOAP_TYPE_xenc__EncryptedDataType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct xenc__EncryptedDataType*>(p->ptr), struct xenc__EncryptedDataType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct xenc__EncryptedDataType*>(p->ptr), struct xenc__EncryptedDataType);
		break;
	case SOAP_TYPE_xenc__EncryptedKeyType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct xenc__EncryptedKeyType*>(p->ptr), struct xenc__EncryptedKeyType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct xenc__EncryptedKeyType*>(p->ptr), struct xenc__EncryptedKeyType);
		break;
	case SOAP_TYPE_wsc__SecurityContextTokenType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct wsc__SecurityContextTokenType*>(p->ptr), struct wsc__SecurityContextTokenType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct wsc__SecurityContextTokenType*>(p->ptr), struct wsc__SecurityContextTokenType);
		break;
	case SOAP_TYPE___wsc__DerivedKeyTokenType_sequence:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __wsc__DerivedKeyTokenType_sequence*>(p->ptr), struct __wsc__DerivedKeyTokenType_sequence);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __wsc__DerivedKeyTokenType_sequence*>(p->ptr), struct __wsc__DerivedKeyTokenType_sequence);
		break;
	case SOAP_TYPE_wsc__DerivedKeyTokenType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct wsc__DerivedKeyTokenType*>(p->ptr), struct wsc__DerivedKeyTokenType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct wsc__DerivedKeyTokenType*>(p->ptr), struct wsc__DerivedKeyTokenType);
		break;
	case SOAP_TYPE_wsc__PropertiesType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct wsc__PropertiesType*>(p->ptr), struct wsc__PropertiesType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct wsc__PropertiesType*>(p->ptr), struct wsc__PropertiesType);
		break;
	case SOAP_TYPE___saml1__union_AssertionType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __saml1__union_AssertionType*>(p->ptr), struct __saml1__union_AssertionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __saml1__union_AssertionType*>(p->ptr), struct __saml1__union_AssertionType);
		break;
	case SOAP_TYPE_saml1__AssertionType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AssertionType*>(p->ptr), struct saml1__AssertionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AssertionType*>(p->ptr), struct saml1__AssertionType);
		break;
	case SOAP_TYPE___saml1__union_ConditionsType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __saml1__union_ConditionsType*>(p->ptr), struct __saml1__union_ConditionsType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __saml1__union_ConditionsType*>(p->ptr), struct __saml1__union_ConditionsType);
		break;
	case SOAP_TYPE_saml1__ConditionsType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__ConditionsType*>(p->ptr), struct saml1__ConditionsType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__ConditionsType*>(p->ptr), struct saml1__ConditionsType);
		break;
	case SOAP_TYPE_saml1__ConditionAbstractType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__ConditionAbstractType*>(p->ptr), struct saml1__ConditionAbstractType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__ConditionAbstractType*>(p->ptr), struct saml1__ConditionAbstractType);
		break;
	case SOAP_TYPE___saml1__union_AdviceType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __saml1__union_AdviceType*>(p->ptr), struct __saml1__union_AdviceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __saml1__union_AdviceType*>(p->ptr), struct __saml1__union_AdviceType);
		break;
	case SOAP_TYPE_saml1__AdviceType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AdviceType*>(p->ptr), struct saml1__AdviceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AdviceType*>(p->ptr), struct saml1__AdviceType);
		break;
	case SOAP_TYPE_saml1__StatementAbstractType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__StatementAbstractType*>(p->ptr), struct saml1__StatementAbstractType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__StatementAbstractType*>(p->ptr), struct saml1__StatementAbstractType);
		break;
	case SOAP_TYPE_saml1__SubjectType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__SubjectType*>(p->ptr), struct saml1__SubjectType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__SubjectType*>(p->ptr), struct saml1__SubjectType);
		break;
	case SOAP_TYPE_saml1__SubjectConfirmationType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__SubjectConfirmationType*>(p->ptr), struct saml1__SubjectConfirmationType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__SubjectConfirmationType*>(p->ptr), struct saml1__SubjectConfirmationType);
		break;
	case SOAP_TYPE_saml1__SubjectLocalityType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__SubjectLocalityType*>(p->ptr), struct saml1__SubjectLocalityType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__SubjectLocalityType*>(p->ptr), struct saml1__SubjectLocalityType);
		break;
	case SOAP_TYPE_saml1__AuthorityBindingType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AuthorityBindingType*>(p->ptr), struct saml1__AuthorityBindingType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AuthorityBindingType*>(p->ptr), struct saml1__AuthorityBindingType);
		break;
	case SOAP_TYPE___saml1__union_EvidenceType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __saml1__union_EvidenceType*>(p->ptr), struct __saml1__union_EvidenceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __saml1__union_EvidenceType*>(p->ptr), struct __saml1__union_EvidenceType);
		break;
	case SOAP_TYPE_saml1__EvidenceType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__EvidenceType*>(p->ptr), struct saml1__EvidenceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__EvidenceType*>(p->ptr), struct saml1__EvidenceType);
		break;
	case SOAP_TYPE_saml1__AttributeDesignatorType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AttributeDesignatorType*>(p->ptr), struct saml1__AttributeDesignatorType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AttributeDesignatorType*>(p->ptr), struct saml1__AttributeDesignatorType);
		break;
	case SOAP_TYPE_saml1__AudienceRestrictionConditionType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AudienceRestrictionConditionType*>(p->ptr), struct saml1__AudienceRestrictionConditionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AudienceRestrictionConditionType*>(p->ptr), struct saml1__AudienceRestrictionConditionType);
		break;
	case SOAP_TYPE_saml1__DoNotCacheConditionType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__DoNotCacheConditionType*>(p->ptr), struct saml1__DoNotCacheConditionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__DoNotCacheConditionType*>(p->ptr), struct saml1__DoNotCacheConditionType);
		break;
	case SOAP_TYPE_saml1__SubjectStatementAbstractType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__SubjectStatementAbstractType*>(p->ptr), struct saml1__SubjectStatementAbstractType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__SubjectStatementAbstractType*>(p->ptr), struct saml1__SubjectStatementAbstractType);
		break;
	case SOAP_TYPE_saml1__NameIdentifierType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__NameIdentifierType*>(p->ptr), struct saml1__NameIdentifierType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__NameIdentifierType*>(p->ptr), struct saml1__NameIdentifierType);
		break;
	case SOAP_TYPE_saml1__ActionType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__ActionType*>(p->ptr), struct saml1__ActionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__ActionType*>(p->ptr), struct saml1__ActionType);
		break;
	case SOAP_TYPE_saml1__AttributeType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AttributeType*>(p->ptr), struct saml1__AttributeType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AttributeType*>(p->ptr), struct saml1__AttributeType);
		break;
	case SOAP_TYPE_saml1__AuthenticationStatementType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AuthenticationStatementType*>(p->ptr), struct saml1__AuthenticationStatementType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AuthenticationStatementType*>(p->ptr), struct saml1__AuthenticationStatementType);
		break;
	case SOAP_TYPE_saml1__AuthorizationDecisionStatementType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AuthorizationDecisionStatementType*>(p->ptr), struct saml1__AuthorizationDecisionStatementType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AuthorizationDecisionStatementType*>(p->ptr), struct saml1__AuthorizationDecisionStatementType);
		break;
	case SOAP_TYPE_saml1__AttributeStatementType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AttributeStatementType*>(p->ptr), struct saml1__AttributeStatementType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AttributeStatementType*>(p->ptr), struct saml1__AttributeStatementType);
		break;
	case SOAP_TYPE_saml2__BaseIDAbstractType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__BaseIDAbstractType*>(p->ptr), struct saml2__BaseIDAbstractType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__BaseIDAbstractType*>(p->ptr), struct saml2__BaseIDAbstractType);
		break;
	case SOAP_TYPE_saml2__EncryptedElementType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__EncryptedElementType*>(p->ptr), struct saml2__EncryptedElementType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__EncryptedElementType*>(p->ptr), struct saml2__EncryptedElementType);
		break;
	case SOAP_TYPE___saml2__union_AssertionType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __saml2__union_AssertionType*>(p->ptr), struct __saml2__union_AssertionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __saml2__union_AssertionType*>(p->ptr), struct __saml2__union_AssertionType);
		break;
	case SOAP_TYPE_saml2__AssertionType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__AssertionType*>(p->ptr), struct saml2__AssertionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__AssertionType*>(p->ptr), struct saml2__AssertionType);
		break;
	case SOAP_TYPE_saml2__SubjectType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__SubjectType*>(p->ptr), struct saml2__SubjectType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__SubjectType*>(p->ptr), struct saml2__SubjectType);
		break;
	case SOAP_TYPE_saml2__SubjectConfirmationType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__SubjectConfirmationType*>(p->ptr), struct saml2__SubjectConfirmationType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__SubjectConfirmationType*>(p->ptr), struct saml2__SubjectConfirmationType);
		break;
	case SOAP_TYPE___saml2__union_ConditionsType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __saml2__union_ConditionsType*>(p->ptr), struct __saml2__union_ConditionsType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __saml2__union_ConditionsType*>(p->ptr), struct __saml2__union_ConditionsType);
		break;
	case SOAP_TYPE_saml2__ConditionsType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__ConditionsType*>(p->ptr), struct saml2__ConditionsType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__ConditionsType*>(p->ptr), struct saml2__ConditionsType);
		break;
	case SOAP_TYPE_saml2__ConditionAbstractType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__ConditionAbstractType*>(p->ptr), struct saml2__ConditionAbstractType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__ConditionAbstractType*>(p->ptr), struct saml2__ConditionAbstractType);
		break;
	case SOAP_TYPE___saml2__union_AdviceType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __saml2__union_AdviceType*>(p->ptr), struct __saml2__union_AdviceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __saml2__union_AdviceType*>(p->ptr), struct __saml2__union_AdviceType);
		break;
	case SOAP_TYPE_saml2__AdviceType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__AdviceType*>(p->ptr), struct saml2__AdviceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__AdviceType*>(p->ptr), struct saml2__AdviceType);
		break;
	case SOAP_TYPE_saml2__StatementAbstractType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__StatementAbstractType*>(p->ptr), struct saml2__StatementAbstractType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__StatementAbstractType*>(p->ptr), struct saml2__StatementAbstractType);
		break;
	case SOAP_TYPE_saml2__SubjectLocalityType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__SubjectLocalityType*>(p->ptr), struct saml2__SubjectLocalityType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__SubjectLocalityType*>(p->ptr), struct saml2__SubjectLocalityType);
		break;
	case SOAP_TYPE_saml2__AuthnContextType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__AuthnContextType*>(p->ptr), struct saml2__AuthnContextType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__AuthnContextType*>(p->ptr), struct saml2__AuthnContextType);
		break;
	case SOAP_TYPE___saml2__union_EvidenceType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __saml2__union_EvidenceType*>(p->ptr), struct __saml2__union_EvidenceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __saml2__union_EvidenceType*>(p->ptr), struct __saml2__union_EvidenceType);
		break;
	case SOAP_TYPE_saml2__EvidenceType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__EvidenceType*>(p->ptr), struct saml2__EvidenceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__EvidenceType*>(p->ptr), struct saml2__EvidenceType);
		break;
	case SOAP_TYPE_saml2__AttributeType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__AttributeType*>(p->ptr), struct saml2__AttributeType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__AttributeType*>(p->ptr), struct saml2__AttributeType);
		break;
	case SOAP_TYPE_saml2__NameIDType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__NameIDType*>(p->ptr), struct saml2__NameIDType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__NameIDType*>(p->ptr), struct saml2__NameIDType);
		break;
	case SOAP_TYPE_saml2__SubjectConfirmationDataType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__SubjectConfirmationDataType*>(p->ptr), struct saml2__SubjectConfirmationDataType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__SubjectConfirmationDataType*>(p->ptr), struct saml2__SubjectConfirmationDataType);
		break;
	case SOAP_TYPE_saml2__AudienceRestrictionType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__AudienceRestrictionType*>(p->ptr), struct saml2__AudienceRestrictionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__AudienceRestrictionType*>(p->ptr), struct saml2__AudienceRestrictionType);
		break;
	case SOAP_TYPE_saml2__OneTimeUseType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__OneTimeUseType*>(p->ptr), struct saml2__OneTimeUseType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__OneTimeUseType*>(p->ptr), struct saml2__OneTimeUseType);
		break;
	case SOAP_TYPE_saml2__ProxyRestrictionType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__ProxyRestrictionType*>(p->ptr), struct saml2__ProxyRestrictionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__ProxyRestrictionType*>(p->ptr), struct saml2__ProxyRestrictionType);
		break;
	case SOAP_TYPE_saml2__AuthnStatementType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__AuthnStatementType*>(p->ptr), struct saml2__AuthnStatementType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__AuthnStatementType*>(p->ptr), struct saml2__AuthnStatementType);
		break;
	case SOAP_TYPE_saml2__AuthzDecisionStatementType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__AuthzDecisionStatementType*>(p->ptr), struct saml2__AuthzDecisionStatementType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__AuthzDecisionStatementType*>(p->ptr), struct saml2__AuthzDecisionStatementType);
		break;
	case SOAP_TYPE_saml2__ActionType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__ActionType*>(p->ptr), struct saml2__ActionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__ActionType*>(p->ptr), struct saml2__ActionType);
		break;
	case SOAP_TYPE___saml2__union_AttributeStatementType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __saml2__union_AttributeStatementType*>(p->ptr), struct __saml2__union_AttributeStatementType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __saml2__union_AttributeStatementType*>(p->ptr), struct __saml2__union_AttributeStatementType);
		break;
	case SOAP_TYPE_saml2__AttributeStatementType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__AttributeStatementType*>(p->ptr), struct saml2__AttributeStatementType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__AttributeStatementType*>(p->ptr), struct saml2__AttributeStatementType);
		break;
	case SOAP_TYPE_saml2__KeyInfoConfirmationDataType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__KeyInfoConfirmationDataType*>(p->ptr), struct saml2__KeyInfoConfirmationDataType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__KeyInfoConfirmationDataType*>(p->ptr), struct saml2__KeyInfoConfirmationDataType);
		break;
	case SOAP_TYPE__wsse__Security:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct _wsse__Security*>(p->ptr), struct _wsse__Security);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct _wsse__Security*>(p->ptr), struct _wsse__Security);
		break;
	case SOAP_TYPE__wsse__Password:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct _wsse__Password*>(p->ptr), struct _wsse__Password);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct _wsse__Password*>(p->ptr), struct _wsse__Password);
		break;
	case SOAP_TYPE_xsd__base64Binary:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__base64Binary*>(p->ptr), xsd__base64Binary);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__base64Binary*>(p->ptr), xsd__base64Binary);
		break;
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_ns1__sendSummary:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__sendSummary*>(p->ptr), ns1__sendSummary);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__sendSummary*>(p->ptr), ns1__sendSummary);
		break;
	case SOAP_TYPE_ns1__sendSummaryResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__sendSummaryResponse*>(p->ptr), ns1__sendSummaryResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__sendSummaryResponse*>(p->ptr), ns1__sendSummaryResponse);
		break;
	case SOAP_TYPE_ns1__getStatus:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__getStatus*>(p->ptr), ns1__getStatus);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__getStatus*>(p->ptr), ns1__getStatus);
		break;
	case SOAP_TYPE_ns1__getStatusResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__getStatusResponse*>(p->ptr), ns1__getStatusResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__getStatusResponse*>(p->ptr), ns1__getStatusResponse);
		break;
	case SOAP_TYPE_ns1__statusResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__statusResponse*>(p->ptr), ns1__statusResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__statusResponse*>(p->ptr), ns1__statusResponse);
		break;
	case SOAP_TYPE_ns1__sendPack:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__sendPack*>(p->ptr), ns1__sendPack);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__sendPack*>(p->ptr), ns1__sendPack);
		break;
	case SOAP_TYPE_ns1__sendPackResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__sendPackResponse*>(p->ptr), ns1__sendPackResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__sendPackResponse*>(p->ptr), ns1__sendPackResponse);
		break;
	case SOAP_TYPE_ns1__sendBill:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__sendBill*>(p->ptr), ns1__sendBill);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__sendBill*>(p->ptr), ns1__sendBill);
		break;
	case SOAP_TYPE_ns1__sendBillResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<ns1__sendBillResponse*>(p->ptr), ns1__sendBillResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<ns1__sendBillResponse*>(p->ptr), ns1__sendBillResponse);
		break;
	case SOAP_TYPE___sunat__getStatus:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __sunat__getStatus*>(p->ptr), struct __sunat__getStatus);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __sunat__getStatus*>(p->ptr), struct __sunat__getStatus);
		break;
	case SOAP_TYPE___sunat__sendBill:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __sunat__sendBill*>(p->ptr), struct __sunat__sendBill);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __sunat__sendBill*>(p->ptr), struct __sunat__sendBill);
		break;
	case SOAP_TYPE___sunat__sendPack:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __sunat__sendPack*>(p->ptr), struct __sunat__sendPack);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __sunat__sendPack*>(p->ptr), struct __sunat__sendPack);
		break;
	case SOAP_TYPE___sunat__sendSummary:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __sunat__sendSummary*>(p->ptr), struct __sunat__sendSummary);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __sunat__sendSummary*>(p->ptr), struct __sunat__sendSummary);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		break;
#endif
	case SOAP_TYPE__ds__Signature:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__SignatureType*>(p->ptr), struct ds__SignatureType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__SignatureType*>(p->ptr), struct ds__SignatureType);
		break;
	case SOAP_TYPE__ds__Transform:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__TransformType*>(p->ptr), struct ds__TransformType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__TransformType*>(p->ptr), struct ds__TransformType);
		break;
	case SOAP_TYPE__ds__KeyInfo:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__KeyInfoType*>(p->ptr), struct ds__KeyInfoType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__KeyInfoType*>(p->ptr), struct ds__KeyInfoType);
		break;
	case SOAP_TYPE__ds__SignedInfo:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__SignedInfoType*>(p->ptr), struct ds__SignedInfoType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__SignedInfoType*>(p->ptr), struct ds__SignedInfoType);
		break;
	case SOAP_TYPE__ds__CanonicalizationMethod:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__CanonicalizationMethodType*>(p->ptr), struct ds__CanonicalizationMethodType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__CanonicalizationMethodType*>(p->ptr), struct ds__CanonicalizationMethodType);
		break;
	case SOAP_TYPE__ds__SignatureMethod:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__SignatureMethodType*>(p->ptr), struct ds__SignatureMethodType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__SignatureMethodType*>(p->ptr), struct ds__SignatureMethodType);
		break;
	case SOAP_TYPE__ds__Reference:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__ReferenceType*>(p->ptr), struct ds__ReferenceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__ReferenceType*>(p->ptr), struct ds__ReferenceType);
		break;
	case SOAP_TYPE__ds__Transforms:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__TransformsType*>(p->ptr), struct ds__TransformsType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__TransformsType*>(p->ptr), struct ds__TransformsType);
		break;
	case SOAP_TYPE__ds__DigestMethod:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__DigestMethodType*>(p->ptr), struct ds__DigestMethodType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__DigestMethodType*>(p->ptr), struct ds__DigestMethodType);
		break;
	case SOAP_TYPE__ds__KeyValue:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__KeyValueType*>(p->ptr), struct ds__KeyValueType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__KeyValueType*>(p->ptr), struct ds__KeyValueType);
		break;
	case SOAP_TYPE__ds__RetrievalMethod:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__RetrievalMethodType*>(p->ptr), struct ds__RetrievalMethodType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__RetrievalMethodType*>(p->ptr), struct ds__RetrievalMethodType);
		break;
	case SOAP_TYPE__ds__X509Data:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__X509DataType*>(p->ptr), struct ds__X509DataType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__X509DataType*>(p->ptr), struct ds__X509DataType);
		break;
	case SOAP_TYPE__ds__DSAKeyValue:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__DSAKeyValueType*>(p->ptr), struct ds__DSAKeyValueType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__DSAKeyValueType*>(p->ptr), struct ds__DSAKeyValueType);
		break;
	case SOAP_TYPE__ds__RSAKeyValue:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ds__RSAKeyValueType*>(p->ptr), struct ds__RSAKeyValueType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ds__RSAKeyValueType*>(p->ptr), struct ds__RSAKeyValueType);
		break;
	case SOAP_TYPE__xenc__CipherData:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct xenc__CipherDataType*>(p->ptr), struct xenc__CipherDataType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct xenc__CipherDataType*>(p->ptr), struct xenc__CipherDataType);
		break;
	case SOAP_TYPE__xenc__CipherReference:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct xenc__CipherReferenceType*>(p->ptr), struct xenc__CipherReferenceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct xenc__CipherReferenceType*>(p->ptr), struct xenc__CipherReferenceType);
		break;
	case SOAP_TYPE__xenc__AgreementMethod:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct xenc__AgreementMethodType*>(p->ptr), struct xenc__AgreementMethodType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct xenc__AgreementMethodType*>(p->ptr), struct xenc__AgreementMethodType);
		break;
	case SOAP_TYPE__xenc__EncryptionProperties:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct xenc__EncryptionPropertiesType*>(p->ptr), struct xenc__EncryptionPropertiesType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct xenc__EncryptionPropertiesType*>(p->ptr), struct xenc__EncryptionPropertiesType);
		break;
	case SOAP_TYPE__xenc__EncryptionProperty:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct xenc__EncryptionPropertyType*>(p->ptr), struct xenc__EncryptionPropertyType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct xenc__EncryptionPropertyType*>(p->ptr), struct xenc__EncryptionPropertyType);
		break;
	case SOAP_TYPE__saml1__Assertion:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AssertionType*>(p->ptr), struct saml1__AssertionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AssertionType*>(p->ptr), struct saml1__AssertionType);
		break;
	case SOAP_TYPE__saml1__Conditions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__ConditionsType*>(p->ptr), struct saml1__ConditionsType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__ConditionsType*>(p->ptr), struct saml1__ConditionsType);
		break;
	case SOAP_TYPE__saml1__Condition:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__ConditionAbstractType*>(p->ptr), struct saml1__ConditionAbstractType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__ConditionAbstractType*>(p->ptr), struct saml1__ConditionAbstractType);
		break;
	case SOAP_TYPE__saml1__AudienceRestrictionCondition:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AudienceRestrictionConditionType*>(p->ptr), struct saml1__AudienceRestrictionConditionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AudienceRestrictionConditionType*>(p->ptr), struct saml1__AudienceRestrictionConditionType);
		break;
	case SOAP_TYPE__saml1__DoNotCacheCondition:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__DoNotCacheConditionType*>(p->ptr), struct saml1__DoNotCacheConditionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__DoNotCacheConditionType*>(p->ptr), struct saml1__DoNotCacheConditionType);
		break;
	case SOAP_TYPE__saml1__Advice:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AdviceType*>(p->ptr), struct saml1__AdviceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AdviceType*>(p->ptr), struct saml1__AdviceType);
		break;
	case SOAP_TYPE__saml1__Statement:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__StatementAbstractType*>(p->ptr), struct saml1__StatementAbstractType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__StatementAbstractType*>(p->ptr), struct saml1__StatementAbstractType);
		break;
	case SOAP_TYPE__saml1__SubjectStatement:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__SubjectStatementAbstractType*>(p->ptr), struct saml1__SubjectStatementAbstractType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__SubjectStatementAbstractType*>(p->ptr), struct saml1__SubjectStatementAbstractType);
		break;
	case SOAP_TYPE__saml1__Subject:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__SubjectType*>(p->ptr), struct saml1__SubjectType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__SubjectType*>(p->ptr), struct saml1__SubjectType);
		break;
	case SOAP_TYPE__saml1__NameIdentifier:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__NameIdentifierType*>(p->ptr), struct saml1__NameIdentifierType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__NameIdentifierType*>(p->ptr), struct saml1__NameIdentifierType);
		break;
	case SOAP_TYPE__saml1__SubjectConfirmation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__SubjectConfirmationType*>(p->ptr), struct saml1__SubjectConfirmationType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__SubjectConfirmationType*>(p->ptr), struct saml1__SubjectConfirmationType);
		break;
	case SOAP_TYPE__saml1__AuthenticationStatement:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AuthenticationStatementType*>(p->ptr), struct saml1__AuthenticationStatementType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AuthenticationStatementType*>(p->ptr), struct saml1__AuthenticationStatementType);
		break;
	case SOAP_TYPE__saml1__SubjectLocality:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__SubjectLocalityType*>(p->ptr), struct saml1__SubjectLocalityType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__SubjectLocalityType*>(p->ptr), struct saml1__SubjectLocalityType);
		break;
	case SOAP_TYPE__saml1__AuthorityBinding:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AuthorityBindingType*>(p->ptr), struct saml1__AuthorityBindingType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AuthorityBindingType*>(p->ptr), struct saml1__AuthorityBindingType);
		break;
	case SOAP_TYPE__saml1__AuthorizationDecisionStatement:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AuthorizationDecisionStatementType*>(p->ptr), struct saml1__AuthorizationDecisionStatementType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AuthorizationDecisionStatementType*>(p->ptr), struct saml1__AuthorizationDecisionStatementType);
		break;
	case SOAP_TYPE__saml1__Action:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__ActionType*>(p->ptr), struct saml1__ActionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__ActionType*>(p->ptr), struct saml1__ActionType);
		break;
	case SOAP_TYPE__saml1__Evidence:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__EvidenceType*>(p->ptr), struct saml1__EvidenceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__EvidenceType*>(p->ptr), struct saml1__EvidenceType);
		break;
	case SOAP_TYPE__saml1__AttributeStatement:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AttributeStatementType*>(p->ptr), struct saml1__AttributeStatementType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AttributeStatementType*>(p->ptr), struct saml1__AttributeStatementType);
		break;
	case SOAP_TYPE__saml1__AttributeDesignator:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AttributeDesignatorType*>(p->ptr), struct saml1__AttributeDesignatorType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AttributeDesignatorType*>(p->ptr), struct saml1__AttributeDesignatorType);
		break;
	case SOAP_TYPE__saml1__Attribute:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml1__AttributeType*>(p->ptr), struct saml1__AttributeType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml1__AttributeType*>(p->ptr), struct saml1__AttributeType);
		break;
	case SOAP_TYPE__saml2__BaseID:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__BaseIDAbstractType*>(p->ptr), struct saml2__BaseIDAbstractType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__BaseIDAbstractType*>(p->ptr), struct saml2__BaseIDAbstractType);
		break;
	case SOAP_TYPE__saml2__NameID:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__NameIDType*>(p->ptr), struct saml2__NameIDType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__NameIDType*>(p->ptr), struct saml2__NameIDType);
		break;
	case SOAP_TYPE__saml2__EncryptedID:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__EncryptedElementType*>(p->ptr), struct saml2__EncryptedElementType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__EncryptedElementType*>(p->ptr), struct saml2__EncryptedElementType);
		break;
	case SOAP_TYPE__saml2__Issuer:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__NameIDType*>(p->ptr), struct saml2__NameIDType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__NameIDType*>(p->ptr), struct saml2__NameIDType);
		break;
	case SOAP_TYPE__saml2__Assertion:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__AssertionType*>(p->ptr), struct saml2__AssertionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__AssertionType*>(p->ptr), struct saml2__AssertionType);
		break;
	case SOAP_TYPE__saml2__Subject:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__SubjectType*>(p->ptr), struct saml2__SubjectType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__SubjectType*>(p->ptr), struct saml2__SubjectType);
		break;
	case SOAP_TYPE__saml2__SubjectConfirmation:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__SubjectConfirmationType*>(p->ptr), struct saml2__SubjectConfirmationType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__SubjectConfirmationType*>(p->ptr), struct saml2__SubjectConfirmationType);
		break;
	case SOAP_TYPE__saml2__SubjectConfirmationData:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__SubjectConfirmationDataType*>(p->ptr), struct saml2__SubjectConfirmationDataType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__SubjectConfirmationDataType*>(p->ptr), struct saml2__SubjectConfirmationDataType);
		break;
	case SOAP_TYPE__saml2__Conditions:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__ConditionsType*>(p->ptr), struct saml2__ConditionsType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__ConditionsType*>(p->ptr), struct saml2__ConditionsType);
		break;
	case SOAP_TYPE__saml2__Condition:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__ConditionAbstractType*>(p->ptr), struct saml2__ConditionAbstractType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__ConditionAbstractType*>(p->ptr), struct saml2__ConditionAbstractType);
		break;
	case SOAP_TYPE__saml2__AudienceRestriction:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__AudienceRestrictionType*>(p->ptr), struct saml2__AudienceRestrictionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__AudienceRestrictionType*>(p->ptr), struct saml2__AudienceRestrictionType);
		break;
	case SOAP_TYPE__saml2__OneTimeUse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__OneTimeUseType*>(p->ptr), struct saml2__OneTimeUseType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__OneTimeUseType*>(p->ptr), struct saml2__OneTimeUseType);
		break;
	case SOAP_TYPE__saml2__ProxyRestriction:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__ProxyRestrictionType*>(p->ptr), struct saml2__ProxyRestrictionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__ProxyRestrictionType*>(p->ptr), struct saml2__ProxyRestrictionType);
		break;
	case SOAP_TYPE__saml2__Advice:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__AdviceType*>(p->ptr), struct saml2__AdviceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__AdviceType*>(p->ptr), struct saml2__AdviceType);
		break;
	case SOAP_TYPE__saml2__EncryptedAssertion:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__EncryptedElementType*>(p->ptr), struct saml2__EncryptedElementType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__EncryptedElementType*>(p->ptr), struct saml2__EncryptedElementType);
		break;
	case SOAP_TYPE__saml2__Statement:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__StatementAbstractType*>(p->ptr), struct saml2__StatementAbstractType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__StatementAbstractType*>(p->ptr), struct saml2__StatementAbstractType);
		break;
	case SOAP_TYPE__saml2__AuthnStatement:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__AuthnStatementType*>(p->ptr), struct saml2__AuthnStatementType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__AuthnStatementType*>(p->ptr), struct saml2__AuthnStatementType);
		break;
	case SOAP_TYPE__saml2__SubjectLocality:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__SubjectLocalityType*>(p->ptr), struct saml2__SubjectLocalityType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__SubjectLocalityType*>(p->ptr), struct saml2__SubjectLocalityType);
		break;
	case SOAP_TYPE__saml2__AuthnContext:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__AuthnContextType*>(p->ptr), struct saml2__AuthnContextType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__AuthnContextType*>(p->ptr), struct saml2__AuthnContextType);
		break;
	case SOAP_TYPE__saml2__AuthzDecisionStatement:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__AuthzDecisionStatementType*>(p->ptr), struct saml2__AuthzDecisionStatementType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__AuthzDecisionStatementType*>(p->ptr), struct saml2__AuthzDecisionStatementType);
		break;
	case SOAP_TYPE__saml2__Action:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__ActionType*>(p->ptr), struct saml2__ActionType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__ActionType*>(p->ptr), struct saml2__ActionType);
		break;
	case SOAP_TYPE__saml2__Evidence:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__EvidenceType*>(p->ptr), struct saml2__EvidenceType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__EvidenceType*>(p->ptr), struct saml2__EvidenceType);
		break;
	case SOAP_TYPE__saml2__AttributeStatement:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__AttributeStatementType*>(p->ptr), struct saml2__AttributeStatementType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__AttributeStatementType*>(p->ptr), struct saml2__AttributeStatementType);
		break;
	case SOAP_TYPE__saml2__Attribute:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__AttributeType*>(p->ptr), struct saml2__AttributeType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__AttributeType*>(p->ptr), struct saml2__AttributeType);
		break;
	case SOAP_TYPE__saml2__EncryptedAttribute:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct saml2__EncryptedElementType*>(p->ptr), struct saml2__EncryptedElementType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct saml2__EncryptedElementType*>(p->ptr), struct saml2__EncryptedElementType);
		break;
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int t, int b)
{	(void)t; (void)b; /* appease -Wall -Werror */
	return 0;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE__wsu__Timestamp:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct _wsu__Timestamp type=%d location=%p object=%p\n", t, p, q));
		*(struct _wsu__Timestamp*)p = *(struct _wsu__Timestamp*)q;
		break;
	case SOAP_TYPE_wsse__EncodedString:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct wsse__EncodedString type=%d location=%p object=%p\n", t, p, q));
		*(struct wsse__EncodedString*)p = *(struct wsse__EncodedString*)q;
		break;
	case SOAP_TYPE__wsse__UsernameToken:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct _wsse__UsernameToken type=%d location=%p object=%p\n", t, p, q));
		*(struct _wsse__UsernameToken*)p = *(struct _wsse__UsernameToken*)q;
		break;
	case SOAP_TYPE__wsse__BinarySecurityToken:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct _wsse__BinarySecurityToken type=%d location=%p object=%p\n", t, p, q));
		*(struct _wsse__BinarySecurityToken*)p = *(struct _wsse__BinarySecurityToken*)q;
		break;
	case SOAP_TYPE__wsse__Reference:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct _wsse__Reference type=%d location=%p object=%p\n", t, p, q));
		*(struct _wsse__Reference*)p = *(struct _wsse__Reference*)q;
		break;
	case SOAP_TYPE__wsse__Embedded:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct _wsse__Embedded type=%d location=%p object=%p\n", t, p, q));
		*(struct _wsse__Embedded*)p = *(struct _wsse__Embedded*)q;
		break;
	case SOAP_TYPE__wsse__KeyIdentifier:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct _wsse__KeyIdentifier type=%d location=%p object=%p\n", t, p, q));
		*(struct _wsse__KeyIdentifier*)p = *(struct _wsse__KeyIdentifier*)q;
		break;
	case SOAP_TYPE__wsse__SecurityTokenReference:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct _wsse__SecurityTokenReference type=%d location=%p object=%p\n", t, p, q));
		*(struct _wsse__SecurityTokenReference*)p = *(struct _wsse__SecurityTokenReference*)q;
		break;
	case SOAP_TYPE_ds__SignatureType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__SignatureType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__SignatureType*)p = *(struct ds__SignatureType*)q;
		break;
	case SOAP_TYPE__c14n__InclusiveNamespaces:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct _c14n__InclusiveNamespaces type=%d location=%p object=%p\n", t, p, q));
		*(struct _c14n__InclusiveNamespaces*)p = *(struct _c14n__InclusiveNamespaces*)q;
		break;
	case SOAP_TYPE_ds__TransformType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__TransformType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__TransformType*)p = *(struct ds__TransformType*)q;
		break;
	case SOAP_TYPE_ds__KeyInfoType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__KeyInfoType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__KeyInfoType*)p = *(struct ds__KeyInfoType*)q;
		break;
	case SOAP_TYPE_ds__SignedInfoType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__SignedInfoType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__SignedInfoType*)p = *(struct ds__SignedInfoType*)q;
		break;
	case SOAP_TYPE_ds__CanonicalizationMethodType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__CanonicalizationMethodType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__CanonicalizationMethodType*)p = *(struct ds__CanonicalizationMethodType*)q;
		break;
	case SOAP_TYPE_ds__SignatureMethodType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__SignatureMethodType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__SignatureMethodType*)p = *(struct ds__SignatureMethodType*)q;
		break;
	case SOAP_TYPE_ds__ReferenceType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__ReferenceType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__ReferenceType*)p = *(struct ds__ReferenceType*)q;
		break;
	case SOAP_TYPE_ds__TransformsType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__TransformsType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__TransformsType*)p = *(struct ds__TransformsType*)q;
		break;
	case SOAP_TYPE_ds__DigestMethodType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__DigestMethodType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__DigestMethodType*)p = *(struct ds__DigestMethodType*)q;
		break;
	case SOAP_TYPE__ds__union_KeyValueType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy union _ds__union_KeyValueType type=%d location=%p object=%p\n", t, p, q));
		*(union _ds__union_KeyValueType*)p = *(union _ds__union_KeyValueType*)q;
		break;
	case SOAP_TYPE_ds__KeyValueType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__KeyValueType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__KeyValueType*)p = *(struct ds__KeyValueType*)q;
		break;
	case SOAP_TYPE_ds__RetrievalMethodType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__RetrievalMethodType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__RetrievalMethodType*)p = *(struct ds__RetrievalMethodType*)q;
		break;
	case SOAP_TYPE__ds__union_X509DataType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy union _ds__union_X509DataType type=%d location=%p object=%p\n", t, p, q));
		*(union _ds__union_X509DataType*)p = *(union _ds__union_X509DataType*)q;
		break;
	case SOAP_TYPE___ds__X509DataType_sequence:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ds__X509DataType_sequence type=%d location=%p object=%p\n", t, p, q));
		*(struct __ds__X509DataType_sequence*)p = *(struct __ds__X509DataType_sequence*)q;
		break;
	case SOAP_TYPE_ds__X509DataType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__X509DataType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__X509DataType*)p = *(struct ds__X509DataType*)q;
		break;
	case SOAP_TYPE_ds__X509IssuerSerialType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__X509IssuerSerialType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__X509IssuerSerialType*)p = *(struct ds__X509IssuerSerialType*)q;
		break;
	case SOAP_TYPE___ds__DSAKeyValueType_sequence:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ds__DSAKeyValueType_sequence type=%d location=%p object=%p\n", t, p, q));
		*(struct __ds__DSAKeyValueType_sequence*)p = *(struct __ds__DSAKeyValueType_sequence*)q;
		break;
	case SOAP_TYPE___ds__DSAKeyValueType_sequence_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ds__DSAKeyValueType_sequence_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __ds__DSAKeyValueType_sequence_*)p = *(struct __ds__DSAKeyValueType_sequence_*)q;
		break;
	case SOAP_TYPE_ds__DSAKeyValueType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__DSAKeyValueType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__DSAKeyValueType*)p = *(struct ds__DSAKeyValueType*)q;
		break;
	case SOAP_TYPE_ds__RSAKeyValueType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__RSAKeyValueType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__RSAKeyValueType*)p = *(struct ds__RSAKeyValueType*)q;
		break;
	case SOAP_TYPE_xenc__EncryptionPropertyType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct xenc__EncryptionPropertyType type=%d location=%p object=%p\n", t, p, q));
		*(struct xenc__EncryptionPropertyType*)p = *(struct xenc__EncryptionPropertyType*)q;
		break;
	case SOAP_TYPE_xenc__EncryptedType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct xenc__EncryptedType type=%d location=%p object=%p\n", t, p, q));
		*(struct xenc__EncryptedType*)p = *(struct xenc__EncryptedType*)q;
		break;
	case SOAP_TYPE_xenc__EncryptionMethodType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct xenc__EncryptionMethodType type=%d location=%p object=%p\n", t, p, q));
		*(struct xenc__EncryptionMethodType*)p = *(struct xenc__EncryptionMethodType*)q;
		break;
	case SOAP_TYPE__xenc__union_CipherDataType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy union _xenc__union_CipherDataType type=%d location=%p object=%p\n", t, p, q));
		*(union _xenc__union_CipherDataType*)p = *(union _xenc__union_CipherDataType*)q;
		break;
	case SOAP_TYPE_xenc__CipherDataType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct xenc__CipherDataType type=%d location=%p object=%p\n", t, p, q));
		*(struct xenc__CipherDataType*)p = *(struct xenc__CipherDataType*)q;
		break;
	case SOAP_TYPE__xenc__union_CipherReferenceType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy union _xenc__union_CipherReferenceType type=%d location=%p object=%p\n", t, p, q));
		*(union _xenc__union_CipherReferenceType*)p = *(union _xenc__union_CipherReferenceType*)q;
		break;
	case SOAP_TYPE_xenc__CipherReferenceType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct xenc__CipherReferenceType type=%d location=%p object=%p\n", t, p, q));
		*(struct xenc__CipherReferenceType*)p = *(struct xenc__CipherReferenceType*)q;
		break;
	case SOAP_TYPE_xenc__TransformsType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct xenc__TransformsType type=%d location=%p object=%p\n", t, p, q));
		*(struct xenc__TransformsType*)p = *(struct xenc__TransformsType*)q;
		break;
	case SOAP_TYPE_xenc__AgreementMethodType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct xenc__AgreementMethodType type=%d location=%p object=%p\n", t, p, q));
		*(struct xenc__AgreementMethodType*)p = *(struct xenc__AgreementMethodType*)q;
		break;
	case SOAP_TYPE_xenc__ReferenceType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct xenc__ReferenceType type=%d location=%p object=%p\n", t, p, q));
		*(struct xenc__ReferenceType*)p = *(struct xenc__ReferenceType*)q;
		break;
	case SOAP_TYPE_xenc__EncryptionPropertiesType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct xenc__EncryptionPropertiesType type=%d location=%p object=%p\n", t, p, q));
		*(struct xenc__EncryptionPropertiesType*)p = *(struct xenc__EncryptionPropertiesType*)q;
		break;
	case SOAP_TYPE__xenc__union_ReferenceList:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy union _xenc__union_ReferenceList type=%d location=%p object=%p\n", t, p, q));
		*(union _xenc__union_ReferenceList*)p = *(union _xenc__union_ReferenceList*)q;
		break;
	case SOAP_TYPE___xenc__union_ReferenceList:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __xenc__union_ReferenceList type=%d location=%p object=%p\n", t, p, q));
		*(struct __xenc__union_ReferenceList*)p = *(struct __xenc__union_ReferenceList*)q;
		break;
	case SOAP_TYPE__xenc__ReferenceList:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct _xenc__ReferenceList type=%d location=%p object=%p\n", t, p, q));
		*(struct _xenc__ReferenceList*)p = *(struct _xenc__ReferenceList*)q;
		break;
	case SOAP_TYPE_xenc__EncryptedDataType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct xenc__EncryptedDataType type=%d location=%p object=%p\n", t, p, q));
		*(struct xenc__EncryptedDataType*)p = *(struct xenc__EncryptedDataType*)q;
		break;
	case SOAP_TYPE_xenc__EncryptedKeyType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct xenc__EncryptedKeyType type=%d location=%p object=%p\n", t, p, q));
		*(struct xenc__EncryptedKeyType*)p = *(struct xenc__EncryptedKeyType*)q;
		break;
	case SOAP_TYPE_wsc__SecurityContextTokenType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct wsc__SecurityContextTokenType type=%d location=%p object=%p\n", t, p, q));
		*(struct wsc__SecurityContextTokenType*)p = *(struct wsc__SecurityContextTokenType*)q;
		break;
	case SOAP_TYPE__wsc__union_DerivedKeyTokenType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy union _wsc__union_DerivedKeyTokenType type=%d location=%p object=%p\n", t, p, q));
		*(union _wsc__union_DerivedKeyTokenType*)p = *(union _wsc__union_DerivedKeyTokenType*)q;
		break;
	case SOAP_TYPE___wsc__DerivedKeyTokenType_sequence:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __wsc__DerivedKeyTokenType_sequence type=%d location=%p object=%p\n", t, p, q));
		*(struct __wsc__DerivedKeyTokenType_sequence*)p = *(struct __wsc__DerivedKeyTokenType_sequence*)q;
		break;
	case SOAP_TYPE_wsc__DerivedKeyTokenType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct wsc__DerivedKeyTokenType type=%d location=%p object=%p\n", t, p, q));
		*(struct wsc__DerivedKeyTokenType*)p = *(struct wsc__DerivedKeyTokenType*)q;
		break;
	case SOAP_TYPE_wsc__PropertiesType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct wsc__PropertiesType type=%d location=%p object=%p\n", t, p, q));
		*(struct wsc__PropertiesType*)p = *(struct wsc__PropertiesType*)q;
		break;
	case SOAP_TYPE___saml1__union_AssertionType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __saml1__union_AssertionType type=%d location=%p object=%p\n", t, p, q));
		*(struct __saml1__union_AssertionType*)p = *(struct __saml1__union_AssertionType*)q;
		break;
	case SOAP_TYPE_saml1__AssertionType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AssertionType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AssertionType*)p = *(struct saml1__AssertionType*)q;
		break;
	case SOAP_TYPE___saml1__union_ConditionsType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __saml1__union_ConditionsType type=%d location=%p object=%p\n", t, p, q));
		*(struct __saml1__union_ConditionsType*)p = *(struct __saml1__union_ConditionsType*)q;
		break;
	case SOAP_TYPE_saml1__ConditionsType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__ConditionsType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__ConditionsType*)p = *(struct saml1__ConditionsType*)q;
		break;
	case SOAP_TYPE_saml1__ConditionAbstractType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__ConditionAbstractType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__ConditionAbstractType*)p = *(struct saml1__ConditionAbstractType*)q;
		break;
	case SOAP_TYPE___saml1__union_AdviceType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __saml1__union_AdviceType type=%d location=%p object=%p\n", t, p, q));
		*(struct __saml1__union_AdviceType*)p = *(struct __saml1__union_AdviceType*)q;
		break;
	case SOAP_TYPE_saml1__AdviceType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AdviceType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AdviceType*)p = *(struct saml1__AdviceType*)q;
		break;
	case SOAP_TYPE_saml1__StatementAbstractType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__StatementAbstractType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__StatementAbstractType*)p = *(struct saml1__StatementAbstractType*)q;
		break;
	case SOAP_TYPE_saml1__SubjectType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__SubjectType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__SubjectType*)p = *(struct saml1__SubjectType*)q;
		break;
	case SOAP_TYPE_saml1__SubjectConfirmationType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__SubjectConfirmationType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__SubjectConfirmationType*)p = *(struct saml1__SubjectConfirmationType*)q;
		break;
	case SOAP_TYPE_saml1__SubjectLocalityType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__SubjectLocalityType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__SubjectLocalityType*)p = *(struct saml1__SubjectLocalityType*)q;
		break;
	case SOAP_TYPE_saml1__AuthorityBindingType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AuthorityBindingType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AuthorityBindingType*)p = *(struct saml1__AuthorityBindingType*)q;
		break;
	case SOAP_TYPE___saml1__union_EvidenceType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __saml1__union_EvidenceType type=%d location=%p object=%p\n", t, p, q));
		*(struct __saml1__union_EvidenceType*)p = *(struct __saml1__union_EvidenceType*)q;
		break;
	case SOAP_TYPE_saml1__EvidenceType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__EvidenceType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__EvidenceType*)p = *(struct saml1__EvidenceType*)q;
		break;
	case SOAP_TYPE_saml1__AttributeDesignatorType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AttributeDesignatorType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AttributeDesignatorType*)p = *(struct saml1__AttributeDesignatorType*)q;
		break;
	case SOAP_TYPE_saml1__AudienceRestrictionConditionType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AudienceRestrictionConditionType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AudienceRestrictionConditionType*)p = *(struct saml1__AudienceRestrictionConditionType*)q;
		break;
	case SOAP_TYPE_saml1__DoNotCacheConditionType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__DoNotCacheConditionType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__DoNotCacheConditionType*)p = *(struct saml1__DoNotCacheConditionType*)q;
		break;
	case SOAP_TYPE_saml1__SubjectStatementAbstractType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__SubjectStatementAbstractType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__SubjectStatementAbstractType*)p = *(struct saml1__SubjectStatementAbstractType*)q;
		break;
	case SOAP_TYPE_saml1__NameIdentifierType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__NameIdentifierType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__NameIdentifierType*)p = *(struct saml1__NameIdentifierType*)q;
		break;
	case SOAP_TYPE_saml1__ActionType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__ActionType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__ActionType*)p = *(struct saml1__ActionType*)q;
		break;
	case SOAP_TYPE_saml1__AttributeType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AttributeType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AttributeType*)p = *(struct saml1__AttributeType*)q;
		break;
	case SOAP_TYPE_saml1__AuthenticationStatementType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AuthenticationStatementType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AuthenticationStatementType*)p = *(struct saml1__AuthenticationStatementType*)q;
		break;
	case SOAP_TYPE_saml1__AuthorizationDecisionStatementType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AuthorizationDecisionStatementType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AuthorizationDecisionStatementType*)p = *(struct saml1__AuthorizationDecisionStatementType*)q;
		break;
	case SOAP_TYPE_saml1__AttributeStatementType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AttributeStatementType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AttributeStatementType*)p = *(struct saml1__AttributeStatementType*)q;
		break;
	case SOAP_TYPE_saml2__BaseIDAbstractType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__BaseIDAbstractType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__BaseIDAbstractType*)p = *(struct saml2__BaseIDAbstractType*)q;
		break;
	case SOAP_TYPE_saml2__EncryptedElementType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__EncryptedElementType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__EncryptedElementType*)p = *(struct saml2__EncryptedElementType*)q;
		break;
	case SOAP_TYPE___saml2__union_AssertionType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __saml2__union_AssertionType type=%d location=%p object=%p\n", t, p, q));
		*(struct __saml2__union_AssertionType*)p = *(struct __saml2__union_AssertionType*)q;
		break;
	case SOAP_TYPE_saml2__AssertionType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__AssertionType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__AssertionType*)p = *(struct saml2__AssertionType*)q;
		break;
	case SOAP_TYPE_saml2__SubjectType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__SubjectType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__SubjectType*)p = *(struct saml2__SubjectType*)q;
		break;
	case SOAP_TYPE_saml2__SubjectConfirmationType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__SubjectConfirmationType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__SubjectConfirmationType*)p = *(struct saml2__SubjectConfirmationType*)q;
		break;
	case SOAP_TYPE___saml2__union_ConditionsType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __saml2__union_ConditionsType type=%d location=%p object=%p\n", t, p, q));
		*(struct __saml2__union_ConditionsType*)p = *(struct __saml2__union_ConditionsType*)q;
		break;
	case SOAP_TYPE_saml2__ConditionsType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__ConditionsType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__ConditionsType*)p = *(struct saml2__ConditionsType*)q;
		break;
	case SOAP_TYPE_saml2__ConditionAbstractType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__ConditionAbstractType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__ConditionAbstractType*)p = *(struct saml2__ConditionAbstractType*)q;
		break;
	case SOAP_TYPE___saml2__union_AdviceType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __saml2__union_AdviceType type=%d location=%p object=%p\n", t, p, q));
		*(struct __saml2__union_AdviceType*)p = *(struct __saml2__union_AdviceType*)q;
		break;
	case SOAP_TYPE_saml2__AdviceType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__AdviceType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__AdviceType*)p = *(struct saml2__AdviceType*)q;
		break;
	case SOAP_TYPE_saml2__StatementAbstractType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__StatementAbstractType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__StatementAbstractType*)p = *(struct saml2__StatementAbstractType*)q;
		break;
	case SOAP_TYPE_saml2__SubjectLocalityType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__SubjectLocalityType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__SubjectLocalityType*)p = *(struct saml2__SubjectLocalityType*)q;
		break;
	case SOAP_TYPE_saml2__AuthnContextType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__AuthnContextType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__AuthnContextType*)p = *(struct saml2__AuthnContextType*)q;
		break;
	case SOAP_TYPE___saml2__union_EvidenceType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __saml2__union_EvidenceType type=%d location=%p object=%p\n", t, p, q));
		*(struct __saml2__union_EvidenceType*)p = *(struct __saml2__union_EvidenceType*)q;
		break;
	case SOAP_TYPE_saml2__EvidenceType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__EvidenceType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__EvidenceType*)p = *(struct saml2__EvidenceType*)q;
		break;
	case SOAP_TYPE_saml2__AttributeType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__AttributeType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__AttributeType*)p = *(struct saml2__AttributeType*)q;
		break;
	case SOAP_TYPE_saml2__NameIDType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__NameIDType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__NameIDType*)p = *(struct saml2__NameIDType*)q;
		break;
	case SOAP_TYPE_saml2__SubjectConfirmationDataType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__SubjectConfirmationDataType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__SubjectConfirmationDataType*)p = *(struct saml2__SubjectConfirmationDataType*)q;
		break;
	case SOAP_TYPE_saml2__AudienceRestrictionType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__AudienceRestrictionType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__AudienceRestrictionType*)p = *(struct saml2__AudienceRestrictionType*)q;
		break;
	case SOAP_TYPE_saml2__OneTimeUseType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__OneTimeUseType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__OneTimeUseType*)p = *(struct saml2__OneTimeUseType*)q;
		break;
	case SOAP_TYPE_saml2__ProxyRestrictionType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__ProxyRestrictionType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__ProxyRestrictionType*)p = *(struct saml2__ProxyRestrictionType*)q;
		break;
	case SOAP_TYPE_saml2__AuthnStatementType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__AuthnStatementType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__AuthnStatementType*)p = *(struct saml2__AuthnStatementType*)q;
		break;
	case SOAP_TYPE_saml2__AuthzDecisionStatementType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__AuthzDecisionStatementType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__AuthzDecisionStatementType*)p = *(struct saml2__AuthzDecisionStatementType*)q;
		break;
	case SOAP_TYPE_saml2__ActionType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__ActionType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__ActionType*)p = *(struct saml2__ActionType*)q;
		break;
	case SOAP_TYPE___saml2__union_AttributeStatementType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __saml2__union_AttributeStatementType type=%d location=%p object=%p\n", t, p, q));
		*(struct __saml2__union_AttributeStatementType*)p = *(struct __saml2__union_AttributeStatementType*)q;
		break;
	case SOAP_TYPE_saml2__AttributeStatementType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__AttributeStatementType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__AttributeStatementType*)p = *(struct saml2__AttributeStatementType*)q;
		break;
	case SOAP_TYPE_saml2__KeyInfoConfirmationDataType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__KeyInfoConfirmationDataType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__KeyInfoConfirmationDataType*)p = *(struct saml2__KeyInfoConfirmationDataType*)q;
		break;
	case SOAP_TYPE__wsse__Security:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct _wsse__Security type=%d location=%p object=%p\n", t, p, q));
		*(struct _wsse__Security*)p = *(struct _wsse__Security*)q;
		break;
	case SOAP_TYPE__wsse__Password:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct _wsse__Password type=%d location=%p object=%p\n", t, p, q));
		*(struct _wsse__Password*)p = *(struct _wsse__Password*)q;
		break;
	case SOAP_TYPE_xsd__base64Binary:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__base64Binary type=%d location=%p object=%p\n", t, p, q));
		*(xsd__base64Binary*)p = *(xsd__base64Binary*)q;
		break;
	case SOAP_TYPE_std__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_ns1__sendSummary:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__sendSummary type=%d location=%p object=%p\n", t, p, q));
		*(ns1__sendSummary*)p = *(ns1__sendSummary*)q;
		break;
	case SOAP_TYPE_ns1__sendSummaryResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__sendSummaryResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__sendSummaryResponse*)p = *(ns1__sendSummaryResponse*)q;
		break;
	case SOAP_TYPE_ns1__getStatus:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__getStatus type=%d location=%p object=%p\n", t, p, q));
		*(ns1__getStatus*)p = *(ns1__getStatus*)q;
		break;
	case SOAP_TYPE_ns1__getStatusResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__getStatusResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__getStatusResponse*)p = *(ns1__getStatusResponse*)q;
		break;
	case SOAP_TYPE_ns1__statusResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__statusResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__statusResponse*)p = *(ns1__statusResponse*)q;
		break;
	case SOAP_TYPE_ns1__sendPack:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__sendPack type=%d location=%p object=%p\n", t, p, q));
		*(ns1__sendPack*)p = *(ns1__sendPack*)q;
		break;
	case SOAP_TYPE_ns1__sendPackResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__sendPackResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__sendPackResponse*)p = *(ns1__sendPackResponse*)q;
		break;
	case SOAP_TYPE_ns1__sendBill:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__sendBill type=%d location=%p object=%p\n", t, p, q));
		*(ns1__sendBill*)p = *(ns1__sendBill*)q;
		break;
	case SOAP_TYPE_ns1__sendBillResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__sendBillResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__sendBillResponse*)p = *(ns1__sendBillResponse*)q;
		break;
	case SOAP_TYPE___sunat__getStatus:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __sunat__getStatus type=%d location=%p object=%p\n", t, p, q));
		*(struct __sunat__getStatus*)p = *(struct __sunat__getStatus*)q;
		break;
	case SOAP_TYPE___sunat__sendBill:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __sunat__sendBill type=%d location=%p object=%p\n", t, p, q));
		*(struct __sunat__sendBill*)p = *(struct __sunat__sendBill*)q;
		break;
	case SOAP_TYPE___sunat__sendPack:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __sunat__sendPack type=%d location=%p object=%p\n", t, p, q));
		*(struct __sunat__sendPack*)p = *(struct __sunat__sendPack*)q;
		break;
	case SOAP_TYPE___sunat__sendSummary:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __sunat__sendSummary type=%d location=%p object=%p\n", t, p, q));
		*(struct __sunat__sendSummary*)p = *(struct __sunat__sendSummary*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	case SOAP_TYPE__ds__Signature:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__SignatureType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__SignatureType*)p = *(struct ds__SignatureType*)q;
		break;
	case SOAP_TYPE__ds__Transform:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__TransformType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__TransformType*)p = *(struct ds__TransformType*)q;
		break;
	case SOAP_TYPE__ds__KeyInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__KeyInfoType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__KeyInfoType*)p = *(struct ds__KeyInfoType*)q;
		break;
	case SOAP_TYPE__ds__SignedInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__SignedInfoType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__SignedInfoType*)p = *(struct ds__SignedInfoType*)q;
		break;
	case SOAP_TYPE__ds__CanonicalizationMethod:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__CanonicalizationMethodType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__CanonicalizationMethodType*)p = *(struct ds__CanonicalizationMethodType*)q;
		break;
	case SOAP_TYPE__ds__SignatureMethod:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__SignatureMethodType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__SignatureMethodType*)p = *(struct ds__SignatureMethodType*)q;
		break;
	case SOAP_TYPE__ds__Reference:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__ReferenceType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__ReferenceType*)p = *(struct ds__ReferenceType*)q;
		break;
	case SOAP_TYPE__ds__Transforms:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__TransformsType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__TransformsType*)p = *(struct ds__TransformsType*)q;
		break;
	case SOAP_TYPE__ds__DigestMethod:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__DigestMethodType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__DigestMethodType*)p = *(struct ds__DigestMethodType*)q;
		break;
	case SOAP_TYPE__ds__KeyValue:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__KeyValueType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__KeyValueType*)p = *(struct ds__KeyValueType*)q;
		break;
	case SOAP_TYPE__ds__RetrievalMethod:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__RetrievalMethodType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__RetrievalMethodType*)p = *(struct ds__RetrievalMethodType*)q;
		break;
	case SOAP_TYPE__ds__X509Data:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__X509DataType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__X509DataType*)p = *(struct ds__X509DataType*)q;
		break;
	case SOAP_TYPE__ds__DSAKeyValue:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__DSAKeyValueType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__DSAKeyValueType*)p = *(struct ds__DSAKeyValueType*)q;
		break;
	case SOAP_TYPE__ds__RSAKeyValue:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ds__RSAKeyValueType type=%d location=%p object=%p\n", t, p, q));
		*(struct ds__RSAKeyValueType*)p = *(struct ds__RSAKeyValueType*)q;
		break;
	case SOAP_TYPE__xenc__CipherData:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct xenc__CipherDataType type=%d location=%p object=%p\n", t, p, q));
		*(struct xenc__CipherDataType*)p = *(struct xenc__CipherDataType*)q;
		break;
	case SOAP_TYPE__xenc__CipherReference:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct xenc__CipherReferenceType type=%d location=%p object=%p\n", t, p, q));
		*(struct xenc__CipherReferenceType*)p = *(struct xenc__CipherReferenceType*)q;
		break;
	case SOAP_TYPE__xenc__AgreementMethod:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct xenc__AgreementMethodType type=%d location=%p object=%p\n", t, p, q));
		*(struct xenc__AgreementMethodType*)p = *(struct xenc__AgreementMethodType*)q;
		break;
	case SOAP_TYPE__xenc__EncryptionProperties:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct xenc__EncryptionPropertiesType type=%d location=%p object=%p\n", t, p, q));
		*(struct xenc__EncryptionPropertiesType*)p = *(struct xenc__EncryptionPropertiesType*)q;
		break;
	case SOAP_TYPE__xenc__EncryptionProperty:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct xenc__EncryptionPropertyType type=%d location=%p object=%p\n", t, p, q));
		*(struct xenc__EncryptionPropertyType*)p = *(struct xenc__EncryptionPropertyType*)q;
		break;
	case SOAP_TYPE__saml1__Assertion:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AssertionType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AssertionType*)p = *(struct saml1__AssertionType*)q;
		break;
	case SOAP_TYPE__saml1__Conditions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__ConditionsType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__ConditionsType*)p = *(struct saml1__ConditionsType*)q;
		break;
	case SOAP_TYPE__saml1__Condition:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__ConditionAbstractType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__ConditionAbstractType*)p = *(struct saml1__ConditionAbstractType*)q;
		break;
	case SOAP_TYPE__saml1__AudienceRestrictionCondition:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AudienceRestrictionConditionType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AudienceRestrictionConditionType*)p = *(struct saml1__AudienceRestrictionConditionType*)q;
		break;
	case SOAP_TYPE__saml1__DoNotCacheCondition:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__DoNotCacheConditionType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__DoNotCacheConditionType*)p = *(struct saml1__DoNotCacheConditionType*)q;
		break;
	case SOAP_TYPE__saml1__Advice:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AdviceType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AdviceType*)p = *(struct saml1__AdviceType*)q;
		break;
	case SOAP_TYPE__saml1__Statement:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__StatementAbstractType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__StatementAbstractType*)p = *(struct saml1__StatementAbstractType*)q;
		break;
	case SOAP_TYPE__saml1__SubjectStatement:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__SubjectStatementAbstractType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__SubjectStatementAbstractType*)p = *(struct saml1__SubjectStatementAbstractType*)q;
		break;
	case SOAP_TYPE__saml1__Subject:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__SubjectType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__SubjectType*)p = *(struct saml1__SubjectType*)q;
		break;
	case SOAP_TYPE__saml1__NameIdentifier:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__NameIdentifierType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__NameIdentifierType*)p = *(struct saml1__NameIdentifierType*)q;
		break;
	case SOAP_TYPE__saml1__SubjectConfirmation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__SubjectConfirmationType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__SubjectConfirmationType*)p = *(struct saml1__SubjectConfirmationType*)q;
		break;
	case SOAP_TYPE__saml1__AuthenticationStatement:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AuthenticationStatementType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AuthenticationStatementType*)p = *(struct saml1__AuthenticationStatementType*)q;
		break;
	case SOAP_TYPE__saml1__SubjectLocality:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__SubjectLocalityType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__SubjectLocalityType*)p = *(struct saml1__SubjectLocalityType*)q;
		break;
	case SOAP_TYPE__saml1__AuthorityBinding:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AuthorityBindingType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AuthorityBindingType*)p = *(struct saml1__AuthorityBindingType*)q;
		break;
	case SOAP_TYPE__saml1__AuthorizationDecisionStatement:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AuthorizationDecisionStatementType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AuthorizationDecisionStatementType*)p = *(struct saml1__AuthorizationDecisionStatementType*)q;
		break;
	case SOAP_TYPE__saml1__Action:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__ActionType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__ActionType*)p = *(struct saml1__ActionType*)q;
		break;
	case SOAP_TYPE__saml1__Evidence:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__EvidenceType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__EvidenceType*)p = *(struct saml1__EvidenceType*)q;
		break;
	case SOAP_TYPE__saml1__AttributeStatement:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AttributeStatementType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AttributeStatementType*)p = *(struct saml1__AttributeStatementType*)q;
		break;
	case SOAP_TYPE__saml1__AttributeDesignator:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AttributeDesignatorType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AttributeDesignatorType*)p = *(struct saml1__AttributeDesignatorType*)q;
		break;
	case SOAP_TYPE__saml1__Attribute:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml1__AttributeType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml1__AttributeType*)p = *(struct saml1__AttributeType*)q;
		break;
	case SOAP_TYPE__saml2__BaseID:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__BaseIDAbstractType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__BaseIDAbstractType*)p = *(struct saml2__BaseIDAbstractType*)q;
		break;
	case SOAP_TYPE__saml2__NameID:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__NameIDType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__NameIDType*)p = *(struct saml2__NameIDType*)q;
		break;
	case SOAP_TYPE__saml2__EncryptedID:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__EncryptedElementType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__EncryptedElementType*)p = *(struct saml2__EncryptedElementType*)q;
		break;
	case SOAP_TYPE__saml2__Issuer:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__NameIDType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__NameIDType*)p = *(struct saml2__NameIDType*)q;
		break;
	case SOAP_TYPE__saml2__Assertion:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__AssertionType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__AssertionType*)p = *(struct saml2__AssertionType*)q;
		break;
	case SOAP_TYPE__saml2__Subject:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__SubjectType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__SubjectType*)p = *(struct saml2__SubjectType*)q;
		break;
	case SOAP_TYPE__saml2__SubjectConfirmation:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__SubjectConfirmationType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__SubjectConfirmationType*)p = *(struct saml2__SubjectConfirmationType*)q;
		break;
	case SOAP_TYPE__saml2__SubjectConfirmationData:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__SubjectConfirmationDataType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__SubjectConfirmationDataType*)p = *(struct saml2__SubjectConfirmationDataType*)q;
		break;
	case SOAP_TYPE__saml2__Conditions:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__ConditionsType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__ConditionsType*)p = *(struct saml2__ConditionsType*)q;
		break;
	case SOAP_TYPE__saml2__Condition:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__ConditionAbstractType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__ConditionAbstractType*)p = *(struct saml2__ConditionAbstractType*)q;
		break;
	case SOAP_TYPE__saml2__AudienceRestriction:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__AudienceRestrictionType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__AudienceRestrictionType*)p = *(struct saml2__AudienceRestrictionType*)q;
		break;
	case SOAP_TYPE__saml2__OneTimeUse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__OneTimeUseType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__OneTimeUseType*)p = *(struct saml2__OneTimeUseType*)q;
		break;
	case SOAP_TYPE__saml2__ProxyRestriction:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__ProxyRestrictionType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__ProxyRestrictionType*)p = *(struct saml2__ProxyRestrictionType*)q;
		break;
	case SOAP_TYPE__saml2__Advice:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__AdviceType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__AdviceType*)p = *(struct saml2__AdviceType*)q;
		break;
	case SOAP_TYPE__saml2__EncryptedAssertion:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__EncryptedElementType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__EncryptedElementType*)p = *(struct saml2__EncryptedElementType*)q;
		break;
	case SOAP_TYPE__saml2__Statement:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__StatementAbstractType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__StatementAbstractType*)p = *(struct saml2__StatementAbstractType*)q;
		break;
	case SOAP_TYPE__saml2__AuthnStatement:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__AuthnStatementType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__AuthnStatementType*)p = *(struct saml2__AuthnStatementType*)q;
		break;
	case SOAP_TYPE__saml2__SubjectLocality:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__SubjectLocalityType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__SubjectLocalityType*)p = *(struct saml2__SubjectLocalityType*)q;
		break;
	case SOAP_TYPE__saml2__AuthnContext:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__AuthnContextType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__AuthnContextType*)p = *(struct saml2__AuthnContextType*)q;
		break;
	case SOAP_TYPE__saml2__AuthzDecisionStatement:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__AuthzDecisionStatementType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__AuthzDecisionStatementType*)p = *(struct saml2__AuthzDecisionStatementType*)q;
		break;
	case SOAP_TYPE__saml2__Action:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__ActionType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__ActionType*)p = *(struct saml2__ActionType*)q;
		break;
	case SOAP_TYPE__saml2__Evidence:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__EvidenceType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__EvidenceType*)p = *(struct saml2__EvidenceType*)q;
		break;
	case SOAP_TYPE__saml2__AttributeStatement:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__AttributeStatementType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__AttributeStatementType*)p = *(struct saml2__AttributeStatementType*)q;
		break;
	case SOAP_TYPE__saml2__Attribute:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__AttributeType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__AttributeType*)p = *(struct saml2__AttributeType*)q;
		break;
	case SOAP_TYPE__saml2__EncryptedAttribute:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct saml2__EncryptedElementType type=%d location=%p object=%p\n", t, p, q));
		*(struct saml2__EncryptedElementType*)p = *(struct saml2__EncryptedElementType*)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__SignaturePropertyType(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_ds__SignaturePropertyType);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_ds__SignaturePropertyType(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_ds__SignaturePropertyType);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__SignaturePropertyType(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_ds__SignaturePropertyType(soap, tag ? tag : "ds:SignaturePropertyType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_ds__SignaturePropertyType(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_ds__SignaturePropertyType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__SignaturePropertiesType(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_ds__SignaturePropertiesType);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_ds__SignaturePropertiesType(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_ds__SignaturePropertiesType);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__SignaturePropertiesType(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_ds__SignaturePropertiesType(soap, tag ? tag : "ds:SignaturePropertiesType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_ds__SignaturePropertiesType(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_ds__SignaturePropertiesType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__ManifestType(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_ds__ManifestType);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_ds__ManifestType(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_ds__ManifestType);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__ManifestType(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_ds__ManifestType(soap, tag ? tag : "ds:ManifestType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_ds__ManifestType(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_ds__ManifestType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__ObjectType(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_ds__ObjectType);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_ds__ObjectType(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_ds__ObjectType);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__ObjectType(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_ds__ObjectType(soap, tag ? tag : "ds:ObjectType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_ds__ObjectType(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_ds__ObjectType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__SPKIDataType(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_ds__SPKIDataType);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_ds__SPKIDataType(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_ds__SPKIDataType);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__SPKIDataType(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_ds__SPKIDataType(soap, tag ? tag : "ds:SPKIDataType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_ds__SPKIDataType(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_ds__SPKIDataType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__PGPDataType(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_ds__PGPDataType);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_ds__PGPDataType(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_ds__PGPDataType);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__PGPDataType(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_ds__PGPDataType(soap, tag ? tag : "ds:PGPDataType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_ds__PGPDataType(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_ds__PGPDataType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__SignatureValueType(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_ds__SignatureValueType);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_ds__SignatureValueType(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_ds__SignatureValueType);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__SignatureValueType(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_ds__SignatureValueType(soap, tag ? tag : "ds:SignatureValueType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_ds__SignatureValueType(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_ds__SignatureValueType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return a;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n)
{
	int *a = static_cast<int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(int)));
	for (int *p = a; p && n--; ++p)
		soap_default_int(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{
	a = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
	return a;
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n)
{
	unsigned char *a = static_cast<unsigned char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(unsigned char)));
	for (unsigned char *p = a; p && n--; ++p)
		soap_default_unsignedByte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	if (soap_out_unsignedByte(soap, tag ? tag : "unsignedByte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	a = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return a;
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n)
{
	unsigned int *a = static_cast<unsigned int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(unsigned int)));
	for (unsigned int *p = a; p && n--; ++p)
		soap_default_unsignedInt(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	if (soap_out_unsignedInt(soap, tag ? tag : "unsignedInt", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ULONG64(struct soap *soap, const char *tag, int id, const ULONG64 *a, const char *type)
{
	return soap_outULONG64(soap, tag, id, a, type, SOAP_TYPE_ULONG64);
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_ULONG64(struct soap *soap, const char *tag, ULONG64 *a, const char *type)
{
	a = soap_inULONG64(soap, tag, a, type, SOAP_TYPE_ULONG64);
	return a;
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_new_ULONG64(struct soap *soap, int n)
{
	ULONG64 *a = static_cast<ULONG64 *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(ULONG64)));
	for (ULONG64 *p = a; p && n--; ++p)
		soap_default_ULONG64(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ULONG64(struct soap *soap, const ULONG64 *a, const char *tag, const char *type)
{
	if (soap_out_ULONG64(soap, tag ? tag : "unsignedLong", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_ULONG64(struct soap *soap, ULONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_ULONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap *soap, const char *tag, int id, const time_t *a, const char *type)
{
	return soap_outdateTime(soap, tag, id, a, type, SOAP_TYPE_dateTime);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap *soap, const char *tag, time_t *a, const char *type)
{
	a = soap_indateTime(soap, tag, a, type, SOAP_TYPE_dateTime);
	return a;
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n)
{
	time_t *a = static_cast<time_t *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(time_t)));
	for (time_t *p = a; p && n--; ++p)
		soap_default_dateTime(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap *soap, const time_t *a, const char *tag, const char *type)
{
	if (soap_out_dateTime(soap, tag ? tag : "dateTime", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap *soap, time_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_dateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_saml2__DecisionType[] =
{	{ (LONG64)saml2__DecisionType__Permit, "Permit" },
	{ (LONG64)saml2__DecisionType__Deny, "Deny" },
	{ (LONG64)saml2__DecisionType__Indeterminate, "Indeterminate" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_saml2__DecisionType2s(struct soap *soap, enum saml2__DecisionType n)
{	const char *s = soap_code_str(soap_codes_saml2__DecisionType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__DecisionType(struct soap *soap, const char *tag, int id, const enum saml2__DecisionType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml2__DecisionType), type) || soap_send(soap, soap_saml2__DecisionType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2saml2__DecisionType(struct soap *soap, const char *s, enum saml2__DecisionType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_saml2__DecisionType, s);
	if (map)
		*a = (enum saml2__DecisionType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 2)
			return soap->error = SOAP_TYPE;
		*a = (enum saml2__DecisionType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum saml2__DecisionType * SOAP_FMAC4 soap_in_saml2__DecisionType(struct soap *soap, const char *tag, enum saml2__DecisionType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum saml2__DecisionType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml2__DecisionType, sizeof(enum saml2__DecisionType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2saml2__DecisionType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (enum saml2__DecisionType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml2__DecisionType, SOAP_TYPE_saml2__DecisionType, sizeof(enum saml2__DecisionType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 enum saml2__DecisionType * SOAP_FMAC4 soap_new_saml2__DecisionType(struct soap *soap, int n)
{
	enum saml2__DecisionType *a = static_cast<enum saml2__DecisionType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(enum saml2__DecisionType)));
	for (enum saml2__DecisionType *p = a; p && n--; ++p)
		soap_default_saml2__DecisionType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__DecisionType(struct soap *soap, const enum saml2__DecisionType *a, const char *tag, const char *type)
{
	if (soap_out_saml2__DecisionType(soap, tag ? tag : "saml2:DecisionType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum saml2__DecisionType * SOAP_FMAC4 soap_get_saml2__DecisionType(struct soap *soap, enum saml2__DecisionType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml2__DecisionType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_saml1__DecisionType[] =
{	{ (LONG64)saml1__DecisionType__Permit, "Permit" },
	{ (LONG64)saml1__DecisionType__Deny, "Deny" },
	{ (LONG64)saml1__DecisionType__Indeterminate, "Indeterminate" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_saml1__DecisionType2s(struct soap *soap, enum saml1__DecisionType n)
{	const char *s = soap_code_str(soap_codes_saml1__DecisionType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__DecisionType(struct soap *soap, const char *tag, int id, const enum saml1__DecisionType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml1__DecisionType), type) || soap_send(soap, soap_saml1__DecisionType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2saml1__DecisionType(struct soap *soap, const char *s, enum saml1__DecisionType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_saml1__DecisionType, s);
	if (map)
		*a = (enum saml1__DecisionType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 2)
			return soap->error = SOAP_TYPE;
		*a = (enum saml1__DecisionType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum saml1__DecisionType * SOAP_FMAC4 soap_in_saml1__DecisionType(struct soap *soap, const char *tag, enum saml1__DecisionType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum saml1__DecisionType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml1__DecisionType, sizeof(enum saml1__DecisionType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2saml1__DecisionType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (enum saml1__DecisionType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml1__DecisionType, SOAP_TYPE_saml1__DecisionType, sizeof(enum saml1__DecisionType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 enum saml1__DecisionType * SOAP_FMAC4 soap_new_saml1__DecisionType(struct soap *soap, int n)
{
	enum saml1__DecisionType *a = static_cast<enum saml1__DecisionType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(enum saml1__DecisionType)));
	for (enum saml1__DecisionType *p = a; p && n--; ++p)
		soap_default_saml1__DecisionType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__DecisionType(struct soap *soap, const enum saml1__DecisionType *a, const char *tag, const char *type)
{
	if (soap_out_saml1__DecisionType(soap, tag ? tag : "saml1:DecisionType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum saml1__DecisionType * SOAP_FMAC4 soap_get_saml1__DecisionType(struct soap *soap, enum saml1__DecisionType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml1__DecisionType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_wsc__FaultCodeType[] =
{	{ (LONG64)wsc__BadContextToken, "wsc:BadContextToken" },
	{ (LONG64)wsc__UnsupportedContextToken, "wsc:UnsupportedContextToken" },
	{ (LONG64)wsc__UnknownDerivationSource, "wsc:UnknownDerivationSource" },
	{ (LONG64)wsc__RenewNeeded, "wsc:RenewNeeded" },
	{ (LONG64)wsc__UnableToRenew, "wsc:UnableToRenew" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsc__FaultCodeType2s(struct soap *soap, enum wsc__FaultCodeType n)
{	const char *s = soap_code_str(soap_codes_wsc__FaultCodeType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__FaultCodeType(struct soap *soap, const char *tag, int id, const enum wsc__FaultCodeType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsc__FaultCodeType), type) || soap_send(soap, soap_wsc__FaultCodeType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsc__FaultCodeType(struct soap *soap, const char *s, enum wsc__FaultCodeType *a)
{
	const struct soap_code_map *map;
	char *t;
	if (!s)
		return soap->error;
	soap_s2QName(soap, s, &t, 0, -1, NULL);
	map = soap_code(soap_codes_wsc__FaultCodeType, t);
	if (map)
		*a = (enum wsc__FaultCodeType)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 4)
			return soap->error = SOAP_TYPE;
		*a = (enum wsc__FaultCodeType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum wsc__FaultCodeType * SOAP_FMAC4 soap_in_wsc__FaultCodeType(struct soap *soap, const char *tag, enum wsc__FaultCodeType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum wsc__FaultCodeType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_wsc__FaultCodeType, sizeof(enum wsc__FaultCodeType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2wsc__FaultCodeType(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (enum wsc__FaultCodeType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsc__FaultCodeType, SOAP_TYPE_wsc__FaultCodeType, sizeof(enum wsc__FaultCodeType), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 enum wsc__FaultCodeType * SOAP_FMAC4 soap_new_wsc__FaultCodeType(struct soap *soap, int n)
{
	enum wsc__FaultCodeType *a = static_cast<enum wsc__FaultCodeType *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(enum wsc__FaultCodeType)));
	for (enum wsc__FaultCodeType *p = a; p && n--; ++p)
		soap_default_wsc__FaultCodeType(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__FaultCodeType(struct soap *soap, const enum wsc__FaultCodeType *a, const char *tag, const char *type)
{
	if (soap_out_wsc__FaultCodeType(soap, tag ? tag : "wsc:FaultCodeType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum wsc__FaultCodeType * SOAP_FMAC4 soap_get_wsc__FaultCodeType(struct soap *soap, enum wsc__FaultCodeType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsc__FaultCodeType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_wsse__FaultcodeEnum[] =
{	{ (LONG64)wsse__UnsupportedSecurityToken, "wsse:UnsupportedSecurityToken" },
	{ (LONG64)wsse__UnsupportedAlgorithm, "wsse:UnsupportedAlgorithm" },
	{ (LONG64)wsse__InvalidSecurity, "wsse:InvalidSecurity" },
	{ (LONG64)wsse__InvalidSecurityToken, "wsse:InvalidSecurityToken" },
	{ (LONG64)wsse__FailedAuthentication, "wsse:FailedAuthentication" },
	{ (LONG64)wsse__FailedCheck, "wsse:FailedCheck" },
	{ (LONG64)wsse__SecurityTokenUnavailable, "wsse:SecurityTokenUnavailable" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsse__FaultcodeEnum2s(struct soap *soap, enum wsse__FaultcodeEnum n)
{	const char *s = soap_code_str(soap_codes_wsse__FaultcodeEnum, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsse__FaultcodeEnum(struct soap *soap, const char *tag, int id, const enum wsse__FaultcodeEnum *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsse__FaultcodeEnum), type) || soap_send(soap, soap_wsse__FaultcodeEnum2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsse__FaultcodeEnum(struct soap *soap, const char *s, enum wsse__FaultcodeEnum *a)
{
	const struct soap_code_map *map;
	char *t;
	if (!s)
		return soap->error;
	soap_s2QName(soap, s, &t, 0, -1, NULL);
	map = soap_code(soap_codes_wsse__FaultcodeEnum, t);
	if (map)
		*a = (enum wsse__FaultcodeEnum)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 6)
			return soap->error = SOAP_TYPE;
		*a = (enum wsse__FaultcodeEnum)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum wsse__FaultcodeEnum * SOAP_FMAC4 soap_in_wsse__FaultcodeEnum(struct soap *soap, const char *tag, enum wsse__FaultcodeEnum *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum wsse__FaultcodeEnum *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_wsse__FaultcodeEnum, sizeof(enum wsse__FaultcodeEnum), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2wsse__FaultcodeEnum(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (enum wsse__FaultcodeEnum *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsse__FaultcodeEnum, SOAP_TYPE_wsse__FaultcodeEnum, sizeof(enum wsse__FaultcodeEnum), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 enum wsse__FaultcodeEnum * SOAP_FMAC4 soap_new_wsse__FaultcodeEnum(struct soap *soap, int n)
{
	enum wsse__FaultcodeEnum *a = static_cast<enum wsse__FaultcodeEnum *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(enum wsse__FaultcodeEnum)));
	for (enum wsse__FaultcodeEnum *p = a; p && n--; ++p)
		soap_default_wsse__FaultcodeEnum(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsse__FaultcodeEnum(struct soap *soap, const enum wsse__FaultcodeEnum *a, const char *tag, const char *type)
{
	if (soap_out_wsse__FaultcodeEnum(soap, tag ? tag : "wsse:FaultcodeEnum", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum wsse__FaultcodeEnum * SOAP_FMAC4 soap_get_wsse__FaultcodeEnum(struct soap *soap, enum wsse__FaultcodeEnum *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsse__FaultcodeEnum(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_wsu__tTimestampFault[] =
{	{ (LONG64)wsu__MessageExpired, "wsu:MessageExpired" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsu__tTimestampFault2s(struct soap *soap, enum wsu__tTimestampFault n)
{	const char *s = soap_code_str(soap_codes_wsu__tTimestampFault, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsu__tTimestampFault(struct soap *soap, const char *tag, int id, const enum wsu__tTimestampFault *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsu__tTimestampFault), type) || soap_send(soap, soap_wsu__tTimestampFault2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsu__tTimestampFault(struct soap *soap, const char *s, enum wsu__tTimestampFault *a)
{
	const struct soap_code_map *map;
	char *t;
	if (!s)
		return soap->error;
	soap_s2QName(soap, s, &t, 0, -1, NULL);
	map = soap_code(soap_codes_wsu__tTimestampFault, t);
	if (map)
		*a = (enum wsu__tTimestampFault)map->code;
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	int n;
		if (soap_s2int(soap, s, &n) || n < 0 || n > 0)
			return soap->error = SOAP_TYPE;
		*a = (enum wsu__tTimestampFault)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum wsu__tTimestampFault * SOAP_FMAC4 soap_in_wsu__tTimestampFault(struct soap *soap, const char *tag, enum wsu__tTimestampFault *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum wsu__tTimestampFault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_wsu__tTimestampFault, sizeof(enum wsu__tTimestampFault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2wsu__tTimestampFault(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (enum wsu__tTimestampFault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsu__tTimestampFault, SOAP_TYPE_wsu__tTimestampFault, sizeof(enum wsu__tTimestampFault), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 enum wsu__tTimestampFault * SOAP_FMAC4 soap_new_wsu__tTimestampFault(struct soap *soap, int n)
{
	enum wsu__tTimestampFault *a = static_cast<enum wsu__tTimestampFault *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(enum wsu__tTimestampFault)));
	for (enum wsu__tTimestampFault *p = a; p && n--; ++p)
		soap_default_wsu__tTimestampFault(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsu__tTimestampFault(struct soap *soap, const enum wsu__tTimestampFault *a, const char *tag, const char *type)
{
	if (soap_out_wsu__tTimestampFault(soap, tag ? tag : "wsu:tTimestampFault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum wsu__tTimestampFault * SOAP_FMAC4 soap_get_wsu__tTimestampFault(struct soap *soap, enum wsu__tTimestampFault *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsu__tTimestampFault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_std__string, SOAP_TYPE_std__string, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::string *p;
	size_t k = sizeof(std::string);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::string);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::string, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::string location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_std__string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__sendBillResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__sendBillResponse::applicationResponse = NULL;
	/* transient soap skipped */
}

void ns1__sendBillResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToxsd__base64Binary(soap, &this->ns1__sendBillResponse::applicationResponse);
#endif
}

int ns1__sendBillResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__sendBillResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sendBillResponse(struct soap *soap, const char *tag, int id, const ns1__sendBillResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__sendBillResponse), type))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "applicationResponse", -1, &a->ns1__sendBillResponse::applicationResponse, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__sendBillResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__sendBillResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__sendBillResponse * SOAP_FMAC4 soap_in_ns1__sendBillResponse(struct soap *soap, const char *tag, ns1__sendBillResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__sendBillResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__sendBillResponse, sizeof(ns1__sendBillResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__sendBillResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__sendBillResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_applicationResponse1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_applicationResponse1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToxsd__base64Binary(soap, "applicationResponse", &a->ns1__sendBillResponse::applicationResponse, "xsd:base64Binary"))
				{	soap_flag_applicationResponse1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__sendBillResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__sendBillResponse, SOAP_TYPE_ns1__sendBillResponse, sizeof(ns1__sendBillResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__sendBillResponse * SOAP_FMAC2 soap_instantiate_ns1__sendBillResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__sendBillResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__sendBillResponse *p;
	size_t k = sizeof(ns1__sendBillResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__sendBillResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__sendBillResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__sendBillResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__sendBillResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__sendBillResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__sendBillResponse(soap, tag ? tag : "ns1:sendBillResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__sendBillResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__sendBillResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__sendBillResponse * SOAP_FMAC4 soap_get_ns1__sendBillResponse(struct soap *soap, ns1__sendBillResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__sendBillResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__sendBill::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__sendBill::fileName = NULL;
	this->ns1__sendBill::contentFile = NULL;
	this->ns1__sendBill::partyType = NULL;
	/* transient soap skipped */
}

void ns1__sendBill::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__sendBill::fileName);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->ns1__sendBill::contentFile);
	soap_serialize_PointerTostd__string(soap, &this->ns1__sendBill::partyType);
#endif
}

int ns1__sendBill::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__sendBill(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sendBill(struct soap *soap, const char *tag, int id, const ns1__sendBill *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__sendBill), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "fileName", -1, &a->ns1__sendBill::fileName, ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "contentFile", -1, &a->ns1__sendBill::contentFile, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "partyType", -1, &a->ns1__sendBill::partyType, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__sendBill::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__sendBill(soap, tag, this, type);
}

SOAP_FMAC3 ns1__sendBill * SOAP_FMAC4 soap_in_ns1__sendBill(struct soap *soap, const char *tag, ns1__sendBill *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__sendBill *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__sendBill, sizeof(ns1__sendBill), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__sendBill)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__sendBill *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_fileName1 = 1;
	size_t soap_flag_contentFile1 = 1;
	size_t soap_flag_partyType1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fileName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "fileName", &a->ns1__sendBill::fileName, "xsd:string"))
				{	soap_flag_fileName1--;
					continue;
				}
			}
			if (soap_flag_contentFile1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToxsd__base64Binary(soap, "contentFile", &a->ns1__sendBill::contentFile, "xsd:base64Binary"))
				{	soap_flag_contentFile1--;
					continue;
				}
			}
			if (soap_flag_partyType1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "partyType", &a->ns1__sendBill::partyType, "xsd:string"))
				{	soap_flag_partyType1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__sendBill *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__sendBill, SOAP_TYPE_ns1__sendBill, sizeof(ns1__sendBill), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__sendBill * SOAP_FMAC2 soap_instantiate_ns1__sendBill(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__sendBill(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__sendBill *p;
	size_t k = sizeof(ns1__sendBill);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__sendBill, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__sendBill);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__sendBill, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__sendBill location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__sendBill::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__sendBill(soap, tag ? tag : "ns1:sendBill", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__sendBill::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__sendBill(soap, this, tag, type);
}

SOAP_FMAC3 ns1__sendBill * SOAP_FMAC4 soap_get_ns1__sendBill(struct soap *soap, ns1__sendBill *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__sendBill(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__sendPackResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__sendPackResponse::ticket = NULL;
	/* transient soap skipped */
}

void ns1__sendPackResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__sendPackResponse::ticket);
#endif
}

int ns1__sendPackResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__sendPackResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sendPackResponse(struct soap *soap, const char *tag, int id, const ns1__sendPackResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__sendPackResponse), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ticket", -1, &a->ns1__sendPackResponse::ticket, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__sendPackResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__sendPackResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__sendPackResponse * SOAP_FMAC4 soap_in_ns1__sendPackResponse(struct soap *soap, const char *tag, ns1__sendPackResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__sendPackResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__sendPackResponse, sizeof(ns1__sendPackResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__sendPackResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__sendPackResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_ticket1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ticket1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ticket", &a->ns1__sendPackResponse::ticket, "xsd:string"))
				{	soap_flag_ticket1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__sendPackResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__sendPackResponse, SOAP_TYPE_ns1__sendPackResponse, sizeof(ns1__sendPackResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__sendPackResponse * SOAP_FMAC2 soap_instantiate_ns1__sendPackResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__sendPackResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__sendPackResponse *p;
	size_t k = sizeof(ns1__sendPackResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__sendPackResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__sendPackResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__sendPackResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__sendPackResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__sendPackResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__sendPackResponse(soap, tag ? tag : "ns1:sendPackResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__sendPackResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__sendPackResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__sendPackResponse * SOAP_FMAC4 soap_get_ns1__sendPackResponse(struct soap *soap, ns1__sendPackResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__sendPackResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__sendPack::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__sendPack::fileName = NULL;
	this->ns1__sendPack::contentFile = NULL;
	this->ns1__sendPack::partyType = NULL;
	/* transient soap skipped */
}

void ns1__sendPack::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__sendPack::fileName);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->ns1__sendPack::contentFile);
	soap_serialize_PointerTostd__string(soap, &this->ns1__sendPack::partyType);
#endif
}

int ns1__sendPack::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__sendPack(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sendPack(struct soap *soap, const char *tag, int id, const ns1__sendPack *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__sendPack), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "fileName", -1, &a->ns1__sendPack::fileName, ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "contentFile", -1, &a->ns1__sendPack::contentFile, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "partyType", -1, &a->ns1__sendPack::partyType, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__sendPack::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__sendPack(soap, tag, this, type);
}

SOAP_FMAC3 ns1__sendPack * SOAP_FMAC4 soap_in_ns1__sendPack(struct soap *soap, const char *tag, ns1__sendPack *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__sendPack *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__sendPack, sizeof(ns1__sendPack), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__sendPack)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__sendPack *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_fileName1 = 1;
	size_t soap_flag_contentFile1 = 1;
	size_t soap_flag_partyType1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fileName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "fileName", &a->ns1__sendPack::fileName, "xsd:string"))
				{	soap_flag_fileName1--;
					continue;
				}
			}
			if (soap_flag_contentFile1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToxsd__base64Binary(soap, "contentFile", &a->ns1__sendPack::contentFile, "xsd:base64Binary"))
				{	soap_flag_contentFile1--;
					continue;
				}
			}
			if (soap_flag_partyType1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "partyType", &a->ns1__sendPack::partyType, "xsd:string"))
				{	soap_flag_partyType1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__sendPack *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__sendPack, SOAP_TYPE_ns1__sendPack, sizeof(ns1__sendPack), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__sendPack * SOAP_FMAC2 soap_instantiate_ns1__sendPack(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__sendPack(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__sendPack *p;
	size_t k = sizeof(ns1__sendPack);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__sendPack, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__sendPack);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__sendPack, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__sendPack location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__sendPack::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__sendPack(soap, tag ? tag : "ns1:sendPack", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__sendPack::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__sendPack(soap, this, tag, type);
}

SOAP_FMAC3 ns1__sendPack * SOAP_FMAC4 soap_get_ns1__sendPack(struct soap *soap, ns1__sendPack *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__sendPack(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__statusResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__statusResponse::content = NULL;
	this->ns1__statusResponse::statusCode = NULL;
	/* transient soap skipped */
}

void ns1__statusResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToxsd__base64Binary(soap, &this->ns1__statusResponse::content);
	soap_serialize_PointerTostd__string(soap, &this->ns1__statusResponse::statusCode);
#endif
}

int ns1__statusResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__statusResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__statusResponse(struct soap *soap, const char *tag, int id, const ns1__statusResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__statusResponse), type))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "content", -1, &a->ns1__statusResponse::content, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "statusCode", -1, &a->ns1__statusResponse::statusCode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__statusResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__statusResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__statusResponse * SOAP_FMAC4 soap_in_ns1__statusResponse(struct soap *soap, const char *tag, ns1__statusResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__statusResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__statusResponse, sizeof(ns1__statusResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__statusResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__statusResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_content1 = 1;
	size_t soap_flag_statusCode1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_content1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToxsd__base64Binary(soap, "content", &a->ns1__statusResponse::content, "xsd:base64Binary"))
				{	soap_flag_content1--;
					continue;
				}
			}
			if (soap_flag_statusCode1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "statusCode", &a->ns1__statusResponse::statusCode, "xsd:string"))
				{	soap_flag_statusCode1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__statusResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__statusResponse, SOAP_TYPE_ns1__statusResponse, sizeof(ns1__statusResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__statusResponse * SOAP_FMAC2 soap_instantiate_ns1__statusResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__statusResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__statusResponse *p;
	size_t k = sizeof(ns1__statusResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__statusResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__statusResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__statusResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__statusResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__statusResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__statusResponse(soap, tag ? tag : "ns1:statusResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__statusResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__statusResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__statusResponse * SOAP_FMAC4 soap_get_ns1__statusResponse(struct soap *soap, ns1__statusResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__statusResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__getStatusResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__getStatusResponse::status = NULL;
	/* transient soap skipped */
}

void ns1__getStatusResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__statusResponse(soap, &this->ns1__getStatusResponse::status);
#endif
}

int ns1__getStatusResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getStatusResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getStatusResponse(struct soap *soap, const char *tag, int id, const ns1__getStatusResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getStatusResponse), type))
		return soap->error;
	if (soap_out_PointerTons1__statusResponse(soap, "status", -1, &a->ns1__getStatusResponse::status, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__getStatusResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__getStatusResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getStatusResponse * SOAP_FMAC4 soap_in_ns1__getStatusResponse(struct soap *soap, const char *tag, ns1__getStatusResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getStatusResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getStatusResponse, sizeof(ns1__getStatusResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__getStatusResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__getStatusResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_status1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_status1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__statusResponse(soap, "status", &a->ns1__getStatusResponse::status, "ns1:statusResponse"))
				{	soap_flag_status1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__getStatusResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getStatusResponse, SOAP_TYPE_ns1__getStatusResponse, sizeof(ns1__getStatusResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__getStatusResponse * SOAP_FMAC2 soap_instantiate_ns1__getStatusResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getStatusResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__getStatusResponse *p;
	size_t k = sizeof(ns1__getStatusResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__getStatusResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__getStatusResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__getStatusResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__getStatusResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__getStatusResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__getStatusResponse(soap, tag ? tag : "ns1:getStatusResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getStatusResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getStatusResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getStatusResponse * SOAP_FMAC4 soap_get_ns1__getStatusResponse(struct soap *soap, ns1__getStatusResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getStatusResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__getStatus::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__getStatus::ticket = NULL;
	/* transient soap skipped */
}

void ns1__getStatus::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__getStatus::ticket);
#endif
}

int ns1__getStatus::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__getStatus(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getStatus(struct soap *soap, const char *tag, int id, const ns1__getStatus *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__getStatus), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ticket", -1, &a->ns1__getStatus::ticket, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__getStatus::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__getStatus(soap, tag, this, type);
}

SOAP_FMAC3 ns1__getStatus * SOAP_FMAC4 soap_in_ns1__getStatus(struct soap *soap, const char *tag, ns1__getStatus *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__getStatus *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__getStatus, sizeof(ns1__getStatus), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__getStatus)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__getStatus *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_ticket1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ticket1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ticket", &a->ns1__getStatus::ticket, "xsd:string"))
				{	soap_flag_ticket1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__getStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__getStatus, SOAP_TYPE_ns1__getStatus, sizeof(ns1__getStatus), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__getStatus * SOAP_FMAC2 soap_instantiate_ns1__getStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__getStatus(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__getStatus *p;
	size_t k = sizeof(ns1__getStatus);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__getStatus, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__getStatus);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__getStatus, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__getStatus location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__getStatus::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__getStatus(soap, tag ? tag : "ns1:getStatus", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__getStatus::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__getStatus(soap, this, tag, type);
}

SOAP_FMAC3 ns1__getStatus * SOAP_FMAC4 soap_get_ns1__getStatus(struct soap *soap, ns1__getStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__getStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__sendSummaryResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__sendSummaryResponse::ticket = NULL;
	/* transient soap skipped */
}

void ns1__sendSummaryResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__sendSummaryResponse::ticket);
#endif
}

int ns1__sendSummaryResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__sendSummaryResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sendSummaryResponse(struct soap *soap, const char *tag, int id, const ns1__sendSummaryResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__sendSummaryResponse), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ticket", -1, &a->ns1__sendSummaryResponse::ticket, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__sendSummaryResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__sendSummaryResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__sendSummaryResponse * SOAP_FMAC4 soap_in_ns1__sendSummaryResponse(struct soap *soap, const char *tag, ns1__sendSummaryResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__sendSummaryResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__sendSummaryResponse, sizeof(ns1__sendSummaryResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__sendSummaryResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__sendSummaryResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_ticket1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ticket1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ticket", &a->ns1__sendSummaryResponse::ticket, "xsd:string"))
				{	soap_flag_ticket1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__sendSummaryResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__sendSummaryResponse, SOAP_TYPE_ns1__sendSummaryResponse, sizeof(ns1__sendSummaryResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__sendSummaryResponse * SOAP_FMAC2 soap_instantiate_ns1__sendSummaryResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__sendSummaryResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__sendSummaryResponse *p;
	size_t k = sizeof(ns1__sendSummaryResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__sendSummaryResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__sendSummaryResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__sendSummaryResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__sendSummaryResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__sendSummaryResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__sendSummaryResponse(soap, tag ? tag : "ns1:sendSummaryResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__sendSummaryResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__sendSummaryResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__sendSummaryResponse * SOAP_FMAC4 soap_get_ns1__sendSummaryResponse(struct soap *soap, ns1__sendSummaryResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__sendSummaryResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__sendSummary::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__sendSummary::fileName = NULL;
	this->ns1__sendSummary::contentFile = NULL;
	this->ns1__sendSummary::partyType = NULL;
	/* transient soap skipped */
}

void ns1__sendSummary::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->ns1__sendSummary::fileName);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->ns1__sendSummary::contentFile);
	soap_serialize_PointerTostd__string(soap, &this->ns1__sendSummary::partyType);
#endif
}

int ns1__sendSummary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__sendSummary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sendSummary(struct soap *soap, const char *tag, int id, const ns1__sendSummary *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__sendSummary), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "fileName", -1, &a->ns1__sendSummary::fileName, ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "contentFile", -1, &a->ns1__sendSummary::contentFile, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "partyType", -1, &a->ns1__sendSummary::partyType, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__sendSummary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__sendSummary(soap, tag, this, type);
}

SOAP_FMAC3 ns1__sendSummary * SOAP_FMAC4 soap_in_ns1__sendSummary(struct soap *soap, const char *tag, ns1__sendSummary *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__sendSummary *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__sendSummary, sizeof(ns1__sendSummary), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__sendSummary)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__sendSummary *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_fileName1 = 1;
	size_t soap_flag_contentFile1 = 1;
	size_t soap_flag_partyType1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fileName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "fileName", &a->ns1__sendSummary::fileName, "xsd:string"))
				{	soap_flag_fileName1--;
					continue;
				}
			}
			if (soap_flag_contentFile1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToxsd__base64Binary(soap, "contentFile", &a->ns1__sendSummary::contentFile, "xsd:base64Binary"))
				{	soap_flag_contentFile1--;
					continue;
				}
			}
			if (soap_flag_partyType1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "partyType", &a->ns1__sendSummary::partyType, "xsd:string"))
				{	soap_flag_partyType1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__sendSummary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__sendSummary, SOAP_TYPE_ns1__sendSummary, sizeof(ns1__sendSummary), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__sendSummary * SOAP_FMAC2 soap_instantiate_ns1__sendSummary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__sendSummary(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__sendSummary *p;
	size_t k = sizeof(ns1__sendSummary);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns1__sendSummary, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, ns1__sendSummary);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, ns1__sendSummary, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__sendSummary location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int ns1__sendSummary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__sendSummary(soap, tag ? tag : "ns1:sendSummary", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__sendSummary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__sendSummary(soap, this, tag, type);
}

SOAP_FMAC3 ns1__sendSummary * SOAP_FMAC4 soap_get_ns1__sendSummary(struct soap *soap, ns1__sendSummary *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__sendSummary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__base64Binary::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->__ptr = NULL;
	this->__size = 0;
	this->id = NULL;
	this->type = NULL;
	this->options = NULL;
}

void xsd__base64Binary::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->__ptr)
		(void)soap_attachment_reference(soap, this, this->__ptr, this->__size, SOAP_TYPE_xsd__base64Binary, this->id, this->type);
#endif
}

SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__base64Binary2s(struct soap *soap, xsd__base64Binary a)
{
	return soap_s2base64(soap, a.__ptr, NULL, a.__size);
}

int xsd__base64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_xsd__base64Binary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const xsd__base64Binary *a, const char *type)
{
#ifndef WITH_LEANER
	id = soap_attachment(soap, tag, id, a, a->__ptr, a->__size, a->id, a->type, a->options, type, SOAP_TYPE_xsd__base64Binary);
#else
	id = soap_element_id(soap, tag, id, a, a->__ptr, a->__size, type, SOAP_TYPE_xsd__base64Binary, NULL);
#endif
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	if (soap_putbase64(soap, a->__ptr, a->__size))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__base64Binary(struct soap *soap, const char *s, xsd__base64Binary *a)
{
	a->__ptr = (unsigned char*)soap_base642s(soap, s, NULL, 0, &a->__size);
	if (!a->__ptr)
		return soap->error;
	return SOAP_OK;
}

void *xsd__base64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__base64Binary(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (xsd__base64Binary *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
#ifndef WITH_LEANER
		if (soap_xop_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
			return NULL;
#endif
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	
#ifndef WITH_LEANER
		if (*soap->href != '#')
		{	if (soap_attachment_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
				return NULL;
		}
		else
#endif
			a = (xsd__base64Binary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xsd__base64Binary, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__base64Binary *p;
	size_t k = sizeof(xsd__base64Binary);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xsd__base64Binary, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__base64Binary);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__base64Binary, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__base64Binary location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__base64Binary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__base64Binary(soap, tag ? tag : "xsd:base64Binary", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__base64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag ? tag : "SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
			{	if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag ? tag : "SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___sunat__sendSummary(struct soap *soap, struct __sunat__sendSummary *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__sendSummary_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___sunat__sendSummary(struct soap *soap, const struct __sunat__sendSummary *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__sendSummary(soap, &a->ns1__sendSummary_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___sunat__sendSummary(struct soap *soap, const char *tag, int id, const struct __sunat__sendSummary *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__sendSummary(soap, "ns1:sendSummary", -1, &a->ns1__sendSummary_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __sunat__sendSummary * SOAP_FMAC4 soap_in___sunat__sendSummary(struct soap *soap, const char *tag, struct __sunat__sendSummary *a, const char *type)
{
	size_t soap_flag_ns1__sendSummary_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __sunat__sendSummary *)soap_id_enter(soap, "", a, SOAP_TYPE___sunat__sendSummary, sizeof(struct __sunat__sendSummary), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___sunat__sendSummary(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__sendSummary_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__sendSummary(soap, "ns1:sendSummary", &a->ns1__sendSummary_, "ns1:sendSummary"))
				{	soap_flag_ns1__sendSummary_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __sunat__sendSummary * SOAP_FMAC2 soap_instantiate___sunat__sendSummary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___sunat__sendSummary(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __sunat__sendSummary *p;
	size_t k = sizeof(struct __sunat__sendSummary);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___sunat__sendSummary, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __sunat__sendSummary);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __sunat__sendSummary, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __sunat__sendSummary location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___sunat__sendSummary(struct soap *soap, const struct __sunat__sendSummary *a, const char *tag, const char *type)
{
	if (soap_out___sunat__sendSummary(soap, tag ? tag : "-sunat:sendSummary", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __sunat__sendSummary * SOAP_FMAC4 soap_get___sunat__sendSummary(struct soap *soap, struct __sunat__sendSummary *p, const char *tag, const char *type)
{
	if ((p = soap_in___sunat__sendSummary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___sunat__sendPack(struct soap *soap, struct __sunat__sendPack *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__sendPack_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___sunat__sendPack(struct soap *soap, const struct __sunat__sendPack *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__sendPack(soap, &a->ns1__sendPack_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___sunat__sendPack(struct soap *soap, const char *tag, int id, const struct __sunat__sendPack *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__sendPack(soap, "ns1:sendPack", -1, &a->ns1__sendPack_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __sunat__sendPack * SOAP_FMAC4 soap_in___sunat__sendPack(struct soap *soap, const char *tag, struct __sunat__sendPack *a, const char *type)
{
	size_t soap_flag_ns1__sendPack_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __sunat__sendPack *)soap_id_enter(soap, "", a, SOAP_TYPE___sunat__sendPack, sizeof(struct __sunat__sendPack), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___sunat__sendPack(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__sendPack_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__sendPack(soap, "ns1:sendPack", &a->ns1__sendPack_, "ns1:sendPack"))
				{	soap_flag_ns1__sendPack_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __sunat__sendPack * SOAP_FMAC2 soap_instantiate___sunat__sendPack(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___sunat__sendPack(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __sunat__sendPack *p;
	size_t k = sizeof(struct __sunat__sendPack);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___sunat__sendPack, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __sunat__sendPack);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __sunat__sendPack, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __sunat__sendPack location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___sunat__sendPack(struct soap *soap, const struct __sunat__sendPack *a, const char *tag, const char *type)
{
	if (soap_out___sunat__sendPack(soap, tag ? tag : "-sunat:sendPack", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __sunat__sendPack * SOAP_FMAC4 soap_get___sunat__sendPack(struct soap *soap, struct __sunat__sendPack *p, const char *tag, const char *type)
{
	if ((p = soap_in___sunat__sendPack(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___sunat__sendBill(struct soap *soap, struct __sunat__sendBill *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__sendBill_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___sunat__sendBill(struct soap *soap, const struct __sunat__sendBill *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__sendBill(soap, &a->ns1__sendBill_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___sunat__sendBill(struct soap *soap, const char *tag, int id, const struct __sunat__sendBill *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__sendBill(soap, "ns1:sendBill", -1, &a->ns1__sendBill_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __sunat__sendBill * SOAP_FMAC4 soap_in___sunat__sendBill(struct soap *soap, const char *tag, struct __sunat__sendBill *a, const char *type)
{
	size_t soap_flag_ns1__sendBill_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __sunat__sendBill *)soap_id_enter(soap, "", a, SOAP_TYPE___sunat__sendBill, sizeof(struct __sunat__sendBill), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___sunat__sendBill(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__sendBill_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__sendBill(soap, "ns1:sendBill", &a->ns1__sendBill_, "ns1:sendBill"))
				{	soap_flag_ns1__sendBill_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __sunat__sendBill * SOAP_FMAC2 soap_instantiate___sunat__sendBill(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___sunat__sendBill(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __sunat__sendBill *p;
	size_t k = sizeof(struct __sunat__sendBill);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___sunat__sendBill, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __sunat__sendBill);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __sunat__sendBill, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __sunat__sendBill location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___sunat__sendBill(struct soap *soap, const struct __sunat__sendBill *a, const char *tag, const char *type)
{
	if (soap_out___sunat__sendBill(soap, tag ? tag : "-sunat:sendBill", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __sunat__sendBill * SOAP_FMAC4 soap_get___sunat__sendBill(struct soap *soap, struct __sunat__sendBill *p, const char *tag, const char *type)
{
	if ((p = soap_in___sunat__sendBill(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___sunat__getStatus(struct soap *soap, struct __sunat__getStatus *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getStatus_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___sunat__getStatus(struct soap *soap, const struct __sunat__getStatus *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__getStatus(soap, &a->ns1__getStatus_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___sunat__getStatus(struct soap *soap, const char *tag, int id, const struct __sunat__getStatus *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__getStatus(soap, "ns1:getStatus", -1, &a->ns1__getStatus_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __sunat__getStatus * SOAP_FMAC4 soap_in___sunat__getStatus(struct soap *soap, const char *tag, struct __sunat__getStatus *a, const char *type)
{
	size_t soap_flag_ns1__getStatus_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __sunat__getStatus *)soap_id_enter(soap, "", a, SOAP_TYPE___sunat__getStatus, sizeof(struct __sunat__getStatus), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___sunat__getStatus(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getStatus_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__getStatus(soap, "ns1:getStatus", &a->ns1__getStatus_, "ns1:getStatus"))
				{	soap_flag_ns1__getStatus_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __sunat__getStatus * SOAP_FMAC2 soap_instantiate___sunat__getStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___sunat__getStatus(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __sunat__getStatus *p;
	size_t k = sizeof(struct __sunat__getStatus);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___sunat__getStatus, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __sunat__getStatus);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __sunat__getStatus, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __sunat__getStatus location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___sunat__getStatus(struct soap *soap, const struct __sunat__getStatus *a, const char *tag, const char *type)
{
	if (soap_out___sunat__getStatus(soap, tag ? tag : "-sunat:getStatus", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __sunat__getStatus * SOAP_FMAC4 soap_get___sunat__getStatus(struct soap *soap, struct __sunat__getStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in___sunat__getStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__Security(struct soap *soap, struct _wsse__Security *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->wsu__Timestamp = NULL;
	a->UsernameToken = NULL;
	a->BinarySecurityToken = NULL;
	a->xenc__EncryptedKey = NULL;
	a->xenc__ReferenceList = NULL;
	a->ds__Signature = NULL;
	a->saml1__Assertion = NULL;
	a->saml2__Assertion = NULL;
	soap_default_string(soap, &a->SOAP_ENV__actor);
	soap_default_string(soap, &a->SOAP_ENV__role);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__Security(struct soap *soap, const struct _wsse__Security *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_wsu__Timestamp(soap, &a->wsu__Timestamp);
	soap_serialize_PointerTo_wsse__UsernameToken(soap, &a->UsernameToken);
	soap_serialize_PointerTo_wsse__BinarySecurityToken(soap, &a->BinarySecurityToken);
	soap_serialize_PointerToxenc__EncryptedKeyType(soap, &a->xenc__EncryptedKey);
	soap_serialize_PointerTo_xenc__ReferenceList(soap, &a->xenc__ReferenceList);
	soap_serialize_PointerTods__SignatureType(soap, &a->ds__Signature);
	soap_serialize_PointerTosaml1__AssertionType(soap, &a->saml1__Assertion);
	soap_serialize_PointerTosaml2__AssertionType(soap, &a->saml2__Assertion);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__Security(struct soap *soap, const char *tag, int id, const struct _wsse__Security *a, const char *type)
{
	if (a->SOAP_ENV__actor)
		soap_set_attr(soap, "SOAP-ENV:actor", soap_string2s(soap, a->SOAP_ENV__actor), 1);
	if (a->SOAP_ENV__role)
		soap_set_attr(soap, "SOAP-ENV:role", soap_string2s(soap, a->SOAP_ENV__role), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsse__Security), type))
		return soap->error;
	if (soap_out_PointerTo_wsu__Timestamp(soap, "wsu:Timestamp", -1, &a->wsu__Timestamp, ""))
		return soap->error;
	if (soap_out_PointerTo_wsse__UsernameToken(soap, "wsse:UsernameToken", -1, &a->UsernameToken, ""))
		return soap->error;
	if (soap_out_PointerTo_wsse__BinarySecurityToken(soap, "wsse:BinarySecurityToken", -1, &a->BinarySecurityToken, ""))
		return soap->error;
	if (soap_out_PointerToxenc__EncryptedKeyType(soap, "xenc:EncryptedKey", -1, &a->xenc__EncryptedKey, ""))
		return soap->error;
	if (soap_out_PointerTo_xenc__ReferenceList(soap, "xenc:ReferenceList", -1, &a->xenc__ReferenceList, ""))
		return soap->error;
	if (soap_out_PointerTods__SignatureType(soap, "ds:Signature", -1, &a->ds__Signature, ""))
		return soap->error;
	if (soap_out_PointerTosaml1__AssertionType(soap, "saml1:Assertion", -1, &a->saml1__Assertion, ""))
		return soap->error;
	if (soap_out_PointerTosaml2__AssertionType(soap, "saml2:Assertion", -1, &a->saml2__Assertion, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct _wsse__Security * SOAP_FMAC4 soap_in__wsse__Security(struct soap *soap, const char *tag, struct _wsse__Security *a, const char *type)
{
	size_t soap_flag_wsu__Timestamp = 1;
	size_t soap_flag_UsernameToken = 1;
	size_t soap_flag_BinarySecurityToken = 1;
	size_t soap_flag_xenc__EncryptedKey = 1;
	size_t soap_flag_xenc__ReferenceList = 1;
	size_t soap_flag_ds__Signature = 1;
	size_t soap_flag_saml1__Assertion = 1;
	size_t soap_flag_saml2__Assertion = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct _wsse__Security *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__wsse__Security, sizeof(struct _wsse__Security), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default__wsse__Security(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "SOAP-ENV:actor", 1, 0), &a->SOAP_ENV__actor))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "SOAP-ENV:role", 1, 0), &a->SOAP_ENV__role))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_wsu__Timestamp && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_wsu__Timestamp(soap, "wsu:Timestamp", &a->wsu__Timestamp, ""))
				{	soap_flag_wsu__Timestamp--;
					continue;
				}
			}
			if (soap_flag_UsernameToken && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_wsse__UsernameToken(soap, "wsse:UsernameToken", &a->UsernameToken, ""))
				{	soap_flag_UsernameToken--;
					continue;
				}
			}
			if (soap_flag_BinarySecurityToken && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_wsse__BinarySecurityToken(soap, "wsse:BinarySecurityToken", &a->BinarySecurityToken, ""))
				{	soap_flag_BinarySecurityToken--;
					continue;
				}
			}
			if (soap_flag_xenc__EncryptedKey && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToxenc__EncryptedKeyType(soap, "xenc:EncryptedKey", &a->xenc__EncryptedKey, "xenc:EncryptedKeyType"))
				{	soap_flag_xenc__EncryptedKey--;
					continue;
				}
			}
			if (soap_flag_xenc__ReferenceList && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_xenc__ReferenceList(soap, "xenc:ReferenceList", &a->xenc__ReferenceList, ""))
				{	soap_flag_xenc__ReferenceList--;
					continue;
				}
			}
			if (soap_flag_ds__Signature && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTods__SignatureType(soap, "ds:Signature", &a->ds__Signature, "ds:SignatureType"))
				{	soap_flag_ds__Signature--;
					continue;
				}
			}
			if (soap_flag_saml1__Assertion && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml1__AssertionType(soap, "saml1:Assertion", &a->saml1__Assertion, "saml1:AssertionType"))
				{	soap_flag_saml1__Assertion--;
					continue;
				}
			}
			if (soap_flag_saml2__Assertion && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml2__AssertionType(soap, "saml2:Assertion", &a->saml2__Assertion, "saml2:AssertionType"))
				{	soap_flag_saml2__Assertion--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct _wsse__Security *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsse__Security, SOAP_TYPE__wsse__Security, sizeof(struct _wsse__Security), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct _wsse__Security * SOAP_FMAC2 soap_instantiate__wsse__Security(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsse__Security(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct _wsse__Security *p;
	size_t k = sizeof(struct _wsse__Security);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__wsse__Security, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct _wsse__Security);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct _wsse__Security, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct _wsse__Security location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__Security(struct soap *soap, const struct _wsse__Security *a, const char *tag, const char *type)
{
	if (soap_out__wsse__Security(soap, tag ? tag : "wsse:Security", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct _wsse__Security * SOAP_FMAC4 soap_get__wsse__Security(struct soap *soap, struct _wsse__Security *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsse__Security(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__EncryptedAttribute(struct soap *soap, const struct saml2__EncryptedElementType *a, const char *tag, const char *type)
{
	if (soap_out__saml2__EncryptedAttribute(soap, tag ? tag : "saml2:EncryptedAttribute", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Attribute(struct soap *soap, const struct saml2__AttributeType *a, const char *tag, const char *type)
{
	if (soap_out__saml2__Attribute(soap, tag ? tag : "saml2:Attribute", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AttributeStatement(struct soap *soap, const struct saml2__AttributeStatementType *a, const char *tag, const char *type)
{
	if (soap_out__saml2__AttributeStatement(soap, tag ? tag : "saml2:AttributeStatement", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Evidence(struct soap *soap, const struct saml2__EvidenceType *a, const char *tag, const char *type)
{
	if (soap_out__saml2__Evidence(soap, tag ? tag : "saml2:Evidence", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Action(struct soap *soap, const struct saml2__ActionType *a, const char *tag, const char *type)
{
	if (soap_out__saml2__Action(soap, tag ? tag : "saml2:Action", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AuthzDecisionStatement(struct soap *soap, const struct saml2__AuthzDecisionStatementType *a, const char *tag, const char *type)
{
	if (soap_out__saml2__AuthzDecisionStatement(soap, tag ? tag : "saml2:AuthzDecisionStatement", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AuthnContext(struct soap *soap, const struct saml2__AuthnContextType *a, const char *tag, const char *type)
{
	if (soap_out__saml2__AuthnContext(soap, tag ? tag : "saml2:AuthnContext", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__SubjectLocality(struct soap *soap, const struct saml2__SubjectLocalityType *a, const char *tag, const char *type)
{
	if (soap_out__saml2__SubjectLocality(soap, tag ? tag : "saml2:SubjectLocality", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AuthnStatement(struct soap *soap, const struct saml2__AuthnStatementType *a, const char *tag, const char *type)
{
	if (soap_out__saml2__AuthnStatement(soap, tag ? tag : "saml2:AuthnStatement", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Statement(struct soap *soap, const struct saml2__StatementAbstractType *a, const char *tag, const char *type)
{
	if (soap_out__saml2__Statement(soap, tag ? tag : "saml2:Statement", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__EncryptedAssertion(struct soap *soap, const struct saml2__EncryptedElementType *a, const char *tag, const char *type)
{
	if (soap_out__saml2__EncryptedAssertion(soap, tag ? tag : "saml2:EncryptedAssertion", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Advice(struct soap *soap, const struct saml2__AdviceType *a, const char *tag, const char *type)
{
	if (soap_out__saml2__Advice(soap, tag ? tag : "saml2:Advice", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__ProxyRestriction(struct soap *soap, const struct saml2__ProxyRestrictionType *a, const char *tag, const char *type)
{
	if (soap_out__saml2__ProxyRestriction(soap, tag ? tag : "saml2:ProxyRestriction", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__OneTimeUse(struct soap *soap, const struct saml2__OneTimeUseType *a, const char *tag, const char *type)
{
	if (soap_out__saml2__OneTimeUse(soap, tag ? tag : "saml2:OneTimeUse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AudienceRestriction(struct soap *soap, const struct saml2__AudienceRestrictionType *a, const char *tag, const char *type)
{
	if (soap_out__saml2__AudienceRestriction(soap, tag ? tag : "saml2:AudienceRestriction", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Condition(struct soap *soap, const struct saml2__ConditionAbstractType *a, const char *tag, const char *type)
{
	if (soap_out__saml2__Condition(soap, tag ? tag : "saml2:Condition", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Conditions(struct soap *soap, const struct saml2__ConditionsType *a, const char *tag, const char *type)
{
	if (soap_out__saml2__Conditions(soap, tag ? tag : "saml2:Conditions", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__SubjectConfirmationData(struct soap *soap, const struct saml2__SubjectConfirmationDataType *a, const char *tag, const char *type)
{
	if (soap_out__saml2__SubjectConfirmationData(soap, tag ? tag : "saml2:SubjectConfirmationData", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__SubjectConfirmation(struct soap *soap, const struct saml2__SubjectConfirmationType *a, const char *tag, const char *type)
{
	if (soap_out__saml2__SubjectConfirmation(soap, tag ? tag : "saml2:SubjectConfirmation", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Subject(struct soap *soap, const struct saml2__SubjectType *a, const char *tag, const char *type)
{
	if (soap_out__saml2__Subject(soap, tag ? tag : "saml2:Subject", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Assertion(struct soap *soap, const struct saml2__AssertionType *a, const char *tag, const char *type)
{
	if (soap_out__saml2__Assertion(soap, tag ? tag : "saml2:Assertion", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Issuer(struct soap *soap, const struct saml2__NameIDType *a, const char *tag, const char *type)
{
	if (soap_out__saml2__Issuer(soap, tag ? tag : "saml2:Issuer", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__EncryptedID(struct soap *soap, const struct saml2__EncryptedElementType *a, const char *tag, const char *type)
{
	if (soap_out__saml2__EncryptedID(soap, tag ? tag : "saml2:EncryptedID", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__NameID(struct soap *soap, const struct saml2__NameIDType *a, const char *tag, const char *type)
{
	if (soap_out__saml2__NameID(soap, tag ? tag : "saml2:NameID", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__BaseID(struct soap *soap, const struct saml2__BaseIDAbstractType *a, const char *tag, const char *type)
{
	if (soap_out__saml2__BaseID(soap, tag ? tag : "saml2:BaseID", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml2__union_AttributeStatementType(struct soap *soap, struct __saml2__union_AttributeStatementType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->saml2__Attribute = NULL;
	a->saml2__EncryptedAttribute = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml2__union_AttributeStatementType(struct soap *soap, const struct __saml2__union_AttributeStatementType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTosaml2__AttributeType(soap, &a->saml2__Attribute);
	soap_serialize_PointerTosaml2__EncryptedElementType(soap, &a->saml2__EncryptedAttribute);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml2__union_AttributeStatementType(struct soap *soap, const char *tag, int id, const struct __saml2__union_AttributeStatementType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTosaml2__AttributeType(soap, "saml2:Attribute", -1, &a->saml2__Attribute, ""))
		return soap->error;
	if (soap_out_PointerTosaml2__EncryptedElementType(soap, "saml2:EncryptedAttribute", -1, &a->saml2__EncryptedAttribute, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __saml2__union_AttributeStatementType * SOAP_FMAC4 soap_in___saml2__union_AttributeStatementType(struct soap *soap, const char *tag, struct __saml2__union_AttributeStatementType *a, const char *type)
{
	size_t soap_flag_saml2__Attribute = 1;
	size_t soap_flag_saml2__EncryptedAttribute = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __saml2__union_AttributeStatementType *)soap_id_enter(soap, "", a, SOAP_TYPE___saml2__union_AttributeStatementType, sizeof(struct __saml2__union_AttributeStatementType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___saml2__union_AttributeStatementType(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_saml2__Attribute && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml2__AttributeType(soap, "saml2:Attribute", &a->saml2__Attribute, "saml2:AttributeType"))
				{	soap_flag_saml2__Attribute--;
					continue;
				}
			}
			if (soap_flag_saml2__EncryptedAttribute && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml2__EncryptedElementType(soap, "saml2:EncryptedAttribute", &a->saml2__EncryptedAttribute, "saml2:EncryptedElementType"))
				{	soap_flag_saml2__EncryptedAttribute--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __saml2__union_AttributeStatementType * SOAP_FMAC2 soap_instantiate___saml2__union_AttributeStatementType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___saml2__union_AttributeStatementType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __saml2__union_AttributeStatementType *p;
	size_t k = sizeof(struct __saml2__union_AttributeStatementType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___saml2__union_AttributeStatementType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __saml2__union_AttributeStatementType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __saml2__union_AttributeStatementType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __saml2__union_AttributeStatementType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml2__union_AttributeStatementType(struct soap *soap, const struct __saml2__union_AttributeStatementType *a, const char *tag, const char *type)
{
	if (soap_out___saml2__union_AttributeStatementType(soap, tag ? tag : "-saml2:union-AttributeStatementType", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __saml2__union_AttributeStatementType * SOAP_FMAC4 soap_get___saml2__union_AttributeStatementType(struct soap *soap, struct __saml2__union_AttributeStatementType *p, const char *tag, const char *type)
{
	if ((p = soap_in___saml2__union_AttributeStatementType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml2__union_EvidenceType(struct soap *soap, struct __saml2__union_EvidenceType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->saml2__AssertionIDRef);
	soap_default_string(soap, &a->saml2__AssertionURIRef);
	a->saml2__Assertion = NULL;
	a->saml2__EncryptedAssertion = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml2__union_EvidenceType(struct soap *soap, const struct __saml2__union_EvidenceType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->saml2__AssertionIDRef);
	soap_serialize_string(soap, (char*const*)&a->saml2__AssertionURIRef);
	soap_serialize_PointerTosaml2__AssertionType(soap, &a->saml2__Assertion);
	soap_serialize_PointerTosaml2__EncryptedElementType(soap, &a->saml2__EncryptedAssertion);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml2__union_EvidenceType(struct soap *soap, const char *tag, int id, const struct __saml2__union_EvidenceType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_string(soap, "saml2:AssertionIDRef", -1, (char*const*)&a->saml2__AssertionIDRef, ""))
		return soap->error;
	if (soap_out_string(soap, "saml2:AssertionURIRef", -1, (char*const*)&a->saml2__AssertionURIRef, ""))
		return soap->error;
	if (soap_out_PointerTosaml2__AssertionType(soap, "saml2:Assertion", -1, &a->saml2__Assertion, ""))
		return soap->error;
	if (soap_out_PointerTosaml2__EncryptedElementType(soap, "saml2:EncryptedAssertion", -1, &a->saml2__EncryptedAssertion, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __saml2__union_EvidenceType * SOAP_FMAC4 soap_in___saml2__union_EvidenceType(struct soap *soap, const char *tag, struct __saml2__union_EvidenceType *a, const char *type)
{
	size_t soap_flag_saml2__AssertionIDRef = 1;
	size_t soap_flag_saml2__AssertionURIRef = 1;
	size_t soap_flag_saml2__Assertion = 1;
	size_t soap_flag_saml2__EncryptedAssertion = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __saml2__union_EvidenceType *)soap_id_enter(soap, "", a, SOAP_TYPE___saml2__union_EvidenceType, sizeof(struct __saml2__union_EvidenceType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___saml2__union_EvidenceType(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_saml2__AssertionIDRef && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "saml2:AssertionIDRef", (char**)&a->saml2__AssertionIDRef, "xsd:string"))
				{	soap_flag_saml2__AssertionIDRef--;
					continue;
				}
			}
			if (soap_flag_saml2__AssertionURIRef && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "saml2:AssertionURIRef", (char**)&a->saml2__AssertionURIRef, "xsd:string"))
				{	soap_flag_saml2__AssertionURIRef--;
					continue;
				}
			}
			if (soap_flag_saml2__Assertion && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml2__AssertionType(soap, "saml2:Assertion", &a->saml2__Assertion, "saml2:AssertionType"))
				{	soap_flag_saml2__Assertion--;
					continue;
				}
			}
			if (soap_flag_saml2__EncryptedAssertion && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml2__EncryptedElementType(soap, "saml2:EncryptedAssertion", &a->saml2__EncryptedAssertion, "saml2:EncryptedElementType"))
				{	soap_flag_saml2__EncryptedAssertion--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __saml2__union_EvidenceType * SOAP_FMAC2 soap_instantiate___saml2__union_EvidenceType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___saml2__union_EvidenceType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __saml2__union_EvidenceType *p;
	size_t k = sizeof(struct __saml2__union_EvidenceType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___saml2__union_EvidenceType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __saml2__union_EvidenceType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __saml2__union_EvidenceType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __saml2__union_EvidenceType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml2__union_EvidenceType(struct soap *soap, const struct __saml2__union_EvidenceType *a, const char *tag, const char *type)
{
	if (soap_out___saml2__union_EvidenceType(soap, tag ? tag : "-saml2:union-EvidenceType", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __saml2__union_EvidenceType * SOAP_FMAC4 soap_get___saml2__union_EvidenceType(struct soap *soap, struct __saml2__union_EvidenceType *p, const char *tag, const char *type)
{
	if ((p = soap_in___saml2__union_EvidenceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml2__union_AdviceType(struct soap *soap, struct __saml2__union_AdviceType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->saml2__AssertionIDRef);
	soap_default_string(soap, &a->saml2__AssertionURIRef);
	a->saml2__Assertion = NULL;
	a->saml2__EncryptedAssertion = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml2__union_AdviceType(struct soap *soap, const struct __saml2__union_AdviceType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->saml2__AssertionIDRef);
	soap_serialize_string(soap, (char*const*)&a->saml2__AssertionURIRef);
	soap_serialize_PointerTosaml2__AssertionType(soap, &a->saml2__Assertion);
	soap_serialize_PointerTosaml2__EncryptedElementType(soap, &a->saml2__EncryptedAssertion);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml2__union_AdviceType(struct soap *soap, const char *tag, int id, const struct __saml2__union_AdviceType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_string(soap, "saml2:AssertionIDRef", -1, (char*const*)&a->saml2__AssertionIDRef, ""))
		return soap->error;
	if (soap_out_string(soap, "saml2:AssertionURIRef", -1, (char*const*)&a->saml2__AssertionURIRef, ""))
		return soap->error;
	if (soap_out_PointerTosaml2__AssertionType(soap, "saml2:Assertion", -1, &a->saml2__Assertion, ""))
		return soap->error;
	if (soap_out_PointerTosaml2__EncryptedElementType(soap, "saml2:EncryptedAssertion", -1, &a->saml2__EncryptedAssertion, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __saml2__union_AdviceType * SOAP_FMAC4 soap_in___saml2__union_AdviceType(struct soap *soap, const char *tag, struct __saml2__union_AdviceType *a, const char *type)
{
	size_t soap_flag_saml2__AssertionIDRef = 1;
	size_t soap_flag_saml2__AssertionURIRef = 1;
	size_t soap_flag_saml2__Assertion = 1;
	size_t soap_flag_saml2__EncryptedAssertion = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __saml2__union_AdviceType *)soap_id_enter(soap, "", a, SOAP_TYPE___saml2__union_AdviceType, sizeof(struct __saml2__union_AdviceType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___saml2__union_AdviceType(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_saml2__AssertionIDRef && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "saml2:AssertionIDRef", (char**)&a->saml2__AssertionIDRef, "xsd:string"))
				{	soap_flag_saml2__AssertionIDRef--;
					continue;
				}
			}
			if (soap_flag_saml2__AssertionURIRef && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "saml2:AssertionURIRef", (char**)&a->saml2__AssertionURIRef, "xsd:string"))
				{	soap_flag_saml2__AssertionURIRef--;
					continue;
				}
			}
			if (soap_flag_saml2__Assertion && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml2__AssertionType(soap, "saml2:Assertion", &a->saml2__Assertion, "saml2:AssertionType"))
				{	soap_flag_saml2__Assertion--;
					continue;
				}
			}
			if (soap_flag_saml2__EncryptedAssertion && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml2__EncryptedElementType(soap, "saml2:EncryptedAssertion", &a->saml2__EncryptedAssertion, "saml2:EncryptedElementType"))
				{	soap_flag_saml2__EncryptedAssertion--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __saml2__union_AdviceType * SOAP_FMAC2 soap_instantiate___saml2__union_AdviceType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___saml2__union_AdviceType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __saml2__union_AdviceType *p;
	size_t k = sizeof(struct __saml2__union_AdviceType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___saml2__union_AdviceType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __saml2__union_AdviceType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __saml2__union_AdviceType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __saml2__union_AdviceType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml2__union_AdviceType(struct soap *soap, const struct __saml2__union_AdviceType *a, const char *tag, const char *type)
{
	if (soap_out___saml2__union_AdviceType(soap, tag ? tag : "-saml2:union-AdviceType", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __saml2__union_AdviceType * SOAP_FMAC4 soap_get___saml2__union_AdviceType(struct soap *soap, struct __saml2__union_AdviceType *p, const char *tag, const char *type)
{
	if ((p = soap_in___saml2__union_AdviceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml2__union_ConditionsType(struct soap *soap, struct __saml2__union_ConditionsType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->saml2__Condition = NULL;
	a->saml2__AudienceRestriction = NULL;
	a->saml2__OneTimeUse = NULL;
	a->saml2__ProxyRestriction = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml2__union_ConditionsType(struct soap *soap, const struct __saml2__union_ConditionsType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTosaml2__ConditionAbstractType(soap, &a->saml2__Condition);
	soap_serialize_PointerTosaml2__AudienceRestrictionType(soap, &a->saml2__AudienceRestriction);
	soap_serialize_PointerTosaml2__OneTimeUseType(soap, &a->saml2__OneTimeUse);
	soap_serialize_PointerTosaml2__ProxyRestrictionType(soap, &a->saml2__ProxyRestriction);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml2__union_ConditionsType(struct soap *soap, const char *tag, int id, const struct __saml2__union_ConditionsType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTosaml2__ConditionAbstractType(soap, "saml2:Condition", -1, &a->saml2__Condition, ""))
		return soap->error;
	if (soap_out_PointerTosaml2__AudienceRestrictionType(soap, "saml2:AudienceRestriction", -1, &a->saml2__AudienceRestriction, ""))
		return soap->error;
	if (soap_out_PointerTosaml2__OneTimeUseType(soap, "saml2:OneTimeUse", -1, &a->saml2__OneTimeUse, ""))
		return soap->error;
	if (soap_out_PointerTosaml2__ProxyRestrictionType(soap, "saml2:ProxyRestriction", -1, &a->saml2__ProxyRestriction, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __saml2__union_ConditionsType * SOAP_FMAC4 soap_in___saml2__union_ConditionsType(struct soap *soap, const char *tag, struct __saml2__union_ConditionsType *a, const char *type)
{
	size_t soap_flag_saml2__Condition = 1;
	size_t soap_flag_saml2__AudienceRestriction = 1;
	size_t soap_flag_saml2__OneTimeUse = 1;
	size_t soap_flag_saml2__ProxyRestriction = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __saml2__union_ConditionsType *)soap_id_enter(soap, "", a, SOAP_TYPE___saml2__union_ConditionsType, sizeof(struct __saml2__union_ConditionsType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___saml2__union_ConditionsType(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_saml2__Condition && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml2__ConditionAbstractType(soap, "saml2:Condition", &a->saml2__Condition, "saml2:ConditionAbstractType"))
				{	soap_flag_saml2__Condition--;
					continue;
				}
			}
			if (soap_flag_saml2__AudienceRestriction && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml2__AudienceRestrictionType(soap, "saml2:AudienceRestriction", &a->saml2__AudienceRestriction, "saml2:AudienceRestrictionType"))
				{	soap_flag_saml2__AudienceRestriction--;
					continue;
				}
			}
			if (soap_flag_saml2__OneTimeUse && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml2__OneTimeUseType(soap, "saml2:OneTimeUse", &a->saml2__OneTimeUse, "saml2:OneTimeUseType"))
				{	soap_flag_saml2__OneTimeUse--;
					continue;
				}
			}
			if (soap_flag_saml2__ProxyRestriction && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml2__ProxyRestrictionType(soap, "saml2:ProxyRestriction", &a->saml2__ProxyRestriction, "saml2:ProxyRestrictionType"))
				{	soap_flag_saml2__ProxyRestriction--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __saml2__union_ConditionsType * SOAP_FMAC2 soap_instantiate___saml2__union_ConditionsType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___saml2__union_ConditionsType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __saml2__union_ConditionsType *p;
	size_t k = sizeof(struct __saml2__union_ConditionsType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___saml2__union_ConditionsType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __saml2__union_ConditionsType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __saml2__union_ConditionsType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __saml2__union_ConditionsType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml2__union_ConditionsType(struct soap *soap, const struct __saml2__union_ConditionsType *a, const char *tag, const char *type)
{
	if (soap_out___saml2__union_ConditionsType(soap, tag ? tag : "-saml2:union-ConditionsType", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __saml2__union_ConditionsType * SOAP_FMAC4 soap_get___saml2__union_ConditionsType(struct soap *soap, struct __saml2__union_ConditionsType *p, const char *tag, const char *type)
{
	if ((p = soap_in___saml2__union_ConditionsType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml2__union_AssertionType(struct soap *soap, struct __saml2__union_AssertionType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->saml2__Statement = NULL;
	a->saml2__AuthnStatement = NULL;
	a->saml2__AuthzDecisionStatement = NULL;
	a->saml2__AttributeStatement = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml2__union_AssertionType(struct soap *soap, const struct __saml2__union_AssertionType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTosaml2__StatementAbstractType(soap, &a->saml2__Statement);
	soap_serialize_PointerTosaml2__AuthnStatementType(soap, &a->saml2__AuthnStatement);
	soap_serialize_PointerTosaml2__AuthzDecisionStatementType(soap, &a->saml2__AuthzDecisionStatement);
	soap_serialize_PointerTosaml2__AttributeStatementType(soap, &a->saml2__AttributeStatement);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml2__union_AssertionType(struct soap *soap, const char *tag, int id, const struct __saml2__union_AssertionType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTosaml2__StatementAbstractType(soap, "saml2:Statement", -1, &a->saml2__Statement, ""))
		return soap->error;
	if (soap_out_PointerTosaml2__AuthnStatementType(soap, "saml2:AuthnStatement", -1, &a->saml2__AuthnStatement, ""))
		return soap->error;
	if (soap_out_PointerTosaml2__AuthzDecisionStatementType(soap, "saml2:AuthzDecisionStatement", -1, &a->saml2__AuthzDecisionStatement, ""))
		return soap->error;
	if (soap_out_PointerTosaml2__AttributeStatementType(soap, "saml2:AttributeStatement", -1, &a->saml2__AttributeStatement, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __saml2__union_AssertionType * SOAP_FMAC4 soap_in___saml2__union_AssertionType(struct soap *soap, const char *tag, struct __saml2__union_AssertionType *a, const char *type)
{
	size_t soap_flag_saml2__Statement = 1;
	size_t soap_flag_saml2__AuthnStatement = 1;
	size_t soap_flag_saml2__AuthzDecisionStatement = 1;
	size_t soap_flag_saml2__AttributeStatement = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __saml2__union_AssertionType *)soap_id_enter(soap, "", a, SOAP_TYPE___saml2__union_AssertionType, sizeof(struct __saml2__union_AssertionType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___saml2__union_AssertionType(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_saml2__Statement && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml2__StatementAbstractType(soap, "saml2:Statement", &a->saml2__Statement, "saml2:StatementAbstractType"))
				{	soap_flag_saml2__Statement--;
					continue;
				}
			}
			if (soap_flag_saml2__AuthnStatement && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml2__AuthnStatementType(soap, "saml2:AuthnStatement", &a->saml2__AuthnStatement, "saml2:AuthnStatementType"))
				{	soap_flag_saml2__AuthnStatement--;
					continue;
				}
			}
			if (soap_flag_saml2__AuthzDecisionStatement && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml2__AuthzDecisionStatementType(soap, "saml2:AuthzDecisionStatement", &a->saml2__AuthzDecisionStatement, "saml2:AuthzDecisionStatementType"))
				{	soap_flag_saml2__AuthzDecisionStatement--;
					continue;
				}
			}
			if (soap_flag_saml2__AttributeStatement && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml2__AttributeStatementType(soap, "saml2:AttributeStatement", &a->saml2__AttributeStatement, "saml2:AttributeStatementType"))
				{	soap_flag_saml2__AttributeStatement--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __saml2__union_AssertionType * SOAP_FMAC2 soap_instantiate___saml2__union_AssertionType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___saml2__union_AssertionType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __saml2__union_AssertionType *p;
	size_t k = sizeof(struct __saml2__union_AssertionType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___saml2__union_AssertionType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __saml2__union_AssertionType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __saml2__union_AssertionType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __saml2__union_AssertionType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml2__union_AssertionType(struct soap *soap, const struct __saml2__union_AssertionType *a, const char *tag, const char *type)
{
	if (soap_out___saml2__union_AssertionType(soap, tag ? tag : "-saml2:union-AssertionType", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __saml2__union_AssertionType * SOAP_FMAC4 soap_get___saml2__union_AssertionType(struct soap *soap, struct __saml2__union_AssertionType *p, const char *tag, const char *type)
{
	if ((p = soap_in___saml2__union_AssertionType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AttributeType(struct soap *soap, struct saml2__AttributeType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__sizeAttributeValue = 0;
	a->saml2__AttributeValue = NULL;
	soap_default_string(soap, &a->Name);
	soap_default_string(soap, &a->NameFormat);
	soap_default_string(soap, &a->FriendlyName);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AttributeType(struct soap *soap, const struct saml2__AttributeType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AttributeType(struct soap *soap, const char *tag, int id, const struct saml2__AttributeType *a, const char *type)
{
	soap_set_attr(soap, "Name", a->Name ? soap_string2s(soap, a->Name) : "", 1);
	if (a->NameFormat)
		soap_set_attr(soap, "NameFormat", soap_string2s(soap, a->NameFormat), 1);
	if (a->FriendlyName)
		soap_set_attr(soap, "FriendlyName", soap_string2s(soap, a->FriendlyName), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml2__AttributeType), type))
		return soap->error;
	if (a->saml2__AttributeValue)
	{	int i;
		for (i = 0; i < (int)a->__sizeAttributeValue; i++)
			if (soap_outliteral(soap, "saml2:AttributeValue", (char*const*)(a->saml2__AttributeValue + i), NULL))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml2__AttributeType * SOAP_FMAC4 soap_in_saml2__AttributeType(struct soap *soap, const char *tag, struct saml2__AttributeType *a, const char *type)
{
	struct soap_blist *soap_blist_saml2__AttributeValue = NULL;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml2__AttributeType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml2__AttributeType, sizeof(struct saml2__AttributeType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml2__AttributeType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "Name", 1, 1), &a->Name))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "NameFormat", 1, 0), &a->NameFormat))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "FriendlyName", 1, 0), &a->FriendlyName))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "saml2:AttributeValue", 1, NULL))
			{	if (a->saml2__AttributeValue == NULL)
				{	if (soap_blist_saml2__AttributeValue == NULL)
						soap_blist_saml2__AttributeValue = soap_alloc_block(soap);
					a->saml2__AttributeValue = (char **)soap_push_block_max(soap, soap_blist_saml2__AttributeValue, sizeof(char *));
					if (a->saml2__AttributeValue == NULL)
						return NULL;
					*a->saml2__AttributeValue = NULL;
				}
				soap_revert(soap);
				if (soap_inliteral(soap, "saml2:AttributeValue", (char**)a->saml2__AttributeValue))
				{	a->__sizeAttributeValue++;
					a->saml2__AttributeValue = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->saml2__AttributeValue)
			soap_pop_block(soap, soap_blist_saml2__AttributeValue);
		if (a->__sizeAttributeValue)
		{	a->saml2__AttributeValue = (char **)soap_save_block(soap, soap_blist_saml2__AttributeValue, NULL, 1);
		}
		else
		{	a->saml2__AttributeValue = NULL;
			if (soap_blist_saml2__AttributeValue)
				soap_end_block(soap, soap_blist_saml2__AttributeValue);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct saml2__AttributeType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml2__AttributeType, SOAP_TYPE_saml2__AttributeType, sizeof(struct saml2__AttributeType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml2__AttributeType * SOAP_FMAC2 soap_instantiate_saml2__AttributeType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml2__AttributeType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml2__AttributeType *p;
	size_t k = sizeof(struct saml2__AttributeType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml2__AttributeType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml2__AttributeType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml2__AttributeType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml2__AttributeType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AttributeType(struct soap *soap, const struct saml2__AttributeType *a, const char *tag, const char *type)
{
	if (soap_out_saml2__AttributeType(soap, tag ? tag : "saml2:AttributeType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__AttributeType * SOAP_FMAC4 soap_get_saml2__AttributeType(struct soap *soap, struct saml2__AttributeType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml2__AttributeType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AttributeStatementType(struct soap *soap, struct saml2__AttributeStatementType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__size_AttributeStatementType = 0;
	a->__union_AttributeStatementType = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AttributeStatementType(struct soap *soap, const struct saml2__AttributeStatementType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (a->__union_AttributeStatementType)
	{	int i;
		for (i = 0; i < (int)a->__size_AttributeStatementType; i++)
		{
			soap_serialize___saml2__union_AttributeStatementType(soap, a->__union_AttributeStatementType + i);
		}
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AttributeStatementType(struct soap *soap, const char *tag, int id, const struct saml2__AttributeStatementType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml2__AttributeStatementType), type))
		return soap->error;
	if (a->__union_AttributeStatementType)
	{	int i;
		for (i = 0; i < (int)a->__size_AttributeStatementType; i++)
			if (soap_out___saml2__union_AttributeStatementType(soap, "-union-AttributeStatementType", -1, a->__union_AttributeStatementType + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml2__AttributeStatementType * SOAP_FMAC4 soap_in_saml2__AttributeStatementType(struct soap *soap, const char *tag, struct saml2__AttributeStatementType *a, const char *type)
{
	struct soap_blist *soap_blist___union_AttributeStatementType = NULL;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml2__AttributeStatementType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml2__AttributeStatementType, sizeof(struct saml2__AttributeStatementType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml2__AttributeStatementType(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_peek_element(soap))
			{	if (a->__union_AttributeStatementType == NULL)
				{	if (soap_blist___union_AttributeStatementType == NULL)
						soap_blist___union_AttributeStatementType = soap_alloc_block(soap);
					a->__union_AttributeStatementType = soap_block<struct __saml2__union_AttributeStatementType>::push(soap, soap_blist___union_AttributeStatementType);
					if (a->__union_AttributeStatementType == NULL)
						return NULL;
					soap_default___saml2__union_AttributeStatementType(soap, a->__union_AttributeStatementType);
				}
				if (soap_in___saml2__union_AttributeStatementType(soap, "-union-AttributeStatementType", a->__union_AttributeStatementType, "-saml2:union-AttributeStatementType"))
				{	a->__size_AttributeStatementType++;
					a->__union_AttributeStatementType = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->__union_AttributeStatementType)
			soap_block<struct __saml2__union_AttributeStatementType>::pop(soap, soap_blist___union_AttributeStatementType);
		if (a->__size_AttributeStatementType)
		{	a->__union_AttributeStatementType = soap_new___saml2__union_AttributeStatementType(soap, a->__size_AttributeStatementType);
			if (!a->__union_AttributeStatementType)
				return NULL;
			soap_block<struct __saml2__union_AttributeStatementType>::save(soap, soap_blist___union_AttributeStatementType, a->__union_AttributeStatementType);
		}
		else
		{	a->__union_AttributeStatementType = NULL;
			if (soap_blist___union_AttributeStatementType)
				soap_block<struct __saml2__union_AttributeStatementType>::end(soap, soap_blist___union_AttributeStatementType);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct saml2__AttributeStatementType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml2__AttributeStatementType, SOAP_TYPE_saml2__AttributeStatementType, sizeof(struct saml2__AttributeStatementType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml2__AttributeStatementType * SOAP_FMAC2 soap_instantiate_saml2__AttributeStatementType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml2__AttributeStatementType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml2__AttributeStatementType *p;
	size_t k = sizeof(struct saml2__AttributeStatementType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml2__AttributeStatementType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml2__AttributeStatementType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml2__AttributeStatementType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml2__AttributeStatementType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AttributeStatementType(struct soap *soap, const struct saml2__AttributeStatementType *a, const char *tag, const char *type)
{
	if (soap_out_saml2__AttributeStatementType(soap, tag ? tag : "saml2:AttributeStatementType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__AttributeStatementType * SOAP_FMAC4 soap_get_saml2__AttributeStatementType(struct soap *soap, struct saml2__AttributeStatementType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml2__AttributeStatementType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__EvidenceType(struct soap *soap, struct saml2__EvidenceType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__size_EvidenceType = 0;
	a->__union_EvidenceType = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__EvidenceType(struct soap *soap, const struct saml2__EvidenceType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (a->__union_EvidenceType)
	{	int i;
		for (i = 0; i < (int)a->__size_EvidenceType; i++)
		{
			soap_serialize___saml2__union_EvidenceType(soap, a->__union_EvidenceType + i);
		}
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__EvidenceType(struct soap *soap, const char *tag, int id, const struct saml2__EvidenceType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml2__EvidenceType), type))
		return soap->error;
	if (a->__union_EvidenceType)
	{	int i;
		for (i = 0; i < (int)a->__size_EvidenceType; i++)
			if (soap_out___saml2__union_EvidenceType(soap, "-union-EvidenceType", -1, a->__union_EvidenceType + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml2__EvidenceType * SOAP_FMAC4 soap_in_saml2__EvidenceType(struct soap *soap, const char *tag, struct saml2__EvidenceType *a, const char *type)
{
	struct soap_blist *soap_blist___union_EvidenceType = NULL;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml2__EvidenceType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml2__EvidenceType, sizeof(struct saml2__EvidenceType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml2__EvidenceType(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_peek_element(soap))
			{	if (a->__union_EvidenceType == NULL)
				{	if (soap_blist___union_EvidenceType == NULL)
						soap_blist___union_EvidenceType = soap_alloc_block(soap);
					a->__union_EvidenceType = soap_block<struct __saml2__union_EvidenceType>::push(soap, soap_blist___union_EvidenceType);
					if (a->__union_EvidenceType == NULL)
						return NULL;
					soap_default___saml2__union_EvidenceType(soap, a->__union_EvidenceType);
				}
				if (soap_in___saml2__union_EvidenceType(soap, "-union-EvidenceType", a->__union_EvidenceType, "-saml2:union-EvidenceType"))
				{	a->__size_EvidenceType++;
					a->__union_EvidenceType = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->__union_EvidenceType)
			soap_block<struct __saml2__union_EvidenceType>::pop(soap, soap_blist___union_EvidenceType);
		if (a->__size_EvidenceType)
		{	a->__union_EvidenceType = soap_new___saml2__union_EvidenceType(soap, a->__size_EvidenceType);
			if (!a->__union_EvidenceType)
				return NULL;
			soap_block<struct __saml2__union_EvidenceType>::save(soap, soap_blist___union_EvidenceType, a->__union_EvidenceType);
		}
		else
		{	a->__union_EvidenceType = NULL;
			if (soap_blist___union_EvidenceType)
				soap_block<struct __saml2__union_EvidenceType>::end(soap, soap_blist___union_EvidenceType);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct saml2__EvidenceType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml2__EvidenceType, SOAP_TYPE_saml2__EvidenceType, sizeof(struct saml2__EvidenceType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml2__EvidenceType * SOAP_FMAC2 soap_instantiate_saml2__EvidenceType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml2__EvidenceType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml2__EvidenceType *p;
	size_t k = sizeof(struct saml2__EvidenceType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml2__EvidenceType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml2__EvidenceType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml2__EvidenceType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml2__EvidenceType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__EvidenceType(struct soap *soap, const struct saml2__EvidenceType *a, const char *tag, const char *type)
{
	if (soap_out_saml2__EvidenceType(soap, tag ? tag : "saml2:EvidenceType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__EvidenceType * SOAP_FMAC4 soap_get_saml2__EvidenceType(struct soap *soap, struct saml2__EvidenceType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml2__EvidenceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__ActionType(struct soap *soap, struct saml2__ActionType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->__item);
	soap_default_string(soap, &a->Namespace);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__ActionType(struct soap *soap, const struct saml2__ActionType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->__item);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__ActionType(struct soap *soap, const char *tag, int id, const struct saml2__ActionType *a, const char *type)
{
	soap_set_attr(soap, "Namespace", a->Namespace ? soap_string2s(soap, a->Namespace) : "", 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_string(soap, tag, id, (char*const*)&a->__item, "");
}

SOAP_FMAC3 struct saml2__ActionType * SOAP_FMAC4 soap_in_saml2__ActionType(struct soap *soap, const char *tag, struct saml2__ActionType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (struct saml2__ActionType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml2__ActionType, sizeof(struct saml2__ActionType), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
		return NULL;
	soap_revert(soap);
	*soap->id = '\0';
	soap_default_saml2__ActionType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "Namespace", 1, 1), &a->Namespace))
		return NULL;
	if (!soap_in_string(soap, tag, (char**)&a->__item, "saml2:ActionType"))
		return NULL;
	return a;
}

SOAP_FMAC1 struct saml2__ActionType * SOAP_FMAC2 soap_instantiate_saml2__ActionType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml2__ActionType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml2__ActionType *p;
	size_t k = sizeof(struct saml2__ActionType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml2__ActionType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml2__ActionType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml2__ActionType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml2__ActionType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__ActionType(struct soap *soap, const struct saml2__ActionType *a, const char *tag, const char *type)
{
	if (soap_out_saml2__ActionType(soap, tag ? tag : "saml2:ActionType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__ActionType * SOAP_FMAC4 soap_get_saml2__ActionType(struct soap *soap, struct saml2__ActionType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml2__ActionType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AuthzDecisionStatementType(struct soap *soap, struct saml2__AuthzDecisionStatementType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__sizeAction = 0;
	a->saml2__Action = NULL;
	a->saml2__Evidence = NULL;
	soap_default_string(soap, &a->Resource);
	soap_default_saml2__DecisionType(soap, &a->Decision);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AuthzDecisionStatementType(struct soap *soap, const struct saml2__AuthzDecisionStatementType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (a->saml2__Action)
	{	int i;
		for (i = 0; i < (int)a->__sizeAction; i++)
		{
			soap_embedded(soap, a->saml2__Action + i, SOAP_TYPE_saml2__ActionType);
			soap_serialize_saml2__ActionType(soap, a->saml2__Action + i);
		}
	}
	soap_serialize_PointerTosaml2__EvidenceType(soap, &a->saml2__Evidence);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AuthzDecisionStatementType(struct soap *soap, const char *tag, int id, const struct saml2__AuthzDecisionStatementType *a, const char *type)
{
	soap_set_attr(soap, "Resource", a->Resource ? soap_string2s(soap, a->Resource) : "", 1);
	soap_set_attr(soap, "Decision", soap_saml2__DecisionType2s(soap, a->Decision), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml2__AuthzDecisionStatementType), type))
		return soap->error;
	if (a->saml2__Action)
	{	int i;
		for (i = 0; i < (int)a->__sizeAction; i++)
			if (soap_out_saml2__ActionType(soap, "saml2:Action", -1, a->saml2__Action + i, ""))
				return soap->error;
	}
	if (soap_out_PointerTosaml2__EvidenceType(soap, "saml2:Evidence", -1, &a->saml2__Evidence, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml2__AuthzDecisionStatementType * SOAP_FMAC4 soap_in_saml2__AuthzDecisionStatementType(struct soap *soap, const char *tag, struct saml2__AuthzDecisionStatementType *a, const char *type)
{
	struct soap_blist *soap_blist_saml2__Action = NULL;
	size_t soap_flag_saml2__Evidence = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml2__AuthzDecisionStatementType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml2__AuthzDecisionStatementType, sizeof(struct saml2__AuthzDecisionStatementType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml2__AuthzDecisionStatementType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "Resource", 1, 1), &a->Resource))
		return NULL;
	if (soap_s2saml2__DecisionType(soap, soap_attr_value(soap, "Decision", 5, 1), &a->Decision))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "saml2:Action", 1, NULL))
			{	if (a->saml2__Action == NULL)
				{	if (soap_blist_saml2__Action == NULL)
						soap_blist_saml2__Action = soap_alloc_block(soap);
					a->saml2__Action = soap_block<struct saml2__ActionType>::push(soap, soap_blist_saml2__Action);
					if (a->saml2__Action == NULL)
						return NULL;
					soap_default_saml2__ActionType(soap, a->saml2__Action);
				}
				soap_revert(soap);
				if (soap_in_saml2__ActionType(soap, "saml2:Action", a->saml2__Action, "saml2:ActionType"))
				{	a->__sizeAction++;
					a->saml2__Action = NULL;
					continue;
				}
			}
			if (soap_flag_saml2__Evidence && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml2__EvidenceType(soap, "saml2:Evidence", &a->saml2__Evidence, "saml2:EvidenceType"))
				{	soap_flag_saml2__Evidence--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->saml2__Action)
			soap_block<struct saml2__ActionType>::pop(soap, soap_blist_saml2__Action);
		if (a->__sizeAction)
		{	a->saml2__Action = soap_new_saml2__ActionType(soap, a->__sizeAction);
			if (!a->saml2__Action)
				return NULL;
			soap_block<struct saml2__ActionType>::save(soap, soap_blist_saml2__Action, a->saml2__Action);
		}
		else
		{	a->saml2__Action = NULL;
			if (soap_blist_saml2__Action)
				soap_block<struct saml2__ActionType>::end(soap, soap_blist_saml2__Action);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (a->__sizeAction < 1))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct saml2__AuthzDecisionStatementType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml2__AuthzDecisionStatementType, SOAP_TYPE_saml2__AuthzDecisionStatementType, sizeof(struct saml2__AuthzDecisionStatementType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml2__AuthzDecisionStatementType * SOAP_FMAC2 soap_instantiate_saml2__AuthzDecisionStatementType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml2__AuthzDecisionStatementType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml2__AuthzDecisionStatementType *p;
	size_t k = sizeof(struct saml2__AuthzDecisionStatementType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml2__AuthzDecisionStatementType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml2__AuthzDecisionStatementType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml2__AuthzDecisionStatementType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml2__AuthzDecisionStatementType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AuthzDecisionStatementType(struct soap *soap, const struct saml2__AuthzDecisionStatementType *a, const char *tag, const char *type)
{
	if (soap_out_saml2__AuthzDecisionStatementType(soap, tag ? tag : "saml2:AuthzDecisionStatementType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__AuthzDecisionStatementType * SOAP_FMAC4 soap_get_saml2__AuthzDecisionStatementType(struct soap *soap, struct saml2__AuthzDecisionStatementType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml2__AuthzDecisionStatementType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AuthnContextType(struct soap *soap, struct saml2__AuthnContextType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->saml2__AuthnContextClassRef);
	a->saml2__AuthnContextDecl = NULL;
	soap_default_string(soap, &a->saml2__AuthnContextDeclRef);
	a->__sizeAuthenticatingAuthority = 0;
	a->saml2__AuthenticatingAuthority = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AuthnContextType(struct soap *soap, const struct saml2__AuthnContextType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->saml2__AuthnContextClassRef);
	soap_serialize_string(soap, (char*const*)&a->saml2__AuthnContextDeclRef);
	if (a->saml2__AuthenticatingAuthority)
	{	int i;
		for (i = 0; i < (int)a->__sizeAuthenticatingAuthority; i++)
		{
			soap_serialize_string(soap, (char*const*)(a->saml2__AuthenticatingAuthority + i));
		}
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AuthnContextType(struct soap *soap, const char *tag, int id, const struct saml2__AuthnContextType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml2__AuthnContextType), type))
		return soap->error;
	if (soap_out_string(soap, "saml2:AuthnContextClassRef", -1, (char*const*)&a->saml2__AuthnContextClassRef, ""))
		return soap->error;
	if (soap_outliteral(soap, "saml2:AuthnContextDecl", (char*const*)&a->saml2__AuthnContextDecl, NULL))
		return soap->error;
	if (soap_out_string(soap, "saml2:AuthnContextDeclRef", -1, (char*const*)&a->saml2__AuthnContextDeclRef, ""))
		return soap->error;
	if (a->saml2__AuthenticatingAuthority)
	{	int i;
		for (i = 0; i < (int)a->__sizeAuthenticatingAuthority; i++)
			if (soap_out_string(soap, "saml2:AuthenticatingAuthority", -1, (char*const*)(a->saml2__AuthenticatingAuthority + i), ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml2__AuthnContextType * SOAP_FMAC4 soap_in_saml2__AuthnContextType(struct soap *soap, const char *tag, struct saml2__AuthnContextType *a, const char *type)
{
	size_t soap_flag_saml2__AuthnContextClassRef = 1;
	size_t soap_flag_saml2__AuthnContextDecl = 1;
	size_t soap_flag_saml2__AuthnContextDeclRef = 1;
	struct soap_blist *soap_blist_saml2__AuthenticatingAuthority = NULL;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml2__AuthnContextType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml2__AuthnContextType, sizeof(struct saml2__AuthnContextType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml2__AuthnContextType(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_saml2__AuthnContextClassRef && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "saml2:AuthnContextClassRef", (char**)&a->saml2__AuthnContextClassRef, "xsd:string"))
				{	soap_flag_saml2__AuthnContextClassRef--;
					continue;
				}
			}
			if (soap_flag_saml2__AuthnContextDecl && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "saml2:AuthnContextDecl", (char**)&a->saml2__AuthnContextDecl))
				{	soap_flag_saml2__AuthnContextDecl--;
					continue;
				}
			}
			if (soap_flag_saml2__AuthnContextDeclRef && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "saml2:AuthnContextDeclRef", (char**)&a->saml2__AuthnContextDeclRef, "xsd:string"))
				{	soap_flag_saml2__AuthnContextDeclRef--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "saml2:AuthenticatingAuthority", 1, NULL))
			{	if (a->saml2__AuthenticatingAuthority == NULL)
				{	if (soap_blist_saml2__AuthenticatingAuthority == NULL)
						soap_blist_saml2__AuthenticatingAuthority = soap_alloc_block(soap);
					a->saml2__AuthenticatingAuthority = (char **)soap_push_block_max(soap, soap_blist_saml2__AuthenticatingAuthority, sizeof(char *));
					if (a->saml2__AuthenticatingAuthority == NULL)
						return NULL;
					*a->saml2__AuthenticatingAuthority = NULL;
				}
				soap_revert(soap);
				if (soap_in_string(soap, "saml2:AuthenticatingAuthority", (char**)a->saml2__AuthenticatingAuthority, "xsd:string"))
				{	a->__sizeAuthenticatingAuthority++;
					a->saml2__AuthenticatingAuthority = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->saml2__AuthenticatingAuthority)
			soap_pop_block(soap, soap_blist_saml2__AuthenticatingAuthority);
		if (a->__sizeAuthenticatingAuthority)
		{	a->saml2__AuthenticatingAuthority = (char **)soap_save_block(soap, soap_blist_saml2__AuthenticatingAuthority, NULL, 1);
		}
		else
		{	a->saml2__AuthenticatingAuthority = NULL;
			if (soap_blist_saml2__AuthenticatingAuthority)
				soap_end_block(soap, soap_blist_saml2__AuthenticatingAuthority);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct saml2__AuthnContextType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml2__AuthnContextType, SOAP_TYPE_saml2__AuthnContextType, sizeof(struct saml2__AuthnContextType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml2__AuthnContextType * SOAP_FMAC2 soap_instantiate_saml2__AuthnContextType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml2__AuthnContextType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml2__AuthnContextType *p;
	size_t k = sizeof(struct saml2__AuthnContextType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml2__AuthnContextType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml2__AuthnContextType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml2__AuthnContextType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml2__AuthnContextType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AuthnContextType(struct soap *soap, const struct saml2__AuthnContextType *a, const char *tag, const char *type)
{
	if (soap_out_saml2__AuthnContextType(soap, tag ? tag : "saml2:AuthnContextType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__AuthnContextType * SOAP_FMAC4 soap_get_saml2__AuthnContextType(struct soap *soap, struct saml2__AuthnContextType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml2__AuthnContextType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__SubjectLocalityType(struct soap *soap, struct saml2__SubjectLocalityType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->Address);
	soap_default_string(soap, &a->DNSName);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__SubjectLocalityType(struct soap *soap, const struct saml2__SubjectLocalityType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__SubjectLocalityType(struct soap *soap, const char *tag, int id, const struct saml2__SubjectLocalityType *a, const char *type)
{
	if (a->Address)
		soap_set_attr(soap, "Address", soap_string2s(soap, a->Address), 1);
	if (a->DNSName)
		soap_set_attr(soap, "DNSName", soap_string2s(soap, a->DNSName), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml2__SubjectLocalityType), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml2__SubjectLocalityType * SOAP_FMAC4 soap_in_saml2__SubjectLocalityType(struct soap *soap, const char *tag, struct saml2__SubjectLocalityType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml2__SubjectLocalityType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml2__SubjectLocalityType, sizeof(struct saml2__SubjectLocalityType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml2__SubjectLocalityType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "Address", 1, 0), &a->Address))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "DNSName", 1, 0), &a->DNSName))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct saml2__SubjectLocalityType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml2__SubjectLocalityType, SOAP_TYPE_saml2__SubjectLocalityType, sizeof(struct saml2__SubjectLocalityType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml2__SubjectLocalityType * SOAP_FMAC2 soap_instantiate_saml2__SubjectLocalityType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml2__SubjectLocalityType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml2__SubjectLocalityType *p;
	size_t k = sizeof(struct saml2__SubjectLocalityType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml2__SubjectLocalityType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml2__SubjectLocalityType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml2__SubjectLocalityType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml2__SubjectLocalityType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__SubjectLocalityType(struct soap *soap, const struct saml2__SubjectLocalityType *a, const char *tag, const char *type)
{
	if (soap_out_saml2__SubjectLocalityType(soap, tag ? tag : "saml2:SubjectLocalityType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__SubjectLocalityType * SOAP_FMAC4 soap_get_saml2__SubjectLocalityType(struct soap *soap, struct saml2__SubjectLocalityType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml2__SubjectLocalityType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AuthnStatementType(struct soap *soap, struct saml2__AuthnStatementType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->saml2__SubjectLocality = NULL;
	a->saml2__AuthnContext = NULL;
	soap_default_dateTime(soap, &a->AuthnInstant);
	soap_default_string(soap, &a->SessionIndex);
	a->SessionNotOnOrAfter = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AuthnStatementType(struct soap *soap, const struct saml2__AuthnStatementType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTosaml2__SubjectLocalityType(soap, &a->saml2__SubjectLocality);
	soap_serialize_PointerTosaml2__AuthnContextType(soap, &a->saml2__AuthnContext);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AuthnStatementType(struct soap *soap, const char *tag, int id, const struct saml2__AuthnStatementType *a, const char *type)
{
	soap_set_attr(soap, "AuthnInstant", soap_dateTime2s(soap, a->AuthnInstant), 1);
	if (a->SessionIndex)
		soap_set_attr(soap, "SessionIndex", soap_string2s(soap, a->SessionIndex), 1);
	if (a->SessionNotOnOrAfter)
	{	soap_set_attr(soap, "SessionNotOnOrAfter", soap_dateTime2s(soap, *a->SessionNotOnOrAfter), 1);
	}
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml2__AuthnStatementType), type))
		return soap->error;
	if (soap_out_PointerTosaml2__SubjectLocalityType(soap, "saml2:SubjectLocality", -1, &a->saml2__SubjectLocality, ""))
		return soap->error;
	if (!a->saml2__AuthnContext)
	{	if (soap_element_empty(soap, "saml2:AuthnContext"))
			return soap->error;
	}
	else
	if (soap_out_PointerTosaml2__AuthnContextType(soap, "saml2:AuthnContext", -1, &a->saml2__AuthnContext, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml2__AuthnStatementType * SOAP_FMAC4 soap_in_saml2__AuthnStatementType(struct soap *soap, const char *tag, struct saml2__AuthnStatementType *a, const char *type)
{
	size_t soap_flag_saml2__SubjectLocality = 1;
	size_t soap_flag_saml2__AuthnContext = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml2__AuthnStatementType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml2__AuthnStatementType, sizeof(struct saml2__AuthnStatementType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml2__AuthnStatementType(soap, a);
	if (soap_s2dateTime(soap, soap_attr_value(soap, "AuthnInstant", 5, 1), &a->AuthnInstant))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "SessionIndex", 1, 0), &a->SessionIndex))
		return NULL;
	{
		const char *t = soap_attr_value(soap, "SessionNotOnOrAfter", 5, 0);
		if (t)
		{
			if (!(a->SessionNotOnOrAfter = (time_t *)soap_malloc(soap, sizeof(time_t))))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2dateTime(soap, t, a->SessionNotOnOrAfter))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_saml2__SubjectLocality && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml2__SubjectLocalityType(soap, "saml2:SubjectLocality", &a->saml2__SubjectLocality, "saml2:SubjectLocalityType"))
				{	soap_flag_saml2__SubjectLocality--;
					continue;
				}
			}
			if (soap_flag_saml2__AuthnContext && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml2__AuthnContextType(soap, "saml2:AuthnContext", &a->saml2__AuthnContext, "saml2:AuthnContextType"))
				{	soap_flag_saml2__AuthnContext--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->saml2__AuthnContext))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct saml2__AuthnStatementType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml2__AuthnStatementType, SOAP_TYPE_saml2__AuthnStatementType, sizeof(struct saml2__AuthnStatementType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml2__AuthnStatementType * SOAP_FMAC2 soap_instantiate_saml2__AuthnStatementType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml2__AuthnStatementType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml2__AuthnStatementType *p;
	size_t k = sizeof(struct saml2__AuthnStatementType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml2__AuthnStatementType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml2__AuthnStatementType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml2__AuthnStatementType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml2__AuthnStatementType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AuthnStatementType(struct soap *soap, const struct saml2__AuthnStatementType *a, const char *tag, const char *type)
{
	if (soap_out_saml2__AuthnStatementType(soap, tag ? tag : "saml2:AuthnStatementType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__AuthnStatementType * SOAP_FMAC4 soap_get_saml2__AuthnStatementType(struct soap *soap, struct saml2__AuthnStatementType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml2__AuthnStatementType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__StatementAbstractType(struct soap *soap, struct saml2__StatementAbstractType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__StatementAbstractType(struct soap *soap, const struct saml2__StatementAbstractType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__StatementAbstractType(struct soap *soap, const char *tag, int id, const struct saml2__StatementAbstractType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml2__StatementAbstractType), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml2__StatementAbstractType * SOAP_FMAC4 soap_in_saml2__StatementAbstractType(struct soap *soap, const char *tag, struct saml2__StatementAbstractType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml2__StatementAbstractType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml2__StatementAbstractType, sizeof(struct saml2__StatementAbstractType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml2__StatementAbstractType(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct saml2__StatementAbstractType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml2__StatementAbstractType, SOAP_TYPE_saml2__StatementAbstractType, sizeof(struct saml2__StatementAbstractType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml2__StatementAbstractType * SOAP_FMAC2 soap_instantiate_saml2__StatementAbstractType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml2__StatementAbstractType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml2__StatementAbstractType *p;
	size_t k = sizeof(struct saml2__StatementAbstractType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml2__StatementAbstractType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml2__StatementAbstractType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml2__StatementAbstractType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml2__StatementAbstractType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__StatementAbstractType(struct soap *soap, const struct saml2__StatementAbstractType *a, const char *tag, const char *type)
{
	if (soap_out_saml2__StatementAbstractType(soap, tag ? tag : "saml2:StatementAbstractType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__StatementAbstractType * SOAP_FMAC4 soap_get_saml2__StatementAbstractType(struct soap *soap, struct saml2__StatementAbstractType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml2__StatementAbstractType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AdviceType(struct soap *soap, struct saml2__AdviceType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__size_AdviceType = 0;
	a->__union_AdviceType = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AdviceType(struct soap *soap, const struct saml2__AdviceType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (a->__union_AdviceType)
	{	int i;
		for (i = 0; i < (int)a->__size_AdviceType; i++)
		{
			soap_serialize___saml2__union_AdviceType(soap, a->__union_AdviceType + i);
		}
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AdviceType(struct soap *soap, const char *tag, int id, const struct saml2__AdviceType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml2__AdviceType), type))
		return soap->error;
	if (a->__union_AdviceType)
	{	int i;
		for (i = 0; i < (int)a->__size_AdviceType; i++)
			if (soap_out___saml2__union_AdviceType(soap, "-union-AdviceType", -1, a->__union_AdviceType + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml2__AdviceType * SOAP_FMAC4 soap_in_saml2__AdviceType(struct soap *soap, const char *tag, struct saml2__AdviceType *a, const char *type)
{
	struct soap_blist *soap_blist___union_AdviceType = NULL;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml2__AdviceType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml2__AdviceType, sizeof(struct saml2__AdviceType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml2__AdviceType(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_peek_element(soap))
			{	if (a->__union_AdviceType == NULL)
				{	if (soap_blist___union_AdviceType == NULL)
						soap_blist___union_AdviceType = soap_alloc_block(soap);
					a->__union_AdviceType = soap_block<struct __saml2__union_AdviceType>::push(soap, soap_blist___union_AdviceType);
					if (a->__union_AdviceType == NULL)
						return NULL;
					soap_default___saml2__union_AdviceType(soap, a->__union_AdviceType);
				}
				if (soap_in___saml2__union_AdviceType(soap, "-union-AdviceType", a->__union_AdviceType, "-saml2:union-AdviceType"))
				{	a->__size_AdviceType++;
					a->__union_AdviceType = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->__union_AdviceType)
			soap_block<struct __saml2__union_AdviceType>::pop(soap, soap_blist___union_AdviceType);
		if (a->__size_AdviceType)
		{	a->__union_AdviceType = soap_new___saml2__union_AdviceType(soap, a->__size_AdviceType);
			if (!a->__union_AdviceType)
				return NULL;
			soap_block<struct __saml2__union_AdviceType>::save(soap, soap_blist___union_AdviceType, a->__union_AdviceType);
		}
		else
		{	a->__union_AdviceType = NULL;
			if (soap_blist___union_AdviceType)
				soap_block<struct __saml2__union_AdviceType>::end(soap, soap_blist___union_AdviceType);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct saml2__AdviceType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml2__AdviceType, SOAP_TYPE_saml2__AdviceType, sizeof(struct saml2__AdviceType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml2__AdviceType * SOAP_FMAC2 soap_instantiate_saml2__AdviceType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml2__AdviceType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml2__AdviceType *p;
	size_t k = sizeof(struct saml2__AdviceType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml2__AdviceType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml2__AdviceType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml2__AdviceType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml2__AdviceType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AdviceType(struct soap *soap, const struct saml2__AdviceType *a, const char *tag, const char *type)
{
	if (soap_out_saml2__AdviceType(soap, tag ? tag : "saml2:AdviceType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__AdviceType * SOAP_FMAC4 soap_get_saml2__AdviceType(struct soap *soap, struct saml2__AdviceType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml2__AdviceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__ProxyRestrictionType(struct soap *soap, struct saml2__ProxyRestrictionType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__sizeAudience = 0;
	a->saml2__Audience = NULL;
	soap_default_string(soap, &a->Count);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__ProxyRestrictionType(struct soap *soap, const struct saml2__ProxyRestrictionType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (a->saml2__Audience)
	{	int i;
		for (i = 0; i < (int)a->__sizeAudience; i++)
		{
			soap_serialize_string(soap, (char*const*)(a->saml2__Audience + i));
		}
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__ProxyRestrictionType(struct soap *soap, const char *tag, int id, const struct saml2__ProxyRestrictionType *a, const char *type)
{
	if (a->Count)
		soap_set_attr(soap, "Count", soap_string2s(soap, a->Count), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml2__ProxyRestrictionType), type))
		return soap->error;
	if (a->saml2__Audience)
	{	int i;
		for (i = 0; i < (int)a->__sizeAudience; i++)
			if (soap_out_string(soap, "saml2:Audience", -1, (char*const*)(a->saml2__Audience + i), ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml2__ProxyRestrictionType * SOAP_FMAC4 soap_in_saml2__ProxyRestrictionType(struct soap *soap, const char *tag, struct saml2__ProxyRestrictionType *a, const char *type)
{
	struct soap_blist *soap_blist_saml2__Audience = NULL;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml2__ProxyRestrictionType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml2__ProxyRestrictionType, sizeof(struct saml2__ProxyRestrictionType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml2__ProxyRestrictionType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "Count", 1, 0), &a->Count))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "saml2:Audience", 1, NULL))
			{	if (a->saml2__Audience == NULL)
				{	if (soap_blist_saml2__Audience == NULL)
						soap_blist_saml2__Audience = soap_alloc_block(soap);
					a->saml2__Audience = (char **)soap_push_block_max(soap, soap_blist_saml2__Audience, sizeof(char *));
					if (a->saml2__Audience == NULL)
						return NULL;
					*a->saml2__Audience = NULL;
				}
				soap_revert(soap);
				if (soap_in_string(soap, "saml2:Audience", (char**)a->saml2__Audience, "xsd:string"))
				{	a->__sizeAudience++;
					a->saml2__Audience = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->saml2__Audience)
			soap_pop_block(soap, soap_blist_saml2__Audience);
		if (a->__sizeAudience)
		{	a->saml2__Audience = (char **)soap_save_block(soap, soap_blist_saml2__Audience, NULL, 1);
		}
		else
		{	a->saml2__Audience = NULL;
			if (soap_blist_saml2__Audience)
				soap_end_block(soap, soap_blist_saml2__Audience);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct saml2__ProxyRestrictionType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml2__ProxyRestrictionType, SOAP_TYPE_saml2__ProxyRestrictionType, sizeof(struct saml2__ProxyRestrictionType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml2__ProxyRestrictionType * SOAP_FMAC2 soap_instantiate_saml2__ProxyRestrictionType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml2__ProxyRestrictionType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml2__ProxyRestrictionType *p;
	size_t k = sizeof(struct saml2__ProxyRestrictionType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml2__ProxyRestrictionType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml2__ProxyRestrictionType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml2__ProxyRestrictionType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml2__ProxyRestrictionType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__ProxyRestrictionType(struct soap *soap, const struct saml2__ProxyRestrictionType *a, const char *tag, const char *type)
{
	if (soap_out_saml2__ProxyRestrictionType(soap, tag ? tag : "saml2:ProxyRestrictionType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__ProxyRestrictionType * SOAP_FMAC4 soap_get_saml2__ProxyRestrictionType(struct soap *soap, struct saml2__ProxyRestrictionType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml2__ProxyRestrictionType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__OneTimeUseType(struct soap *soap, struct saml2__OneTimeUseType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__OneTimeUseType(struct soap *soap, const struct saml2__OneTimeUseType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__OneTimeUseType(struct soap *soap, const char *tag, int id, const struct saml2__OneTimeUseType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml2__OneTimeUseType), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml2__OneTimeUseType * SOAP_FMAC4 soap_in_saml2__OneTimeUseType(struct soap *soap, const char *tag, struct saml2__OneTimeUseType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml2__OneTimeUseType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml2__OneTimeUseType, sizeof(struct saml2__OneTimeUseType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml2__OneTimeUseType(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct saml2__OneTimeUseType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml2__OneTimeUseType, SOAP_TYPE_saml2__OneTimeUseType, sizeof(struct saml2__OneTimeUseType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml2__OneTimeUseType * SOAP_FMAC2 soap_instantiate_saml2__OneTimeUseType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml2__OneTimeUseType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml2__OneTimeUseType *p;
	size_t k = sizeof(struct saml2__OneTimeUseType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml2__OneTimeUseType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml2__OneTimeUseType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml2__OneTimeUseType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml2__OneTimeUseType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__OneTimeUseType(struct soap *soap, const struct saml2__OneTimeUseType *a, const char *tag, const char *type)
{
	if (soap_out_saml2__OneTimeUseType(soap, tag ? tag : "saml2:OneTimeUseType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__OneTimeUseType * SOAP_FMAC4 soap_get_saml2__OneTimeUseType(struct soap *soap, struct saml2__OneTimeUseType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml2__OneTimeUseType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AudienceRestrictionType(struct soap *soap, struct saml2__AudienceRestrictionType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__sizeAudience = 0;
	a->saml2__Audience = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AudienceRestrictionType(struct soap *soap, const struct saml2__AudienceRestrictionType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (a->saml2__Audience)
	{	int i;
		for (i = 0; i < (int)a->__sizeAudience; i++)
		{
			soap_serialize_string(soap, (char*const*)(a->saml2__Audience + i));
		}
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AudienceRestrictionType(struct soap *soap, const char *tag, int id, const struct saml2__AudienceRestrictionType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml2__AudienceRestrictionType), type))
		return soap->error;
	if (a->saml2__Audience)
	{	int i;
		for (i = 0; i < (int)a->__sizeAudience; i++)
			if (soap_out_string(soap, "saml2:Audience", -1, (char*const*)(a->saml2__Audience + i), ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml2__AudienceRestrictionType * SOAP_FMAC4 soap_in_saml2__AudienceRestrictionType(struct soap *soap, const char *tag, struct saml2__AudienceRestrictionType *a, const char *type)
{
	struct soap_blist *soap_blist_saml2__Audience = NULL;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml2__AudienceRestrictionType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml2__AudienceRestrictionType, sizeof(struct saml2__AudienceRestrictionType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml2__AudienceRestrictionType(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "saml2:Audience", 1, NULL))
			{	if (a->saml2__Audience == NULL)
				{	if (soap_blist_saml2__Audience == NULL)
						soap_blist_saml2__Audience = soap_alloc_block(soap);
					a->saml2__Audience = (char **)soap_push_block_max(soap, soap_blist_saml2__Audience, sizeof(char *));
					if (a->saml2__Audience == NULL)
						return NULL;
					*a->saml2__Audience = NULL;
				}
				soap_revert(soap);
				if (soap_in_string(soap, "saml2:Audience", (char**)a->saml2__Audience, "xsd:string"))
				{	a->__sizeAudience++;
					a->saml2__Audience = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->saml2__Audience)
			soap_pop_block(soap, soap_blist_saml2__Audience);
		if (a->__sizeAudience)
		{	a->saml2__Audience = (char **)soap_save_block(soap, soap_blist_saml2__Audience, NULL, 1);
		}
		else
		{	a->saml2__Audience = NULL;
			if (soap_blist_saml2__Audience)
				soap_end_block(soap, soap_blist_saml2__Audience);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (a->__sizeAudience < 1))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct saml2__AudienceRestrictionType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml2__AudienceRestrictionType, SOAP_TYPE_saml2__AudienceRestrictionType, sizeof(struct saml2__AudienceRestrictionType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml2__AudienceRestrictionType * SOAP_FMAC2 soap_instantiate_saml2__AudienceRestrictionType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml2__AudienceRestrictionType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml2__AudienceRestrictionType *p;
	size_t k = sizeof(struct saml2__AudienceRestrictionType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml2__AudienceRestrictionType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml2__AudienceRestrictionType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml2__AudienceRestrictionType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml2__AudienceRestrictionType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AudienceRestrictionType(struct soap *soap, const struct saml2__AudienceRestrictionType *a, const char *tag, const char *type)
{
	if (soap_out_saml2__AudienceRestrictionType(soap, tag ? tag : "saml2:AudienceRestrictionType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__AudienceRestrictionType * SOAP_FMAC4 soap_get_saml2__AudienceRestrictionType(struct soap *soap, struct saml2__AudienceRestrictionType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml2__AudienceRestrictionType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__ConditionAbstractType(struct soap *soap, struct saml2__ConditionAbstractType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__ConditionAbstractType(struct soap *soap, const struct saml2__ConditionAbstractType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__ConditionAbstractType(struct soap *soap, const char *tag, int id, const struct saml2__ConditionAbstractType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml2__ConditionAbstractType), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml2__ConditionAbstractType * SOAP_FMAC4 soap_in_saml2__ConditionAbstractType(struct soap *soap, const char *tag, struct saml2__ConditionAbstractType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml2__ConditionAbstractType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml2__ConditionAbstractType, sizeof(struct saml2__ConditionAbstractType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml2__ConditionAbstractType(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct saml2__ConditionAbstractType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml2__ConditionAbstractType, SOAP_TYPE_saml2__ConditionAbstractType, sizeof(struct saml2__ConditionAbstractType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml2__ConditionAbstractType * SOAP_FMAC2 soap_instantiate_saml2__ConditionAbstractType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml2__ConditionAbstractType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml2__ConditionAbstractType *p;
	size_t k = sizeof(struct saml2__ConditionAbstractType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml2__ConditionAbstractType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml2__ConditionAbstractType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml2__ConditionAbstractType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml2__ConditionAbstractType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__ConditionAbstractType(struct soap *soap, const struct saml2__ConditionAbstractType *a, const char *tag, const char *type)
{
	if (soap_out_saml2__ConditionAbstractType(soap, tag ? tag : "saml2:ConditionAbstractType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__ConditionAbstractType * SOAP_FMAC4 soap_get_saml2__ConditionAbstractType(struct soap *soap, struct saml2__ConditionAbstractType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml2__ConditionAbstractType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__ConditionsType(struct soap *soap, struct saml2__ConditionsType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__size_ConditionsType = 0;
	a->__union_ConditionsType = NULL;
	a->NotBefore = NULL;
	a->NotOnOrAfter = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__ConditionsType(struct soap *soap, const struct saml2__ConditionsType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (a->__union_ConditionsType)
	{	int i;
		for (i = 0; i < (int)a->__size_ConditionsType; i++)
		{
			soap_serialize___saml2__union_ConditionsType(soap, a->__union_ConditionsType + i);
		}
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__ConditionsType(struct soap *soap, const char *tag, int id, const struct saml2__ConditionsType *a, const char *type)
{
	if (a->NotBefore)
	{	soap_set_attr(soap, "NotBefore", soap_dateTime2s(soap, *a->NotBefore), 1);
	}
	if (a->NotOnOrAfter)
	{	soap_set_attr(soap, "NotOnOrAfter", soap_dateTime2s(soap, *a->NotOnOrAfter), 1);
	}
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml2__ConditionsType), type))
		return soap->error;
	if (a->__union_ConditionsType)
	{	int i;
		for (i = 0; i < (int)a->__size_ConditionsType; i++)
			if (soap_out___saml2__union_ConditionsType(soap, "-union-ConditionsType", -1, a->__union_ConditionsType + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml2__ConditionsType * SOAP_FMAC4 soap_in_saml2__ConditionsType(struct soap *soap, const char *tag, struct saml2__ConditionsType *a, const char *type)
{
	struct soap_blist *soap_blist___union_ConditionsType = NULL;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml2__ConditionsType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml2__ConditionsType, sizeof(struct saml2__ConditionsType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml2__ConditionsType(soap, a);
	{
		const char *t = soap_attr_value(soap, "NotBefore", 5, 0);
		if (t)
		{
			if (!(a->NotBefore = (time_t *)soap_malloc(soap, sizeof(time_t))))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2dateTime(soap, t, a->NotBefore))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	{
		const char *t = soap_attr_value(soap, "NotOnOrAfter", 5, 0);
		if (t)
		{
			if (!(a->NotOnOrAfter = (time_t *)soap_malloc(soap, sizeof(time_t))))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2dateTime(soap, t, a->NotOnOrAfter))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_peek_element(soap))
			{	if (a->__union_ConditionsType == NULL)
				{	if (soap_blist___union_ConditionsType == NULL)
						soap_blist___union_ConditionsType = soap_alloc_block(soap);
					a->__union_ConditionsType = soap_block<struct __saml2__union_ConditionsType>::push(soap, soap_blist___union_ConditionsType);
					if (a->__union_ConditionsType == NULL)
						return NULL;
					soap_default___saml2__union_ConditionsType(soap, a->__union_ConditionsType);
				}
				if (soap_in___saml2__union_ConditionsType(soap, "-union-ConditionsType", a->__union_ConditionsType, "-saml2:union-ConditionsType"))
				{	a->__size_ConditionsType++;
					a->__union_ConditionsType = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->__union_ConditionsType)
			soap_block<struct __saml2__union_ConditionsType>::pop(soap, soap_blist___union_ConditionsType);
		if (a->__size_ConditionsType)
		{	a->__union_ConditionsType = soap_new___saml2__union_ConditionsType(soap, a->__size_ConditionsType);
			if (!a->__union_ConditionsType)
				return NULL;
			soap_block<struct __saml2__union_ConditionsType>::save(soap, soap_blist___union_ConditionsType, a->__union_ConditionsType);
		}
		else
		{	a->__union_ConditionsType = NULL;
			if (soap_blist___union_ConditionsType)
				soap_block<struct __saml2__union_ConditionsType>::end(soap, soap_blist___union_ConditionsType);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct saml2__ConditionsType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml2__ConditionsType, SOAP_TYPE_saml2__ConditionsType, sizeof(struct saml2__ConditionsType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml2__ConditionsType * SOAP_FMAC2 soap_instantiate_saml2__ConditionsType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml2__ConditionsType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml2__ConditionsType *p;
	size_t k = sizeof(struct saml2__ConditionsType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml2__ConditionsType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml2__ConditionsType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml2__ConditionsType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml2__ConditionsType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__ConditionsType(struct soap *soap, const struct saml2__ConditionsType *a, const char *tag, const char *type)
{
	if (soap_out_saml2__ConditionsType(soap, tag ? tag : "saml2:ConditionsType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__ConditionsType * SOAP_FMAC4 soap_get_saml2__ConditionsType(struct soap *soap, struct saml2__ConditionsType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml2__ConditionsType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__KeyInfoConfirmationDataType(struct soap *soap, struct saml2__KeyInfoConfirmationDataType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__sizeds__KeyInfo = 0;
	a->ds__KeyInfo = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__KeyInfoConfirmationDataType(struct soap *soap, const struct saml2__KeyInfoConfirmationDataType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (a->ds__KeyInfo)
	{	int i;
		for (i = 0; i < (int)a->__sizeds__KeyInfo; i++)
		{
			soap_serialize_PointerTo_ds__KeyInfo(soap, a->ds__KeyInfo + i);
		}
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__KeyInfoConfirmationDataType(struct soap *soap, const char *tag, int id, const struct saml2__KeyInfoConfirmationDataType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml2__KeyInfoConfirmationDataType), type))
		return soap->error;
	if (a->ds__KeyInfo)
	{	int i;
		for (i = 0; i < (int)a->__sizeds__KeyInfo; i++)
			if (soap_out_PointerTo_ds__KeyInfo(soap, "ds:KeyInfo", -1, a->ds__KeyInfo + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml2__KeyInfoConfirmationDataType * SOAP_FMAC4 soap_in_saml2__KeyInfoConfirmationDataType(struct soap *soap, const char *tag, struct saml2__KeyInfoConfirmationDataType *a, const char *type)
{
	struct soap_blist *soap_blist_ds__KeyInfo = NULL;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml2__KeyInfoConfirmationDataType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml2__KeyInfoConfirmationDataType, sizeof(struct saml2__KeyInfoConfirmationDataType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml2__KeyInfoConfirmationDataType(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "ds:KeyInfo", 1, NULL))
			{	if (a->ds__KeyInfo == NULL)
				{	if (soap_blist_ds__KeyInfo == NULL)
						soap_blist_ds__KeyInfo = soap_alloc_block(soap);
					a->ds__KeyInfo = (struct ds__KeyInfoType **)soap_push_block_max(soap, soap_blist_ds__KeyInfo, sizeof(struct ds__KeyInfoType *));
					if (a->ds__KeyInfo == NULL)
						return NULL;
					*a->ds__KeyInfo = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerTo_ds__KeyInfo(soap, "ds:KeyInfo", a->ds__KeyInfo, ""))
				{	a->__sizeds__KeyInfo++;
					a->ds__KeyInfo = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ds__KeyInfo)
			soap_pop_block(soap, soap_blist_ds__KeyInfo);
		if (a->__sizeds__KeyInfo)
		{	a->ds__KeyInfo = (struct ds__KeyInfoType **)soap_save_block(soap, soap_blist_ds__KeyInfo, NULL, 1);
		}
		else
		{	a->ds__KeyInfo = NULL;
			if (soap_blist_ds__KeyInfo)
				soap_end_block(soap, soap_blist_ds__KeyInfo);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (a->__sizeds__KeyInfo < 1))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct saml2__KeyInfoConfirmationDataType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml2__KeyInfoConfirmationDataType, SOAP_TYPE_saml2__KeyInfoConfirmationDataType, sizeof(struct saml2__KeyInfoConfirmationDataType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml2__KeyInfoConfirmationDataType * SOAP_FMAC2 soap_instantiate_saml2__KeyInfoConfirmationDataType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml2__KeyInfoConfirmationDataType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml2__KeyInfoConfirmationDataType *p;
	size_t k = sizeof(struct saml2__KeyInfoConfirmationDataType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml2__KeyInfoConfirmationDataType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml2__KeyInfoConfirmationDataType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml2__KeyInfoConfirmationDataType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml2__KeyInfoConfirmationDataType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__KeyInfoConfirmationDataType(struct soap *soap, const struct saml2__KeyInfoConfirmationDataType *a, const char *tag, const char *type)
{
	if (soap_out_saml2__KeyInfoConfirmationDataType(soap, tag ? tag : "saml2:KeyInfoConfirmationDataType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__KeyInfoConfirmationDataType * SOAP_FMAC4 soap_get_saml2__KeyInfoConfirmationDataType(struct soap *soap, struct saml2__KeyInfoConfirmationDataType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml2__KeyInfoConfirmationDataType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__SubjectConfirmationDataType(struct soap *soap, struct saml2__SubjectConfirmationDataType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->NotBefore = NULL;
	a->NotOnOrAfter = NULL;
	soap_default_string(soap, &a->Recipient);
	soap_default_string(soap, &a->InResponseTo);
	soap_default_string(soap, &a->Address);
	a->__mixed = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__SubjectConfirmationDataType(struct soap *soap, const struct saml2__SubjectConfirmationDataType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__SubjectConfirmationDataType(struct soap *soap, const char *tag, int id, const struct saml2__SubjectConfirmationDataType *a, const char *type)
{
	if (a->NotBefore)
	{	soap_set_attr(soap, "NotBefore", soap_dateTime2s(soap, *a->NotBefore), 1);
	}
	if (a->NotOnOrAfter)
	{	soap_set_attr(soap, "NotOnOrAfter", soap_dateTime2s(soap, *a->NotOnOrAfter), 1);
	}
	if (a->Recipient)
		soap_set_attr(soap, "Recipient", soap_string2s(soap, a->Recipient), 1);
	if (a->InResponseTo)
		soap_set_attr(soap, "InResponseTo", soap_string2s(soap, a->InResponseTo), 1);
	if (a->Address)
		soap_set_attr(soap, "Address", soap_string2s(soap, a->Address), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml2__SubjectConfirmationDataType), type))
		return soap->error;
	if (soap_outliteral(soap, "-mixed", (char*const*)&a->__mixed, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml2__SubjectConfirmationDataType * SOAP_FMAC4 soap_in_saml2__SubjectConfirmationDataType(struct soap *soap, const char *tag, struct saml2__SubjectConfirmationDataType *a, const char *type)
{
	size_t soap_flag___mixed = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml2__SubjectConfirmationDataType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml2__SubjectConfirmationDataType, sizeof(struct saml2__SubjectConfirmationDataType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml2__SubjectConfirmationDataType(soap, a);
	{
		const char *t = soap_attr_value(soap, "NotBefore", 5, 0);
		if (t)
		{
			if (!(a->NotBefore = (time_t *)soap_malloc(soap, sizeof(time_t))))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2dateTime(soap, t, a->NotBefore))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	{
		const char *t = soap_attr_value(soap, "NotOnOrAfter", 5, 0);
		if (t)
		{
			if (!(a->NotOnOrAfter = (time_t *)soap_malloc(soap, sizeof(time_t))))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2dateTime(soap, t, a->NotOnOrAfter))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	if (soap_s2string(soap, soap_attr_value(soap, "Recipient", 1, 0), &a->Recipient))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "InResponseTo", 1, 0), &a->InResponseTo))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "Address", 1, 0), &a->Address))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___mixed && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-mixed", (char**)&a->__mixed))
				{	soap_flag___mixed--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct saml2__SubjectConfirmationDataType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml2__SubjectConfirmationDataType, SOAP_TYPE_saml2__SubjectConfirmationDataType, sizeof(struct saml2__SubjectConfirmationDataType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml2__SubjectConfirmationDataType * SOAP_FMAC2 soap_instantiate_saml2__SubjectConfirmationDataType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml2__SubjectConfirmationDataType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml2__SubjectConfirmationDataType *p;
	size_t k = sizeof(struct saml2__SubjectConfirmationDataType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml2__SubjectConfirmationDataType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml2__SubjectConfirmationDataType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml2__SubjectConfirmationDataType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml2__SubjectConfirmationDataType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__SubjectConfirmationDataType(struct soap *soap, const struct saml2__SubjectConfirmationDataType *a, const char *tag, const char *type)
{
	if (soap_out_saml2__SubjectConfirmationDataType(soap, tag ? tag : "saml2:SubjectConfirmationDataType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__SubjectConfirmationDataType * SOAP_FMAC4 soap_get_saml2__SubjectConfirmationDataType(struct soap *soap, struct saml2__SubjectConfirmationDataType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml2__SubjectConfirmationDataType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__SubjectConfirmationType(struct soap *soap, struct saml2__SubjectConfirmationType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->saml2__BaseID = NULL;
	a->saml2__NameID = NULL;
	a->saml2__EncryptedID = NULL;
	a->saml2__SubjectConfirmationData = NULL;
	soap_default_string(soap, &a->Method);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__SubjectConfirmationType(struct soap *soap, const struct saml2__SubjectConfirmationType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTosaml2__BaseIDAbstractType(soap, &a->saml2__BaseID);
	soap_serialize_PointerTosaml2__NameIDType(soap, &a->saml2__NameID);
	soap_serialize_PointerTosaml2__EncryptedElementType(soap, &a->saml2__EncryptedID);
	soap_serialize_PointerTosaml2__SubjectConfirmationDataType(soap, &a->saml2__SubjectConfirmationData);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__SubjectConfirmationType(struct soap *soap, const char *tag, int id, const struct saml2__SubjectConfirmationType *a, const char *type)
{
	soap_set_attr(soap, "Method", a->Method ? soap_string2s(soap, a->Method) : "", 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml2__SubjectConfirmationType), type))
		return soap->error;
	if (soap_out_PointerTosaml2__BaseIDAbstractType(soap, "saml2:BaseID", -1, &a->saml2__BaseID, ""))
		return soap->error;
	if (soap_out_PointerTosaml2__NameIDType(soap, "saml2:NameID", -1, &a->saml2__NameID, ""))
		return soap->error;
	if (soap_out_PointerTosaml2__EncryptedElementType(soap, "saml2:EncryptedID", -1, &a->saml2__EncryptedID, ""))
		return soap->error;
	if (soap_out_PointerTosaml2__SubjectConfirmationDataType(soap, "saml2:SubjectConfirmationData", -1, &a->saml2__SubjectConfirmationData, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml2__SubjectConfirmationType * SOAP_FMAC4 soap_in_saml2__SubjectConfirmationType(struct soap *soap, const char *tag, struct saml2__SubjectConfirmationType *a, const char *type)
{
	size_t soap_flag_saml2__BaseID = 1;
	size_t soap_flag_saml2__NameID = 1;
	size_t soap_flag_saml2__EncryptedID = 1;
	size_t soap_flag_saml2__SubjectConfirmationData = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml2__SubjectConfirmationType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml2__SubjectConfirmationType, sizeof(struct saml2__SubjectConfirmationType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml2__SubjectConfirmationType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "Method", 1, 1), &a->Method))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_saml2__BaseID && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml2__BaseIDAbstractType(soap, "saml2:BaseID", &a->saml2__BaseID, "saml2:BaseIDAbstractType"))
				{	soap_flag_saml2__BaseID--;
					continue;
				}
			}
			if (soap_flag_saml2__NameID && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml2__NameIDType(soap, "saml2:NameID", &a->saml2__NameID, "saml2:NameIDType"))
				{	soap_flag_saml2__NameID--;
					continue;
				}
			}
			if (soap_flag_saml2__EncryptedID && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml2__EncryptedElementType(soap, "saml2:EncryptedID", &a->saml2__EncryptedID, "saml2:EncryptedElementType"))
				{	soap_flag_saml2__EncryptedID--;
					continue;
				}
			}
			if (soap_flag_saml2__SubjectConfirmationData && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml2__SubjectConfirmationDataType(soap, "saml2:SubjectConfirmationData", &a->saml2__SubjectConfirmationData, "saml2:SubjectConfirmationDataType"))
				{	soap_flag_saml2__SubjectConfirmationData--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct saml2__SubjectConfirmationType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml2__SubjectConfirmationType, SOAP_TYPE_saml2__SubjectConfirmationType, sizeof(struct saml2__SubjectConfirmationType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml2__SubjectConfirmationType * SOAP_FMAC2 soap_instantiate_saml2__SubjectConfirmationType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml2__SubjectConfirmationType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml2__SubjectConfirmationType *p;
	size_t k = sizeof(struct saml2__SubjectConfirmationType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml2__SubjectConfirmationType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml2__SubjectConfirmationType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml2__SubjectConfirmationType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml2__SubjectConfirmationType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__SubjectConfirmationType(struct soap *soap, const struct saml2__SubjectConfirmationType *a, const char *tag, const char *type)
{
	if (soap_out_saml2__SubjectConfirmationType(soap, tag ? tag : "saml2:SubjectConfirmationType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__SubjectConfirmationType * SOAP_FMAC4 soap_get_saml2__SubjectConfirmationType(struct soap *soap, struct saml2__SubjectConfirmationType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml2__SubjectConfirmationType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__SubjectType(struct soap *soap, struct saml2__SubjectType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->saml2__BaseID = NULL;
	a->saml2__NameID = NULL;
	a->saml2__EncryptedID = NULL;
	a->__sizeSubjectConfirmation = 0;
	a->saml2__SubjectConfirmation = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__SubjectType(struct soap *soap, const struct saml2__SubjectType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTosaml2__BaseIDAbstractType(soap, &a->saml2__BaseID);
	soap_serialize_PointerTosaml2__NameIDType(soap, &a->saml2__NameID);
	soap_serialize_PointerTosaml2__EncryptedElementType(soap, &a->saml2__EncryptedID);
	if (a->saml2__SubjectConfirmation)
	{	int i;
		for (i = 0; i < (int)a->__sizeSubjectConfirmation; i++)
		{
			soap_embedded(soap, a->saml2__SubjectConfirmation + i, SOAP_TYPE_saml2__SubjectConfirmationType);
			soap_serialize_saml2__SubjectConfirmationType(soap, a->saml2__SubjectConfirmation + i);
		}
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__SubjectType(struct soap *soap, const char *tag, int id, const struct saml2__SubjectType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml2__SubjectType), type))
		return soap->error;
	if (soap_out_PointerTosaml2__BaseIDAbstractType(soap, "saml2:BaseID", -1, &a->saml2__BaseID, ""))
		return soap->error;
	if (soap_out_PointerTosaml2__NameIDType(soap, "saml2:NameID", -1, &a->saml2__NameID, ""))
		return soap->error;
	if (soap_out_PointerTosaml2__EncryptedElementType(soap, "saml2:EncryptedID", -1, &a->saml2__EncryptedID, ""))
		return soap->error;
	if (a->saml2__SubjectConfirmation)
	{	int i;
		for (i = 0; i < (int)a->__sizeSubjectConfirmation; i++)
			if (soap_out_saml2__SubjectConfirmationType(soap, "saml2:SubjectConfirmation", -1, a->saml2__SubjectConfirmation + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml2__SubjectType * SOAP_FMAC4 soap_in_saml2__SubjectType(struct soap *soap, const char *tag, struct saml2__SubjectType *a, const char *type)
{
	size_t soap_flag_saml2__BaseID = 1;
	size_t soap_flag_saml2__NameID = 1;
	size_t soap_flag_saml2__EncryptedID = 1;
	struct soap_blist *soap_blist_saml2__SubjectConfirmation = NULL;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml2__SubjectType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml2__SubjectType, sizeof(struct saml2__SubjectType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml2__SubjectType(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_saml2__BaseID && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml2__BaseIDAbstractType(soap, "saml2:BaseID", &a->saml2__BaseID, "saml2:BaseIDAbstractType"))
				{	soap_flag_saml2__BaseID--;
					continue;
				}
			}
			if (soap_flag_saml2__NameID && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml2__NameIDType(soap, "saml2:NameID", &a->saml2__NameID, "saml2:NameIDType"))
				{	soap_flag_saml2__NameID--;
					continue;
				}
			}
			if (soap_flag_saml2__EncryptedID && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml2__EncryptedElementType(soap, "saml2:EncryptedID", &a->saml2__EncryptedID, "saml2:EncryptedElementType"))
				{	soap_flag_saml2__EncryptedID--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "saml2:SubjectConfirmation", 1, NULL))
			{	if (a->saml2__SubjectConfirmation == NULL)
				{	if (soap_blist_saml2__SubjectConfirmation == NULL)
						soap_blist_saml2__SubjectConfirmation = soap_alloc_block(soap);
					a->saml2__SubjectConfirmation = soap_block<struct saml2__SubjectConfirmationType>::push(soap, soap_blist_saml2__SubjectConfirmation);
					if (a->saml2__SubjectConfirmation == NULL)
						return NULL;
					soap_default_saml2__SubjectConfirmationType(soap, a->saml2__SubjectConfirmation);
				}
				soap_revert(soap);
				if (soap_in_saml2__SubjectConfirmationType(soap, "saml2:SubjectConfirmation", a->saml2__SubjectConfirmation, "saml2:SubjectConfirmationType"))
				{	a->__sizeSubjectConfirmation++;
					a->saml2__SubjectConfirmation = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->saml2__SubjectConfirmation)
			soap_block<struct saml2__SubjectConfirmationType>::pop(soap, soap_blist_saml2__SubjectConfirmation);
		if (a->__sizeSubjectConfirmation)
		{	a->saml2__SubjectConfirmation = soap_new_saml2__SubjectConfirmationType(soap, a->__sizeSubjectConfirmation);
			if (!a->saml2__SubjectConfirmation)
				return NULL;
			soap_block<struct saml2__SubjectConfirmationType>::save(soap, soap_blist_saml2__SubjectConfirmation, a->saml2__SubjectConfirmation);
		}
		else
		{	a->saml2__SubjectConfirmation = NULL;
			if (soap_blist_saml2__SubjectConfirmation)
				soap_block<struct saml2__SubjectConfirmationType>::end(soap, soap_blist_saml2__SubjectConfirmation);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct saml2__SubjectType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml2__SubjectType, SOAP_TYPE_saml2__SubjectType, sizeof(struct saml2__SubjectType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml2__SubjectType * SOAP_FMAC2 soap_instantiate_saml2__SubjectType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml2__SubjectType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml2__SubjectType *p;
	size_t k = sizeof(struct saml2__SubjectType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml2__SubjectType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml2__SubjectType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml2__SubjectType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml2__SubjectType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__SubjectType(struct soap *soap, const struct saml2__SubjectType *a, const char *tag, const char *type)
{
	if (soap_out_saml2__SubjectType(soap, tag ? tag : "saml2:SubjectType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__SubjectType * SOAP_FMAC4 soap_get_saml2__SubjectType(struct soap *soap, struct saml2__SubjectType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml2__SubjectType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__AssertionType(struct soap *soap, struct saml2__AssertionType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->saml2__Issuer = NULL;
	a->ds__Signature = NULL;
	a->saml2__Subject = NULL;
	a->saml2__Conditions = NULL;
	a->saml2__Advice = NULL;
	a->__size_AssertionType = 0;
	a->__union_AssertionType = NULL;
	soap_default_string(soap, &a->Version);
	soap_default_string(soap, &a->ID);
	soap_default_dateTime(soap, &a->IssueInstant);
	soap_default_string(soap, &a->wsu__Id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__AssertionType(struct soap *soap, const struct saml2__AssertionType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTosaml2__NameIDType(soap, &a->saml2__Issuer);
	soap_serialize_PointerTo_ds__Signature(soap, &a->ds__Signature);
	soap_serialize_PointerTosaml2__SubjectType(soap, &a->saml2__Subject);
	soap_serialize_PointerTosaml2__ConditionsType(soap, &a->saml2__Conditions);
	soap_serialize_PointerTosaml2__AdviceType(soap, &a->saml2__Advice);
	if (a->__union_AssertionType)
	{	int i;
		for (i = 0; i < (int)a->__size_AssertionType; i++)
		{
			soap_serialize___saml2__union_AssertionType(soap, a->__union_AssertionType + i);
		}
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__AssertionType(struct soap *soap, const char *tag, int id, const struct saml2__AssertionType *a, const char *type)
{
	soap_set_attr(soap, "Version", a->Version ? soap_string2s(soap, a->Version) : "", 1);
	soap_set_attr(soap, "ID", a->ID ? soap_string2s(soap, a->ID) : "", 1);
	soap_set_attr(soap, "IssueInstant", soap_dateTime2s(soap, a->IssueInstant), 1);
	if (a->wsu__Id)
		soap_set_attr(soap, "wsu:Id", soap_string2s(soap, a->wsu__Id), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml2__AssertionType), type))
		return soap->error;
	if (!a->saml2__Issuer)
	{	if (soap_element_empty(soap, "saml2:Issuer"))
			return soap->error;
	}
	else
	if (soap_out_PointerTosaml2__NameIDType(soap, "saml2:Issuer", -1, &a->saml2__Issuer, ""))
		return soap->error;
	if (soap_out_PointerTo_ds__Signature(soap, "ds:Signature", -1, &a->ds__Signature, ""))
		return soap->error;
	if (soap_out_PointerTosaml2__SubjectType(soap, "saml2:Subject", -1, &a->saml2__Subject, ""))
		return soap->error;
	if (soap_out_PointerTosaml2__ConditionsType(soap, "saml2:Conditions", -1, &a->saml2__Conditions, ""))
		return soap->error;
	if (soap_out_PointerTosaml2__AdviceType(soap, "saml2:Advice", -1, &a->saml2__Advice, ""))
		return soap->error;
	if (a->__union_AssertionType)
	{	int i;
		for (i = 0; i < (int)a->__size_AssertionType; i++)
			if (soap_out___saml2__union_AssertionType(soap, "-union-AssertionType", -1, a->__union_AssertionType + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml2__AssertionType * SOAP_FMAC4 soap_in_saml2__AssertionType(struct soap *soap, const char *tag, struct saml2__AssertionType *a, const char *type)
{
	size_t soap_flag_saml2__Issuer = 1;
	size_t soap_flag_ds__Signature = 1;
	size_t soap_flag_saml2__Subject = 1;
	size_t soap_flag_saml2__Conditions = 1;
	size_t soap_flag_saml2__Advice = 1;
	struct soap_blist *soap_blist___union_AssertionType = NULL;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml2__AssertionType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml2__AssertionType, sizeof(struct saml2__AssertionType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml2__AssertionType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "Version", 1, 1), &a->Version))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "ID", 1, 1), &a->ID))
		return NULL;
	if (soap_s2dateTime(soap, soap_attr_value(soap, "IssueInstant", 5, 1), &a->IssueInstant))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "wsu:Id", 1, 0), &a->wsu__Id))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_saml2__Issuer && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml2__NameIDType(soap, "saml2:Issuer", &a->saml2__Issuer, "saml2:NameIDType"))
				{	soap_flag_saml2__Issuer--;
					continue;
				}
			}
			if (soap_flag_ds__Signature && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ds__Signature(soap, "ds:Signature", &a->ds__Signature, ""))
				{	soap_flag_ds__Signature--;
					continue;
				}
			}
			if (soap_flag_saml2__Subject && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml2__SubjectType(soap, "saml2:Subject", &a->saml2__Subject, "saml2:SubjectType"))
				{	soap_flag_saml2__Subject--;
					continue;
				}
			}
			if (soap_flag_saml2__Conditions && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml2__ConditionsType(soap, "saml2:Conditions", &a->saml2__Conditions, "saml2:ConditionsType"))
				{	soap_flag_saml2__Conditions--;
					continue;
				}
			}
			if (soap_flag_saml2__Advice && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml2__AdviceType(soap, "saml2:Advice", &a->saml2__Advice, "saml2:AdviceType"))
				{	soap_flag_saml2__Advice--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && !soap_peek_element(soap))
			{	if (a->__union_AssertionType == NULL)
				{	if (soap_blist___union_AssertionType == NULL)
						soap_blist___union_AssertionType = soap_alloc_block(soap);
					a->__union_AssertionType = soap_block<struct __saml2__union_AssertionType>::push(soap, soap_blist___union_AssertionType);
					if (a->__union_AssertionType == NULL)
						return NULL;
					soap_default___saml2__union_AssertionType(soap, a->__union_AssertionType);
				}
				if (soap_in___saml2__union_AssertionType(soap, "-union-AssertionType", a->__union_AssertionType, "-saml2:union-AssertionType"))
				{	a->__size_AssertionType++;
					a->__union_AssertionType = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->__union_AssertionType)
			soap_block<struct __saml2__union_AssertionType>::pop(soap, soap_blist___union_AssertionType);
		if (a->__size_AssertionType)
		{	a->__union_AssertionType = soap_new___saml2__union_AssertionType(soap, a->__size_AssertionType);
			if (!a->__union_AssertionType)
				return NULL;
			soap_block<struct __saml2__union_AssertionType>::save(soap, soap_blist___union_AssertionType, a->__union_AssertionType);
		}
		else
		{	a->__union_AssertionType = NULL;
			if (soap_blist___union_AssertionType)
				soap_block<struct __saml2__union_AssertionType>::end(soap, soap_blist___union_AssertionType);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->saml2__Issuer))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct saml2__AssertionType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml2__AssertionType, SOAP_TYPE_saml2__AssertionType, sizeof(struct saml2__AssertionType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml2__AssertionType * SOAP_FMAC2 soap_instantiate_saml2__AssertionType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml2__AssertionType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml2__AssertionType *p;
	size_t k = sizeof(struct saml2__AssertionType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml2__AssertionType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml2__AssertionType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml2__AssertionType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml2__AssertionType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__AssertionType(struct soap *soap, const struct saml2__AssertionType *a, const char *tag, const char *type)
{
	if (soap_out_saml2__AssertionType(soap, tag ? tag : "saml2:AssertionType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__AssertionType * SOAP_FMAC4 soap_get_saml2__AssertionType(struct soap *soap, struct saml2__AssertionType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml2__AssertionType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__EncryptedElementType(struct soap *soap, struct saml2__EncryptedElementType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xenc__EncryptedDataType(soap, &a->xenc__EncryptedData);
	a->__sizexenc__EncryptedKey = 0;
	a->xenc__EncryptedKey = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__EncryptedElementType(struct soap *soap, const struct saml2__EncryptedElementType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xenc__EncryptedDataType(soap, &a->xenc__EncryptedData);
	if (a->xenc__EncryptedKey)
	{	int i;
		for (i = 0; i < (int)a->__sizexenc__EncryptedKey; i++)
		{
			soap_serialize_PointerToxenc__EncryptedKeyType(soap, a->xenc__EncryptedKey + i);
		}
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__EncryptedElementType(struct soap *soap, const char *tag, int id, const struct saml2__EncryptedElementType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml2__EncryptedElementType), type))
		return soap->error;
	if (soap_out_xenc__EncryptedDataType(soap, "xenc:EncryptedData", -1, &a->xenc__EncryptedData, ""))
		return soap->error;
	if (a->xenc__EncryptedKey)
	{	int i;
		for (i = 0; i < (int)a->__sizexenc__EncryptedKey; i++)
			if (soap_out_PointerToxenc__EncryptedKeyType(soap, "xenc:EncryptedKey", -1, a->xenc__EncryptedKey + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml2__EncryptedElementType * SOAP_FMAC4 soap_in_saml2__EncryptedElementType(struct soap *soap, const char *tag, struct saml2__EncryptedElementType *a, const char *type)
{
	size_t soap_flag_xenc__EncryptedData = 1;
	struct soap_blist *soap_blist_xenc__EncryptedKey = NULL;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml2__EncryptedElementType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml2__EncryptedElementType, sizeof(struct saml2__EncryptedElementType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml2__EncryptedElementType(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_xenc__EncryptedData && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_xenc__EncryptedDataType(soap, "xenc:EncryptedData", &a->xenc__EncryptedData, "xenc:EncryptedDataType"))
				{	soap_flag_xenc__EncryptedData--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "xenc:EncryptedKey", 1, NULL))
			{	if (a->xenc__EncryptedKey == NULL)
				{	if (soap_blist_xenc__EncryptedKey == NULL)
						soap_blist_xenc__EncryptedKey = soap_alloc_block(soap);
					a->xenc__EncryptedKey = (struct xenc__EncryptedKeyType **)soap_push_block_max(soap, soap_blist_xenc__EncryptedKey, sizeof(struct xenc__EncryptedKeyType *));
					if (a->xenc__EncryptedKey == NULL)
						return NULL;
					*a->xenc__EncryptedKey = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToxenc__EncryptedKeyType(soap, "xenc:EncryptedKey", a->xenc__EncryptedKey, "xenc:EncryptedKeyType"))
				{	a->__sizexenc__EncryptedKey++;
					a->xenc__EncryptedKey = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->xenc__EncryptedKey)
			soap_pop_block(soap, soap_blist_xenc__EncryptedKey);
		if (a->__sizexenc__EncryptedKey)
		{	a->xenc__EncryptedKey = (struct xenc__EncryptedKeyType **)soap_save_block(soap, soap_blist_xenc__EncryptedKey, NULL, 1);
		}
		else
		{	a->xenc__EncryptedKey = NULL;
			if (soap_blist_xenc__EncryptedKey)
				soap_end_block(soap, soap_blist_xenc__EncryptedKey);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_xenc__EncryptedData > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct saml2__EncryptedElementType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml2__EncryptedElementType, SOAP_TYPE_saml2__EncryptedElementType, sizeof(struct saml2__EncryptedElementType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml2__EncryptedElementType * SOAP_FMAC2 soap_instantiate_saml2__EncryptedElementType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml2__EncryptedElementType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml2__EncryptedElementType *p;
	size_t k = sizeof(struct saml2__EncryptedElementType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml2__EncryptedElementType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml2__EncryptedElementType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml2__EncryptedElementType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml2__EncryptedElementType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__EncryptedElementType(struct soap *soap, const struct saml2__EncryptedElementType *a, const char *tag, const char *type)
{
	if (soap_out_saml2__EncryptedElementType(soap, tag ? tag : "saml2:EncryptedElementType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__EncryptedElementType * SOAP_FMAC4 soap_get_saml2__EncryptedElementType(struct soap *soap, struct saml2__EncryptedElementType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml2__EncryptedElementType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__NameIDType(struct soap *soap, struct saml2__NameIDType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->__item);
	soap_default_string(soap, &a->Format);
	soap_default_string(soap, &a->SPProvidedID);
	soap_default_string(soap, &a->NameQualifier);
	soap_default_string(soap, &a->SPNameQualifier);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__NameIDType(struct soap *soap, const struct saml2__NameIDType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->__item);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__NameIDType(struct soap *soap, const char *tag, int id, const struct saml2__NameIDType *a, const char *type)
{
	if (a->Format)
		soap_set_attr(soap, "Format", soap_string2s(soap, a->Format), 1);
	if (a->SPProvidedID)
		soap_set_attr(soap, "SPProvidedID", soap_string2s(soap, a->SPProvidedID), 1);
	if (a->NameQualifier)
		soap_set_attr(soap, "NameQualifier", soap_string2s(soap, a->NameQualifier), 1);
	if (a->SPNameQualifier)
		soap_set_attr(soap, "SPNameQualifier", soap_string2s(soap, a->SPNameQualifier), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_string(soap, tag, id, (char*const*)&a->__item, "");
}

SOAP_FMAC3 struct saml2__NameIDType * SOAP_FMAC4 soap_in_saml2__NameIDType(struct soap *soap, const char *tag, struct saml2__NameIDType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (struct saml2__NameIDType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml2__NameIDType, sizeof(struct saml2__NameIDType), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
		return NULL;
	soap_revert(soap);
	*soap->id = '\0';
	soap_default_saml2__NameIDType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "Format", 1, 0), &a->Format))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "SPProvidedID", 1, 0), &a->SPProvidedID))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "NameQualifier", 1, 0), &a->NameQualifier))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "SPNameQualifier", 1, 0), &a->SPNameQualifier))
		return NULL;
	if (!soap_in_string(soap, tag, (char**)&a->__item, "saml2:NameIDType"))
		return NULL;
	return a;
}

SOAP_FMAC1 struct saml2__NameIDType * SOAP_FMAC2 soap_instantiate_saml2__NameIDType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml2__NameIDType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml2__NameIDType *p;
	size_t k = sizeof(struct saml2__NameIDType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml2__NameIDType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml2__NameIDType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml2__NameIDType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml2__NameIDType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__NameIDType(struct soap *soap, const struct saml2__NameIDType *a, const char *tag, const char *type)
{
	if (soap_out_saml2__NameIDType(soap, tag ? tag : "saml2:NameIDType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__NameIDType * SOAP_FMAC4 soap_get_saml2__NameIDType(struct soap *soap, struct saml2__NameIDType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml2__NameIDType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml2__BaseIDAbstractType(struct soap *soap, struct saml2__BaseIDAbstractType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->NameQualifier);
	soap_default_string(soap, &a->SPNameQualifier);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml2__BaseIDAbstractType(struct soap *soap, const struct saml2__BaseIDAbstractType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml2__BaseIDAbstractType(struct soap *soap, const char *tag, int id, const struct saml2__BaseIDAbstractType *a, const char *type)
{
	if (a->NameQualifier)
		soap_set_attr(soap, "NameQualifier", soap_string2s(soap, a->NameQualifier), 1);
	if (a->SPNameQualifier)
		soap_set_attr(soap, "SPNameQualifier", soap_string2s(soap, a->SPNameQualifier), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml2__BaseIDAbstractType), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml2__BaseIDAbstractType * SOAP_FMAC4 soap_in_saml2__BaseIDAbstractType(struct soap *soap, const char *tag, struct saml2__BaseIDAbstractType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml2__BaseIDAbstractType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml2__BaseIDAbstractType, sizeof(struct saml2__BaseIDAbstractType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml2__BaseIDAbstractType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "NameQualifier", 1, 0), &a->NameQualifier))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "SPNameQualifier", 1, 0), &a->SPNameQualifier))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct saml2__BaseIDAbstractType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml2__BaseIDAbstractType, SOAP_TYPE_saml2__BaseIDAbstractType, sizeof(struct saml2__BaseIDAbstractType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml2__BaseIDAbstractType * SOAP_FMAC2 soap_instantiate_saml2__BaseIDAbstractType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml2__BaseIDAbstractType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml2__BaseIDAbstractType *p;
	size_t k = sizeof(struct saml2__BaseIDAbstractType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml2__BaseIDAbstractType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml2__BaseIDAbstractType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml2__BaseIDAbstractType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml2__BaseIDAbstractType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml2__BaseIDAbstractType(struct soap *soap, const struct saml2__BaseIDAbstractType *a, const char *tag, const char *type)
{
	if (soap_out_saml2__BaseIDAbstractType(soap, tag ? tag : "saml2:BaseIDAbstractType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__BaseIDAbstractType * SOAP_FMAC4 soap_get_saml2__BaseIDAbstractType(struct soap *soap, struct saml2__BaseIDAbstractType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml2__BaseIDAbstractType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Attribute(struct soap *soap, const struct saml1__AttributeType *a, const char *tag, const char *type)
{
	if (soap_out__saml1__Attribute(soap, tag ? tag : "saml1:Attribute", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__AttributeDesignator(struct soap *soap, const struct saml1__AttributeDesignatorType *a, const char *tag, const char *type)
{
	if (soap_out__saml1__AttributeDesignator(soap, tag ? tag : "saml1:AttributeDesignator", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__AttributeStatement(struct soap *soap, const struct saml1__AttributeStatementType *a, const char *tag, const char *type)
{
	if (soap_out__saml1__AttributeStatement(soap, tag ? tag : "saml1:AttributeStatement", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Evidence(struct soap *soap, const struct saml1__EvidenceType *a, const char *tag, const char *type)
{
	if (soap_out__saml1__Evidence(soap, tag ? tag : "saml1:Evidence", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Action(struct soap *soap, const struct saml1__ActionType *a, const char *tag, const char *type)
{
	if (soap_out__saml1__Action(soap, tag ? tag : "saml1:Action", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__AuthorizationDecisionStatement(struct soap *soap, const struct saml1__AuthorizationDecisionStatementType *a, const char *tag, const char *type)
{
	if (soap_out__saml1__AuthorizationDecisionStatement(soap, tag ? tag : "saml1:AuthorizationDecisionStatement", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__AuthorityBinding(struct soap *soap, const struct saml1__AuthorityBindingType *a, const char *tag, const char *type)
{
	if (soap_out__saml1__AuthorityBinding(soap, tag ? tag : "saml1:AuthorityBinding", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__SubjectLocality(struct soap *soap, const struct saml1__SubjectLocalityType *a, const char *tag, const char *type)
{
	if (soap_out__saml1__SubjectLocality(soap, tag ? tag : "saml1:SubjectLocality", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__AuthenticationStatement(struct soap *soap, const struct saml1__AuthenticationStatementType *a, const char *tag, const char *type)
{
	if (soap_out__saml1__AuthenticationStatement(soap, tag ? tag : "saml1:AuthenticationStatement", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__SubjectConfirmation(struct soap *soap, const struct saml1__SubjectConfirmationType *a, const char *tag, const char *type)
{
	if (soap_out__saml1__SubjectConfirmation(soap, tag ? tag : "saml1:SubjectConfirmation", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__NameIdentifier(struct soap *soap, const struct saml1__NameIdentifierType *a, const char *tag, const char *type)
{
	if (soap_out__saml1__NameIdentifier(soap, tag ? tag : "saml1:NameIdentifier", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Subject(struct soap *soap, const struct saml1__SubjectType *a, const char *tag, const char *type)
{
	if (soap_out__saml1__Subject(soap, tag ? tag : "saml1:Subject", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__SubjectStatement(struct soap *soap, const struct saml1__SubjectStatementAbstractType *a, const char *tag, const char *type)
{
	if (soap_out__saml1__SubjectStatement(soap, tag ? tag : "saml1:SubjectStatement", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Statement(struct soap *soap, const struct saml1__StatementAbstractType *a, const char *tag, const char *type)
{
	if (soap_out__saml1__Statement(soap, tag ? tag : "saml1:Statement", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Advice(struct soap *soap, const struct saml1__AdviceType *a, const char *tag, const char *type)
{
	if (soap_out__saml1__Advice(soap, tag ? tag : "saml1:Advice", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__DoNotCacheCondition(struct soap *soap, const struct saml1__DoNotCacheConditionType *a, const char *tag, const char *type)
{
	if (soap_out__saml1__DoNotCacheCondition(soap, tag ? tag : "saml1:DoNotCacheCondition", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__AudienceRestrictionCondition(struct soap *soap, const struct saml1__AudienceRestrictionConditionType *a, const char *tag, const char *type)
{
	if (soap_out__saml1__AudienceRestrictionCondition(soap, tag ? tag : "saml1:AudienceRestrictionCondition", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Condition(struct soap *soap, const struct saml1__ConditionAbstractType *a, const char *tag, const char *type)
{
	if (soap_out__saml1__Condition(soap, tag ? tag : "saml1:Condition", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Conditions(struct soap *soap, const struct saml1__ConditionsType *a, const char *tag, const char *type)
{
	if (soap_out__saml1__Conditions(soap, tag ? tag : "saml1:Conditions", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Assertion(struct soap *soap, const struct saml1__AssertionType *a, const char *tag, const char *type)
{
	if (soap_out__saml1__Assertion(soap, tag ? tag : "saml1:Assertion", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml1__union_EvidenceType(struct soap *soap, struct __saml1__union_EvidenceType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->saml1__AssertionIDReference);
	a->saml1__Assertion = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml1__union_EvidenceType(struct soap *soap, const struct __saml1__union_EvidenceType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->saml1__AssertionIDReference);
	soap_serialize_PointerTosaml1__AssertionType(soap, &a->saml1__Assertion);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml1__union_EvidenceType(struct soap *soap, const char *tag, int id, const struct __saml1__union_EvidenceType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_string(soap, "saml1:AssertionIDReference", -1, (char*const*)&a->saml1__AssertionIDReference, ""))
		return soap->error;
	if (soap_out_PointerTosaml1__AssertionType(soap, "saml1:Assertion", -1, &a->saml1__Assertion, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __saml1__union_EvidenceType * SOAP_FMAC4 soap_in___saml1__union_EvidenceType(struct soap *soap, const char *tag, struct __saml1__union_EvidenceType *a, const char *type)
{
	size_t soap_flag_saml1__AssertionIDReference = 1;
	size_t soap_flag_saml1__Assertion = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __saml1__union_EvidenceType *)soap_id_enter(soap, "", a, SOAP_TYPE___saml1__union_EvidenceType, sizeof(struct __saml1__union_EvidenceType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___saml1__union_EvidenceType(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_saml1__AssertionIDReference && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "saml1:AssertionIDReference", (char**)&a->saml1__AssertionIDReference, "xsd:string"))
				{	soap_flag_saml1__AssertionIDReference--;
					continue;
				}
			}
			if (soap_flag_saml1__Assertion && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml1__AssertionType(soap, "saml1:Assertion", &a->saml1__Assertion, "saml1:AssertionType"))
				{	soap_flag_saml1__Assertion--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __saml1__union_EvidenceType * SOAP_FMAC2 soap_instantiate___saml1__union_EvidenceType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___saml1__union_EvidenceType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __saml1__union_EvidenceType *p;
	size_t k = sizeof(struct __saml1__union_EvidenceType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___saml1__union_EvidenceType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __saml1__union_EvidenceType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __saml1__union_EvidenceType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __saml1__union_EvidenceType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml1__union_EvidenceType(struct soap *soap, const struct __saml1__union_EvidenceType *a, const char *tag, const char *type)
{
	if (soap_out___saml1__union_EvidenceType(soap, tag ? tag : "-saml1:union-EvidenceType", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __saml1__union_EvidenceType * SOAP_FMAC4 soap_get___saml1__union_EvidenceType(struct soap *soap, struct __saml1__union_EvidenceType *p, const char *tag, const char *type)
{
	if ((p = soap_in___saml1__union_EvidenceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml1__union_AdviceType(struct soap *soap, struct __saml1__union_AdviceType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->saml1__AssertionIDReference);
	a->saml1__Assertion = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml1__union_AdviceType(struct soap *soap, const struct __saml1__union_AdviceType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->saml1__AssertionIDReference);
	soap_serialize_PointerTosaml1__AssertionType(soap, &a->saml1__Assertion);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml1__union_AdviceType(struct soap *soap, const char *tag, int id, const struct __saml1__union_AdviceType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_string(soap, "saml1:AssertionIDReference", -1, (char*const*)&a->saml1__AssertionIDReference, ""))
		return soap->error;
	if (soap_out_PointerTosaml1__AssertionType(soap, "saml1:Assertion", -1, &a->saml1__Assertion, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __saml1__union_AdviceType * SOAP_FMAC4 soap_in___saml1__union_AdviceType(struct soap *soap, const char *tag, struct __saml1__union_AdviceType *a, const char *type)
{
	size_t soap_flag_saml1__AssertionIDReference = 1;
	size_t soap_flag_saml1__Assertion = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __saml1__union_AdviceType *)soap_id_enter(soap, "", a, SOAP_TYPE___saml1__union_AdviceType, sizeof(struct __saml1__union_AdviceType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___saml1__union_AdviceType(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_saml1__AssertionIDReference && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "saml1:AssertionIDReference", (char**)&a->saml1__AssertionIDReference, "xsd:string"))
				{	soap_flag_saml1__AssertionIDReference--;
					continue;
				}
			}
			if (soap_flag_saml1__Assertion && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml1__AssertionType(soap, "saml1:Assertion", &a->saml1__Assertion, "saml1:AssertionType"))
				{	soap_flag_saml1__Assertion--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __saml1__union_AdviceType * SOAP_FMAC2 soap_instantiate___saml1__union_AdviceType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___saml1__union_AdviceType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __saml1__union_AdviceType *p;
	size_t k = sizeof(struct __saml1__union_AdviceType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___saml1__union_AdviceType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __saml1__union_AdviceType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __saml1__union_AdviceType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __saml1__union_AdviceType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml1__union_AdviceType(struct soap *soap, const struct __saml1__union_AdviceType *a, const char *tag, const char *type)
{
	if (soap_out___saml1__union_AdviceType(soap, tag ? tag : "-saml1:union-AdviceType", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __saml1__union_AdviceType * SOAP_FMAC4 soap_get___saml1__union_AdviceType(struct soap *soap, struct __saml1__union_AdviceType *p, const char *tag, const char *type)
{
	if ((p = soap_in___saml1__union_AdviceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml1__union_ConditionsType(struct soap *soap, struct __saml1__union_ConditionsType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->saml1__AudienceRestrictionCondition = NULL;
	a->saml1__DoNotCacheCondition = NULL;
	a->saml1__Condition = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml1__union_ConditionsType(struct soap *soap, const struct __saml1__union_ConditionsType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTosaml1__AudienceRestrictionConditionType(soap, &a->saml1__AudienceRestrictionCondition);
	soap_serialize_PointerTosaml1__DoNotCacheConditionType(soap, &a->saml1__DoNotCacheCondition);
	soap_serialize_PointerTosaml1__ConditionAbstractType(soap, &a->saml1__Condition);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml1__union_ConditionsType(struct soap *soap, const char *tag, int id, const struct __saml1__union_ConditionsType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTosaml1__AudienceRestrictionConditionType(soap, "saml1:AudienceRestrictionCondition", -1, &a->saml1__AudienceRestrictionCondition, ""))
		return soap->error;
	if (soap_out_PointerTosaml1__DoNotCacheConditionType(soap, "saml1:DoNotCacheCondition", -1, &a->saml1__DoNotCacheCondition, ""))
		return soap->error;
	if (soap_out_PointerTosaml1__ConditionAbstractType(soap, "saml1:Condition", -1, &a->saml1__Condition, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __saml1__union_ConditionsType * SOAP_FMAC4 soap_in___saml1__union_ConditionsType(struct soap *soap, const char *tag, struct __saml1__union_ConditionsType *a, const char *type)
{
	size_t soap_flag_saml1__AudienceRestrictionCondition = 1;
	size_t soap_flag_saml1__DoNotCacheCondition = 1;
	size_t soap_flag_saml1__Condition = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __saml1__union_ConditionsType *)soap_id_enter(soap, "", a, SOAP_TYPE___saml1__union_ConditionsType, sizeof(struct __saml1__union_ConditionsType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___saml1__union_ConditionsType(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_saml1__AudienceRestrictionCondition && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml1__AudienceRestrictionConditionType(soap, "saml1:AudienceRestrictionCondition", &a->saml1__AudienceRestrictionCondition, "saml1:AudienceRestrictionConditionType"))
				{	soap_flag_saml1__AudienceRestrictionCondition--;
					continue;
				}
			}
			if (soap_flag_saml1__DoNotCacheCondition && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml1__DoNotCacheConditionType(soap, "saml1:DoNotCacheCondition", &a->saml1__DoNotCacheCondition, "saml1:DoNotCacheConditionType"))
				{	soap_flag_saml1__DoNotCacheCondition--;
					continue;
				}
			}
			if (soap_flag_saml1__Condition && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml1__ConditionAbstractType(soap, "saml1:Condition", &a->saml1__Condition, "saml1:ConditionAbstractType"))
				{	soap_flag_saml1__Condition--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __saml1__union_ConditionsType * SOAP_FMAC2 soap_instantiate___saml1__union_ConditionsType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___saml1__union_ConditionsType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __saml1__union_ConditionsType *p;
	size_t k = sizeof(struct __saml1__union_ConditionsType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___saml1__union_ConditionsType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __saml1__union_ConditionsType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __saml1__union_ConditionsType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __saml1__union_ConditionsType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml1__union_ConditionsType(struct soap *soap, const struct __saml1__union_ConditionsType *a, const char *tag, const char *type)
{
	if (soap_out___saml1__union_ConditionsType(soap, tag ? tag : "-saml1:union-ConditionsType", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __saml1__union_ConditionsType * SOAP_FMAC4 soap_get___saml1__union_ConditionsType(struct soap *soap, struct __saml1__union_ConditionsType *p, const char *tag, const char *type)
{
	if ((p = soap_in___saml1__union_ConditionsType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___saml1__union_AssertionType(struct soap *soap, struct __saml1__union_AssertionType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->saml1__Statement = NULL;
	a->saml1__SubjectStatement = NULL;
	a->saml1__AuthenticationStatement = NULL;
	a->saml1__AuthorizationDecisionStatement = NULL;
	a->saml1__AttributeStatement = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___saml1__union_AssertionType(struct soap *soap, const struct __saml1__union_AssertionType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTosaml1__StatementAbstractType(soap, &a->saml1__Statement);
	soap_serialize_PointerTosaml1__SubjectStatementAbstractType(soap, &a->saml1__SubjectStatement);
	soap_serialize_PointerTosaml1__AuthenticationStatementType(soap, &a->saml1__AuthenticationStatement);
	soap_serialize_PointerTosaml1__AuthorizationDecisionStatementType(soap, &a->saml1__AuthorizationDecisionStatement);
	soap_serialize_PointerTosaml1__AttributeStatementType(soap, &a->saml1__AttributeStatement);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___saml1__union_AssertionType(struct soap *soap, const char *tag, int id, const struct __saml1__union_AssertionType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTosaml1__StatementAbstractType(soap, "saml1:Statement", -1, &a->saml1__Statement, ""))
		return soap->error;
	if (soap_out_PointerTosaml1__SubjectStatementAbstractType(soap, "saml1:SubjectStatement", -1, &a->saml1__SubjectStatement, ""))
		return soap->error;
	if (soap_out_PointerTosaml1__AuthenticationStatementType(soap, "saml1:AuthenticationStatement", -1, &a->saml1__AuthenticationStatement, ""))
		return soap->error;
	if (soap_out_PointerTosaml1__AuthorizationDecisionStatementType(soap, "saml1:AuthorizationDecisionStatement", -1, &a->saml1__AuthorizationDecisionStatement, ""))
		return soap->error;
	if (soap_out_PointerTosaml1__AttributeStatementType(soap, "saml1:AttributeStatement", -1, &a->saml1__AttributeStatement, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __saml1__union_AssertionType * SOAP_FMAC4 soap_in___saml1__union_AssertionType(struct soap *soap, const char *tag, struct __saml1__union_AssertionType *a, const char *type)
{
	size_t soap_flag_saml1__Statement = 1;
	size_t soap_flag_saml1__SubjectStatement = 1;
	size_t soap_flag_saml1__AuthenticationStatement = 1;
	size_t soap_flag_saml1__AuthorizationDecisionStatement = 1;
	size_t soap_flag_saml1__AttributeStatement = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __saml1__union_AssertionType *)soap_id_enter(soap, "", a, SOAP_TYPE___saml1__union_AssertionType, sizeof(struct __saml1__union_AssertionType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___saml1__union_AssertionType(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_saml1__Statement && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml1__StatementAbstractType(soap, "saml1:Statement", &a->saml1__Statement, "saml1:StatementAbstractType"))
				{	soap_flag_saml1__Statement--;
					continue;
				}
			}
			if (soap_flag_saml1__SubjectStatement && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml1__SubjectStatementAbstractType(soap, "saml1:SubjectStatement", &a->saml1__SubjectStatement, "saml1:SubjectStatementAbstractType"))
				{	soap_flag_saml1__SubjectStatement--;
					continue;
				}
			}
			if (soap_flag_saml1__AuthenticationStatement && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml1__AuthenticationStatementType(soap, "saml1:AuthenticationStatement", &a->saml1__AuthenticationStatement, "saml1:AuthenticationStatementType"))
				{	soap_flag_saml1__AuthenticationStatement--;
					continue;
				}
			}
			if (soap_flag_saml1__AuthorizationDecisionStatement && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml1__AuthorizationDecisionStatementType(soap, "saml1:AuthorizationDecisionStatement", &a->saml1__AuthorizationDecisionStatement, "saml1:AuthorizationDecisionStatementType"))
				{	soap_flag_saml1__AuthorizationDecisionStatement--;
					continue;
				}
			}
			if (soap_flag_saml1__AttributeStatement && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml1__AttributeStatementType(soap, "saml1:AttributeStatement", &a->saml1__AttributeStatement, "saml1:AttributeStatementType"))
				{	soap_flag_saml1__AttributeStatement--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __saml1__union_AssertionType * SOAP_FMAC2 soap_instantiate___saml1__union_AssertionType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___saml1__union_AssertionType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __saml1__union_AssertionType *p;
	size_t k = sizeof(struct __saml1__union_AssertionType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___saml1__union_AssertionType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __saml1__union_AssertionType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __saml1__union_AssertionType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __saml1__union_AssertionType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___saml1__union_AssertionType(struct soap *soap, const struct __saml1__union_AssertionType *a, const char *tag, const char *type)
{
	if (soap_out___saml1__union_AssertionType(soap, tag ? tag : "-saml1:union-AssertionType", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __saml1__union_AssertionType * SOAP_FMAC4 soap_get___saml1__union_AssertionType(struct soap *soap, struct __saml1__union_AssertionType *p, const char *tag, const char *type)
{
	if ((p = soap_in___saml1__union_AssertionType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AttributeType(struct soap *soap, struct saml1__AttributeType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->AttributeName);
	soap_default_string(soap, &a->AttributeNamespace);
	a->__sizeAttributeValue = 0;
	a->saml1__AttributeValue = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AttributeType(struct soap *soap, const struct saml1__AttributeType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AttributeType(struct soap *soap, const char *tag, int id, const struct saml1__AttributeType *a, const char *type)
{
	soap_set_attr(soap, "AttributeName", a->AttributeName ? soap_string2s(soap, a->AttributeName) : "", 1);
	soap_set_attr(soap, "AttributeNamespace", a->AttributeNamespace ? soap_string2s(soap, a->AttributeNamespace) : "", 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml1__AttributeType), type))
		return soap->error;
	if (a->saml1__AttributeValue)
	{	int i;
		for (i = 0; i < (int)a->__sizeAttributeValue; i++)
			if (soap_outliteral(soap, "saml1:AttributeValue", (char*const*)(a->saml1__AttributeValue + i), NULL))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml1__AttributeType * SOAP_FMAC4 soap_in_saml1__AttributeType(struct soap *soap, const char *tag, struct saml1__AttributeType *a, const char *type)
{
	struct soap_blist *soap_blist_saml1__AttributeValue = NULL;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml1__AttributeType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml1__AttributeType, sizeof(struct saml1__AttributeType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml1__AttributeType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "AttributeName", 1, 1), &a->AttributeName))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "AttributeNamespace", 1, 1), &a->AttributeNamespace))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "saml1:AttributeValue", 1, NULL))
			{	if (a->saml1__AttributeValue == NULL)
				{	if (soap_blist_saml1__AttributeValue == NULL)
						soap_blist_saml1__AttributeValue = soap_alloc_block(soap);
					a->saml1__AttributeValue = (char **)soap_push_block_max(soap, soap_blist_saml1__AttributeValue, sizeof(char *));
					if (a->saml1__AttributeValue == NULL)
						return NULL;
					*a->saml1__AttributeValue = NULL;
				}
				soap_revert(soap);
				if (soap_inliteral(soap, "saml1:AttributeValue", (char**)a->saml1__AttributeValue))
				{	a->__sizeAttributeValue++;
					a->saml1__AttributeValue = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->saml1__AttributeValue)
			soap_pop_block(soap, soap_blist_saml1__AttributeValue);
		if (a->__sizeAttributeValue)
		{	a->saml1__AttributeValue = (char **)soap_save_block(soap, soap_blist_saml1__AttributeValue, NULL, 1);
		}
		else
		{	a->saml1__AttributeValue = NULL;
			if (soap_blist_saml1__AttributeValue)
				soap_end_block(soap, soap_blist_saml1__AttributeValue);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (a->__sizeAttributeValue < 1))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct saml1__AttributeType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml1__AttributeType, SOAP_TYPE_saml1__AttributeType, sizeof(struct saml1__AttributeType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml1__AttributeType * SOAP_FMAC2 soap_instantiate_saml1__AttributeType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml1__AttributeType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml1__AttributeType *p;
	size_t k = sizeof(struct saml1__AttributeType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml1__AttributeType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml1__AttributeType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml1__AttributeType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml1__AttributeType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AttributeType(struct soap *soap, const struct saml1__AttributeType *a, const char *tag, const char *type)
{
	if (soap_out_saml1__AttributeType(soap, tag ? tag : "saml1:AttributeType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__AttributeType * SOAP_FMAC4 soap_get_saml1__AttributeType(struct soap *soap, struct saml1__AttributeType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml1__AttributeType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AttributeDesignatorType(struct soap *soap, struct saml1__AttributeDesignatorType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->AttributeName);
	soap_default_string(soap, &a->AttributeNamespace);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AttributeDesignatorType(struct soap *soap, const struct saml1__AttributeDesignatorType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AttributeDesignatorType(struct soap *soap, const char *tag, int id, const struct saml1__AttributeDesignatorType *a, const char *type)
{
	soap_set_attr(soap, "AttributeName", a->AttributeName ? soap_string2s(soap, a->AttributeName) : "", 1);
	soap_set_attr(soap, "AttributeNamespace", a->AttributeNamespace ? soap_string2s(soap, a->AttributeNamespace) : "", 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml1__AttributeDesignatorType), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml1__AttributeDesignatorType * SOAP_FMAC4 soap_in_saml1__AttributeDesignatorType(struct soap *soap, const char *tag, struct saml1__AttributeDesignatorType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml1__AttributeDesignatorType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml1__AttributeDesignatorType, sizeof(struct saml1__AttributeDesignatorType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml1__AttributeDesignatorType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "AttributeName", 1, 1), &a->AttributeName))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "AttributeNamespace", 1, 1), &a->AttributeNamespace))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct saml1__AttributeDesignatorType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml1__AttributeDesignatorType, SOAP_TYPE_saml1__AttributeDesignatorType, sizeof(struct saml1__AttributeDesignatorType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml1__AttributeDesignatorType * SOAP_FMAC2 soap_instantiate_saml1__AttributeDesignatorType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml1__AttributeDesignatorType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml1__AttributeDesignatorType *p;
	size_t k = sizeof(struct saml1__AttributeDesignatorType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml1__AttributeDesignatorType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml1__AttributeDesignatorType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml1__AttributeDesignatorType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml1__AttributeDesignatorType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AttributeDesignatorType(struct soap *soap, const struct saml1__AttributeDesignatorType *a, const char *tag, const char *type)
{
	if (soap_out_saml1__AttributeDesignatorType(soap, tag ? tag : "saml1:AttributeDesignatorType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__AttributeDesignatorType * SOAP_FMAC4 soap_get_saml1__AttributeDesignatorType(struct soap *soap, struct saml1__AttributeDesignatorType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml1__AttributeDesignatorType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AttributeStatementType(struct soap *soap, struct saml1__AttributeStatementType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->saml1__Subject = NULL;
	a->__sizeAttribute = 0;
	a->saml1__Attribute = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AttributeStatementType(struct soap *soap, const struct saml1__AttributeStatementType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTosaml1__SubjectType(soap, &a->saml1__Subject);
	if (a->saml1__Attribute)
	{	int i;
		for (i = 0; i < (int)a->__sizeAttribute; i++)
		{
			soap_embedded(soap, a->saml1__Attribute + i, SOAP_TYPE_saml1__AttributeType);
			soap_serialize_saml1__AttributeType(soap, a->saml1__Attribute + i);
		}
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AttributeStatementType(struct soap *soap, const char *tag, int id, const struct saml1__AttributeStatementType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml1__AttributeStatementType), type))
		return soap->error;
	if (!a->saml1__Subject)
	{	if (soap_element_empty(soap, "saml1:Subject"))
			return soap->error;
	}
	else
	if (soap_out_PointerTosaml1__SubjectType(soap, "saml1:Subject", -1, &a->saml1__Subject, ""))
		return soap->error;
	if (a->saml1__Attribute)
	{	int i;
		for (i = 0; i < (int)a->__sizeAttribute; i++)
			if (soap_out_saml1__AttributeType(soap, "saml1:Attribute", -1, a->saml1__Attribute + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml1__AttributeStatementType * SOAP_FMAC4 soap_in_saml1__AttributeStatementType(struct soap *soap, const char *tag, struct saml1__AttributeStatementType *a, const char *type)
{
	size_t soap_flag_saml1__Subject = 1;
	struct soap_blist *soap_blist_saml1__Attribute = NULL;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml1__AttributeStatementType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml1__AttributeStatementType, sizeof(struct saml1__AttributeStatementType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml1__AttributeStatementType(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_saml1__Subject && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml1__SubjectType(soap, "saml1:Subject", &a->saml1__Subject, "saml1:SubjectType"))
				{	soap_flag_saml1__Subject--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "saml1:Attribute", 1, NULL))
			{	if (a->saml1__Attribute == NULL)
				{	if (soap_blist_saml1__Attribute == NULL)
						soap_blist_saml1__Attribute = soap_alloc_block(soap);
					a->saml1__Attribute = soap_block<struct saml1__AttributeType>::push(soap, soap_blist_saml1__Attribute);
					if (a->saml1__Attribute == NULL)
						return NULL;
					soap_default_saml1__AttributeType(soap, a->saml1__Attribute);
				}
				soap_revert(soap);
				if (soap_in_saml1__AttributeType(soap, "saml1:Attribute", a->saml1__Attribute, "saml1:AttributeType"))
				{	a->__sizeAttribute++;
					a->saml1__Attribute = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->saml1__Attribute)
			soap_block<struct saml1__AttributeType>::pop(soap, soap_blist_saml1__Attribute);
		if (a->__sizeAttribute)
		{	a->saml1__Attribute = soap_new_saml1__AttributeType(soap, a->__sizeAttribute);
			if (!a->saml1__Attribute)
				return NULL;
			soap_block<struct saml1__AttributeType>::save(soap, soap_blist_saml1__Attribute, a->saml1__Attribute);
		}
		else
		{	a->saml1__Attribute = NULL;
			if (soap_blist_saml1__Attribute)
				soap_block<struct saml1__AttributeType>::end(soap, soap_blist_saml1__Attribute);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->saml1__Subject || a->__sizeAttribute < 1))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct saml1__AttributeStatementType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml1__AttributeStatementType, SOAP_TYPE_saml1__AttributeStatementType, sizeof(struct saml1__AttributeStatementType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml1__AttributeStatementType * SOAP_FMAC2 soap_instantiate_saml1__AttributeStatementType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml1__AttributeStatementType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml1__AttributeStatementType *p;
	size_t k = sizeof(struct saml1__AttributeStatementType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml1__AttributeStatementType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml1__AttributeStatementType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml1__AttributeStatementType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml1__AttributeStatementType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AttributeStatementType(struct soap *soap, const struct saml1__AttributeStatementType *a, const char *tag, const char *type)
{
	if (soap_out_saml1__AttributeStatementType(soap, tag ? tag : "saml1:AttributeStatementType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__AttributeStatementType * SOAP_FMAC4 soap_get_saml1__AttributeStatementType(struct soap *soap, struct saml1__AttributeStatementType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml1__AttributeStatementType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__EvidenceType(struct soap *soap, struct saml1__EvidenceType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__size_EvidenceType = 0;
	a->__union_EvidenceType = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__EvidenceType(struct soap *soap, const struct saml1__EvidenceType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (a->__union_EvidenceType)
	{	int i;
		for (i = 0; i < (int)a->__size_EvidenceType; i++)
		{
			soap_serialize___saml1__union_EvidenceType(soap, a->__union_EvidenceType + i);
		}
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__EvidenceType(struct soap *soap, const char *tag, int id, const struct saml1__EvidenceType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml1__EvidenceType), type))
		return soap->error;
	if (a->__union_EvidenceType)
	{	int i;
		for (i = 0; i < (int)a->__size_EvidenceType; i++)
			if (soap_out___saml1__union_EvidenceType(soap, "-union-EvidenceType", -1, a->__union_EvidenceType + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml1__EvidenceType * SOAP_FMAC4 soap_in_saml1__EvidenceType(struct soap *soap, const char *tag, struct saml1__EvidenceType *a, const char *type)
{
	struct soap_blist *soap_blist___union_EvidenceType = NULL;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml1__EvidenceType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml1__EvidenceType, sizeof(struct saml1__EvidenceType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml1__EvidenceType(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_peek_element(soap))
			{	if (a->__union_EvidenceType == NULL)
				{	if (soap_blist___union_EvidenceType == NULL)
						soap_blist___union_EvidenceType = soap_alloc_block(soap);
					a->__union_EvidenceType = soap_block<struct __saml1__union_EvidenceType>::push(soap, soap_blist___union_EvidenceType);
					if (a->__union_EvidenceType == NULL)
						return NULL;
					soap_default___saml1__union_EvidenceType(soap, a->__union_EvidenceType);
				}
				if (soap_in___saml1__union_EvidenceType(soap, "-union-EvidenceType", a->__union_EvidenceType, "-saml1:union-EvidenceType"))
				{	a->__size_EvidenceType++;
					a->__union_EvidenceType = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->__union_EvidenceType)
			soap_block<struct __saml1__union_EvidenceType>::pop(soap, soap_blist___union_EvidenceType);
		if (a->__size_EvidenceType)
		{	a->__union_EvidenceType = soap_new___saml1__union_EvidenceType(soap, a->__size_EvidenceType);
			if (!a->__union_EvidenceType)
				return NULL;
			soap_block<struct __saml1__union_EvidenceType>::save(soap, soap_blist___union_EvidenceType, a->__union_EvidenceType);
		}
		else
		{	a->__union_EvidenceType = NULL;
			if (soap_blist___union_EvidenceType)
				soap_block<struct __saml1__union_EvidenceType>::end(soap, soap_blist___union_EvidenceType);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct saml1__EvidenceType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml1__EvidenceType, SOAP_TYPE_saml1__EvidenceType, sizeof(struct saml1__EvidenceType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml1__EvidenceType * SOAP_FMAC2 soap_instantiate_saml1__EvidenceType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml1__EvidenceType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml1__EvidenceType *p;
	size_t k = sizeof(struct saml1__EvidenceType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml1__EvidenceType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml1__EvidenceType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml1__EvidenceType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml1__EvidenceType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__EvidenceType(struct soap *soap, const struct saml1__EvidenceType *a, const char *tag, const char *type)
{
	if (soap_out_saml1__EvidenceType(soap, tag ? tag : "saml1:EvidenceType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__EvidenceType * SOAP_FMAC4 soap_get_saml1__EvidenceType(struct soap *soap, struct saml1__EvidenceType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml1__EvidenceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__ActionType(struct soap *soap, struct saml1__ActionType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->__item);
	soap_default_string(soap, &a->Namespace);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__ActionType(struct soap *soap, const struct saml1__ActionType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->__item);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__ActionType(struct soap *soap, const char *tag, int id, const struct saml1__ActionType *a, const char *type)
{
	if (a->Namespace)
		soap_set_attr(soap, "Namespace", soap_string2s(soap, a->Namespace), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_string(soap, tag, id, (char*const*)&a->__item, "");
}

SOAP_FMAC3 struct saml1__ActionType * SOAP_FMAC4 soap_in_saml1__ActionType(struct soap *soap, const char *tag, struct saml1__ActionType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (struct saml1__ActionType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml1__ActionType, sizeof(struct saml1__ActionType), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
		return NULL;
	soap_revert(soap);
	*soap->id = '\0';
	soap_default_saml1__ActionType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "Namespace", 1, 0), &a->Namespace))
		return NULL;
	if (!soap_in_string(soap, tag, (char**)&a->__item, "saml1:ActionType"))
		return NULL;
	return a;
}

SOAP_FMAC1 struct saml1__ActionType * SOAP_FMAC2 soap_instantiate_saml1__ActionType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml1__ActionType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml1__ActionType *p;
	size_t k = sizeof(struct saml1__ActionType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml1__ActionType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml1__ActionType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml1__ActionType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml1__ActionType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__ActionType(struct soap *soap, const struct saml1__ActionType *a, const char *tag, const char *type)
{
	if (soap_out_saml1__ActionType(soap, tag ? tag : "saml1:ActionType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__ActionType * SOAP_FMAC4 soap_get_saml1__ActionType(struct soap *soap, struct saml1__ActionType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml1__ActionType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AuthorizationDecisionStatementType(struct soap *soap, struct saml1__AuthorizationDecisionStatementType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->saml1__Subject = NULL;
	a->__sizeAction = 0;
	a->saml1__Action = NULL;
	a->saml1__Evidence = NULL;
	soap_default_string(soap, &a->Resource);
	soap_default_saml1__DecisionType(soap, &a->Decision);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AuthorizationDecisionStatementType(struct soap *soap, const struct saml1__AuthorizationDecisionStatementType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTosaml1__SubjectType(soap, &a->saml1__Subject);
	if (a->saml1__Action)
	{	int i;
		for (i = 0; i < (int)a->__sizeAction; i++)
		{
			soap_embedded(soap, a->saml1__Action + i, SOAP_TYPE_saml1__ActionType);
			soap_serialize_saml1__ActionType(soap, a->saml1__Action + i);
		}
	}
	soap_serialize_PointerTosaml1__EvidenceType(soap, &a->saml1__Evidence);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AuthorizationDecisionStatementType(struct soap *soap, const char *tag, int id, const struct saml1__AuthorizationDecisionStatementType *a, const char *type)
{
	soap_set_attr(soap, "Resource", a->Resource ? soap_string2s(soap, a->Resource) : "", 1);
	soap_set_attr(soap, "Decision", soap_saml1__DecisionType2s(soap, a->Decision), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml1__AuthorizationDecisionStatementType), type))
		return soap->error;
	if (!a->saml1__Subject)
	{	if (soap_element_empty(soap, "saml1:Subject"))
			return soap->error;
	}
	else
	if (soap_out_PointerTosaml1__SubjectType(soap, "saml1:Subject", -1, &a->saml1__Subject, ""))
		return soap->error;
	if (a->saml1__Action)
	{	int i;
		for (i = 0; i < (int)a->__sizeAction; i++)
			if (soap_out_saml1__ActionType(soap, "saml1:Action", -1, a->saml1__Action + i, ""))
				return soap->error;
	}
	if (soap_out_PointerTosaml1__EvidenceType(soap, "saml1:Evidence", -1, &a->saml1__Evidence, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml1__AuthorizationDecisionStatementType * SOAP_FMAC4 soap_in_saml1__AuthorizationDecisionStatementType(struct soap *soap, const char *tag, struct saml1__AuthorizationDecisionStatementType *a, const char *type)
{
	size_t soap_flag_saml1__Subject = 1;
	struct soap_blist *soap_blist_saml1__Action = NULL;
	size_t soap_flag_saml1__Evidence = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml1__AuthorizationDecisionStatementType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml1__AuthorizationDecisionStatementType, sizeof(struct saml1__AuthorizationDecisionStatementType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml1__AuthorizationDecisionStatementType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "Resource", 1, 1), &a->Resource))
		return NULL;
	if (soap_s2saml1__DecisionType(soap, soap_attr_value(soap, "Decision", 5, 1), &a->Decision))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_saml1__Subject && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml1__SubjectType(soap, "saml1:Subject", &a->saml1__Subject, "saml1:SubjectType"))
				{	soap_flag_saml1__Subject--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "saml1:Action", 1, NULL))
			{	if (a->saml1__Action == NULL)
				{	if (soap_blist_saml1__Action == NULL)
						soap_blist_saml1__Action = soap_alloc_block(soap);
					a->saml1__Action = soap_block<struct saml1__ActionType>::push(soap, soap_blist_saml1__Action);
					if (a->saml1__Action == NULL)
						return NULL;
					soap_default_saml1__ActionType(soap, a->saml1__Action);
				}
				soap_revert(soap);
				if (soap_in_saml1__ActionType(soap, "saml1:Action", a->saml1__Action, "saml1:ActionType"))
				{	a->__sizeAction++;
					a->saml1__Action = NULL;
					continue;
				}
			}
			if (soap_flag_saml1__Evidence && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml1__EvidenceType(soap, "saml1:Evidence", &a->saml1__Evidence, "saml1:EvidenceType"))
				{	soap_flag_saml1__Evidence--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->saml1__Action)
			soap_block<struct saml1__ActionType>::pop(soap, soap_blist_saml1__Action);
		if (a->__sizeAction)
		{	a->saml1__Action = soap_new_saml1__ActionType(soap, a->__sizeAction);
			if (!a->saml1__Action)
				return NULL;
			soap_block<struct saml1__ActionType>::save(soap, soap_blist_saml1__Action, a->saml1__Action);
		}
		else
		{	a->saml1__Action = NULL;
			if (soap_blist_saml1__Action)
				soap_block<struct saml1__ActionType>::end(soap, soap_blist_saml1__Action);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->saml1__Subject || a->__sizeAction < 1))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct saml1__AuthorizationDecisionStatementType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml1__AuthorizationDecisionStatementType, SOAP_TYPE_saml1__AuthorizationDecisionStatementType, sizeof(struct saml1__AuthorizationDecisionStatementType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml1__AuthorizationDecisionStatementType * SOAP_FMAC2 soap_instantiate_saml1__AuthorizationDecisionStatementType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml1__AuthorizationDecisionStatementType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml1__AuthorizationDecisionStatementType *p;
	size_t k = sizeof(struct saml1__AuthorizationDecisionStatementType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml1__AuthorizationDecisionStatementType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml1__AuthorizationDecisionStatementType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml1__AuthorizationDecisionStatementType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml1__AuthorizationDecisionStatementType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AuthorizationDecisionStatementType(struct soap *soap, const struct saml1__AuthorizationDecisionStatementType *a, const char *tag, const char *type)
{
	if (soap_out_saml1__AuthorizationDecisionStatementType(soap, tag ? tag : "saml1:AuthorizationDecisionStatementType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__AuthorizationDecisionStatementType * SOAP_FMAC4 soap_get_saml1__AuthorizationDecisionStatementType(struct soap *soap, struct saml1__AuthorizationDecisionStatementType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml1__AuthorizationDecisionStatementType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AuthorityBindingType(struct soap *soap, struct saml1__AuthorityBindingType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->AuthorityKind);
	soap_default_string(soap, &a->Location);
	soap_default_string(soap, &a->Binding);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AuthorityBindingType(struct soap *soap, const struct saml1__AuthorityBindingType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AuthorityBindingType(struct soap *soap, const char *tag, int id, const struct saml1__AuthorityBindingType *a, const char *type)
{
	soap_set_attr(soap, "AuthorityKind", a->AuthorityKind ? soap__QName2s(soap, a->AuthorityKind) : "", 1);
	soap_set_attr(soap, "Location", a->Location ? soap_string2s(soap, a->Location) : "", 1);
	soap_set_attr(soap, "Binding", a->Binding ? soap_string2s(soap, a->Binding) : "", 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml1__AuthorityBindingType), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml1__AuthorityBindingType * SOAP_FMAC4 soap_in_saml1__AuthorityBindingType(struct soap *soap, const char *tag, struct saml1__AuthorityBindingType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml1__AuthorityBindingType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml1__AuthorityBindingType, sizeof(struct saml1__AuthorityBindingType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml1__AuthorityBindingType(soap, a);
	if (soap_s2_QName(soap, soap_attr_value(soap, "AuthorityKind", 2, 1), &a->AuthorityKind))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "Location", 1, 1), &a->Location))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "Binding", 1, 1), &a->Binding))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct saml1__AuthorityBindingType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml1__AuthorityBindingType, SOAP_TYPE_saml1__AuthorityBindingType, sizeof(struct saml1__AuthorityBindingType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml1__AuthorityBindingType * SOAP_FMAC2 soap_instantiate_saml1__AuthorityBindingType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml1__AuthorityBindingType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml1__AuthorityBindingType *p;
	size_t k = sizeof(struct saml1__AuthorityBindingType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml1__AuthorityBindingType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml1__AuthorityBindingType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml1__AuthorityBindingType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml1__AuthorityBindingType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AuthorityBindingType(struct soap *soap, const struct saml1__AuthorityBindingType *a, const char *tag, const char *type)
{
	if (soap_out_saml1__AuthorityBindingType(soap, tag ? tag : "saml1:AuthorityBindingType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__AuthorityBindingType * SOAP_FMAC4 soap_get_saml1__AuthorityBindingType(struct soap *soap, struct saml1__AuthorityBindingType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml1__AuthorityBindingType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__SubjectLocalityType(struct soap *soap, struct saml1__SubjectLocalityType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->IPAddress);
	soap_default_string(soap, &a->DNSAddress);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__SubjectLocalityType(struct soap *soap, const struct saml1__SubjectLocalityType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__SubjectLocalityType(struct soap *soap, const char *tag, int id, const struct saml1__SubjectLocalityType *a, const char *type)
{
	if (a->IPAddress)
		soap_set_attr(soap, "IPAddress", soap_string2s(soap, a->IPAddress), 1);
	if (a->DNSAddress)
		soap_set_attr(soap, "DNSAddress", soap_string2s(soap, a->DNSAddress), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml1__SubjectLocalityType), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml1__SubjectLocalityType * SOAP_FMAC4 soap_in_saml1__SubjectLocalityType(struct soap *soap, const char *tag, struct saml1__SubjectLocalityType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml1__SubjectLocalityType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml1__SubjectLocalityType, sizeof(struct saml1__SubjectLocalityType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml1__SubjectLocalityType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "IPAddress", 1, 0), &a->IPAddress))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "DNSAddress", 1, 0), &a->DNSAddress))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct saml1__SubjectLocalityType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml1__SubjectLocalityType, SOAP_TYPE_saml1__SubjectLocalityType, sizeof(struct saml1__SubjectLocalityType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml1__SubjectLocalityType * SOAP_FMAC2 soap_instantiate_saml1__SubjectLocalityType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml1__SubjectLocalityType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml1__SubjectLocalityType *p;
	size_t k = sizeof(struct saml1__SubjectLocalityType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml1__SubjectLocalityType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml1__SubjectLocalityType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml1__SubjectLocalityType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml1__SubjectLocalityType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__SubjectLocalityType(struct soap *soap, const struct saml1__SubjectLocalityType *a, const char *tag, const char *type)
{
	if (soap_out_saml1__SubjectLocalityType(soap, tag ? tag : "saml1:SubjectLocalityType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__SubjectLocalityType * SOAP_FMAC4 soap_get_saml1__SubjectLocalityType(struct soap *soap, struct saml1__SubjectLocalityType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml1__SubjectLocalityType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AuthenticationStatementType(struct soap *soap, struct saml1__AuthenticationStatementType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->saml1__Subject = NULL;
	a->saml1__SubjectLocality = NULL;
	a->__sizeAuthorityBinding = 0;
	a->saml1__AuthorityBinding = NULL;
	soap_default_string(soap, &a->AuthenticationMethod);
	soap_default_dateTime(soap, &a->AuthenticationInstant);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AuthenticationStatementType(struct soap *soap, const struct saml1__AuthenticationStatementType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTosaml1__SubjectType(soap, &a->saml1__Subject);
	soap_serialize_PointerTosaml1__SubjectLocalityType(soap, &a->saml1__SubjectLocality);
	if (a->saml1__AuthorityBinding)
	{	int i;
		for (i = 0; i < (int)a->__sizeAuthorityBinding; i++)
		{
			soap_embedded(soap, a->saml1__AuthorityBinding + i, SOAP_TYPE_saml1__AuthorityBindingType);
			soap_serialize_saml1__AuthorityBindingType(soap, a->saml1__AuthorityBinding + i);
		}
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AuthenticationStatementType(struct soap *soap, const char *tag, int id, const struct saml1__AuthenticationStatementType *a, const char *type)
{
	soap_set_attr(soap, "AuthenticationMethod", a->AuthenticationMethod ? soap_string2s(soap, a->AuthenticationMethod) : "", 1);
	soap_set_attr(soap, "AuthenticationInstant", soap_dateTime2s(soap, a->AuthenticationInstant), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml1__AuthenticationStatementType), type))
		return soap->error;
	if (!a->saml1__Subject)
	{	if (soap_element_empty(soap, "saml1:Subject"))
			return soap->error;
	}
	else
	if (soap_out_PointerTosaml1__SubjectType(soap, "saml1:Subject", -1, &a->saml1__Subject, ""))
		return soap->error;
	if (soap_out_PointerTosaml1__SubjectLocalityType(soap, "saml1:SubjectLocality", -1, &a->saml1__SubjectLocality, ""))
		return soap->error;
	if (a->saml1__AuthorityBinding)
	{	int i;
		for (i = 0; i < (int)a->__sizeAuthorityBinding; i++)
			if (soap_out_saml1__AuthorityBindingType(soap, "saml1:AuthorityBinding", -1, a->saml1__AuthorityBinding + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml1__AuthenticationStatementType * SOAP_FMAC4 soap_in_saml1__AuthenticationStatementType(struct soap *soap, const char *tag, struct saml1__AuthenticationStatementType *a, const char *type)
{
	size_t soap_flag_saml1__Subject = 1;
	size_t soap_flag_saml1__SubjectLocality = 1;
	struct soap_blist *soap_blist_saml1__AuthorityBinding = NULL;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml1__AuthenticationStatementType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml1__AuthenticationStatementType, sizeof(struct saml1__AuthenticationStatementType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml1__AuthenticationStatementType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "AuthenticationMethod", 1, 1), &a->AuthenticationMethod))
		return NULL;
	if (soap_s2dateTime(soap, soap_attr_value(soap, "AuthenticationInstant", 5, 1), &a->AuthenticationInstant))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_saml1__Subject && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml1__SubjectType(soap, "saml1:Subject", &a->saml1__Subject, "saml1:SubjectType"))
				{	soap_flag_saml1__Subject--;
					continue;
				}
			}
			if (soap_flag_saml1__SubjectLocality && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml1__SubjectLocalityType(soap, "saml1:SubjectLocality", &a->saml1__SubjectLocality, "saml1:SubjectLocalityType"))
				{	soap_flag_saml1__SubjectLocality--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "saml1:AuthorityBinding", 1, NULL))
			{	if (a->saml1__AuthorityBinding == NULL)
				{	if (soap_blist_saml1__AuthorityBinding == NULL)
						soap_blist_saml1__AuthorityBinding = soap_alloc_block(soap);
					a->saml1__AuthorityBinding = soap_block<struct saml1__AuthorityBindingType>::push(soap, soap_blist_saml1__AuthorityBinding);
					if (a->saml1__AuthorityBinding == NULL)
						return NULL;
					soap_default_saml1__AuthorityBindingType(soap, a->saml1__AuthorityBinding);
				}
				soap_revert(soap);
				if (soap_in_saml1__AuthorityBindingType(soap, "saml1:AuthorityBinding", a->saml1__AuthorityBinding, "saml1:AuthorityBindingType"))
				{	a->__sizeAuthorityBinding++;
					a->saml1__AuthorityBinding = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->saml1__AuthorityBinding)
			soap_block<struct saml1__AuthorityBindingType>::pop(soap, soap_blist_saml1__AuthorityBinding);
		if (a->__sizeAuthorityBinding)
		{	a->saml1__AuthorityBinding = soap_new_saml1__AuthorityBindingType(soap, a->__sizeAuthorityBinding);
			if (!a->saml1__AuthorityBinding)
				return NULL;
			soap_block<struct saml1__AuthorityBindingType>::save(soap, soap_blist_saml1__AuthorityBinding, a->saml1__AuthorityBinding);
		}
		else
		{	a->saml1__AuthorityBinding = NULL;
			if (soap_blist_saml1__AuthorityBinding)
				soap_block<struct saml1__AuthorityBindingType>::end(soap, soap_blist_saml1__AuthorityBinding);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->saml1__Subject))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct saml1__AuthenticationStatementType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml1__AuthenticationStatementType, SOAP_TYPE_saml1__AuthenticationStatementType, sizeof(struct saml1__AuthenticationStatementType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml1__AuthenticationStatementType * SOAP_FMAC2 soap_instantiate_saml1__AuthenticationStatementType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml1__AuthenticationStatementType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml1__AuthenticationStatementType *p;
	size_t k = sizeof(struct saml1__AuthenticationStatementType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml1__AuthenticationStatementType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml1__AuthenticationStatementType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml1__AuthenticationStatementType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml1__AuthenticationStatementType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AuthenticationStatementType(struct soap *soap, const struct saml1__AuthenticationStatementType *a, const char *tag, const char *type)
{
	if (soap_out_saml1__AuthenticationStatementType(soap, tag ? tag : "saml1:AuthenticationStatementType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__AuthenticationStatementType * SOAP_FMAC4 soap_get_saml1__AuthenticationStatementType(struct soap *soap, struct saml1__AuthenticationStatementType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml1__AuthenticationStatementType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__SubjectConfirmationType(struct soap *soap, struct saml1__SubjectConfirmationType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__sizeConfirmationMethod = 0;
	a->saml1__ConfirmationMethod = NULL;
	a->saml1__SubjectConfirmationData = NULL;
	a->ds__KeyInfo = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__SubjectConfirmationType(struct soap *soap, const struct saml1__SubjectConfirmationType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (a->saml1__ConfirmationMethod)
	{	int i;
		for (i = 0; i < (int)a->__sizeConfirmationMethod; i++)
		{
			soap_serialize_string(soap, (char*const*)(a->saml1__ConfirmationMethod + i));
		}
	}
	soap_serialize_PointerTo_ds__KeyInfo(soap, &a->ds__KeyInfo);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__SubjectConfirmationType(struct soap *soap, const char *tag, int id, const struct saml1__SubjectConfirmationType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml1__SubjectConfirmationType), type))
		return soap->error;
	if (a->saml1__ConfirmationMethod)
	{	int i;
		for (i = 0; i < (int)a->__sizeConfirmationMethod; i++)
			if (soap_out_string(soap, "saml1:ConfirmationMethod", -1, (char*const*)(a->saml1__ConfirmationMethod + i), ""))
				return soap->error;
	}
	if (soap_outliteral(soap, "saml1:SubjectConfirmationData", (char*const*)&a->saml1__SubjectConfirmationData, NULL))
		return soap->error;
	if (soap_out_PointerTo_ds__KeyInfo(soap, "ds:KeyInfo", -1, &a->ds__KeyInfo, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml1__SubjectConfirmationType * SOAP_FMAC4 soap_in_saml1__SubjectConfirmationType(struct soap *soap, const char *tag, struct saml1__SubjectConfirmationType *a, const char *type)
{
	struct soap_blist *soap_blist_saml1__ConfirmationMethod = NULL;
	size_t soap_flag_saml1__SubjectConfirmationData = 1;
	size_t soap_flag_ds__KeyInfo = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml1__SubjectConfirmationType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml1__SubjectConfirmationType, sizeof(struct saml1__SubjectConfirmationType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml1__SubjectConfirmationType(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "saml1:ConfirmationMethod", 1, NULL))
			{	if (a->saml1__ConfirmationMethod == NULL)
				{	if (soap_blist_saml1__ConfirmationMethod == NULL)
						soap_blist_saml1__ConfirmationMethod = soap_alloc_block(soap);
					a->saml1__ConfirmationMethod = (char **)soap_push_block_max(soap, soap_blist_saml1__ConfirmationMethod, sizeof(char *));
					if (a->saml1__ConfirmationMethod == NULL)
						return NULL;
					*a->saml1__ConfirmationMethod = NULL;
				}
				soap_revert(soap);
				if (soap_in_string(soap, "saml1:ConfirmationMethod", (char**)a->saml1__ConfirmationMethod, "xsd:string"))
				{	a->__sizeConfirmationMethod++;
					a->saml1__ConfirmationMethod = NULL;
					continue;
				}
			}
			if (soap_flag_saml1__SubjectConfirmationData && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "saml1:SubjectConfirmationData", (char**)&a->saml1__SubjectConfirmationData))
				{	soap_flag_saml1__SubjectConfirmationData--;
					continue;
				}
			}
			if (soap_flag_ds__KeyInfo && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ds__KeyInfo(soap, "ds:KeyInfo", &a->ds__KeyInfo, ""))
				{	soap_flag_ds__KeyInfo--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->saml1__ConfirmationMethod)
			soap_pop_block(soap, soap_blist_saml1__ConfirmationMethod);
		if (a->__sizeConfirmationMethod)
		{	a->saml1__ConfirmationMethod = (char **)soap_save_block(soap, soap_blist_saml1__ConfirmationMethod, NULL, 1);
		}
		else
		{	a->saml1__ConfirmationMethod = NULL;
			if (soap_blist_saml1__ConfirmationMethod)
				soap_end_block(soap, soap_blist_saml1__ConfirmationMethod);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (a->__sizeConfirmationMethod < 1))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct saml1__SubjectConfirmationType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml1__SubjectConfirmationType, SOAP_TYPE_saml1__SubjectConfirmationType, sizeof(struct saml1__SubjectConfirmationType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml1__SubjectConfirmationType * SOAP_FMAC2 soap_instantiate_saml1__SubjectConfirmationType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml1__SubjectConfirmationType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml1__SubjectConfirmationType *p;
	size_t k = sizeof(struct saml1__SubjectConfirmationType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml1__SubjectConfirmationType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml1__SubjectConfirmationType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml1__SubjectConfirmationType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml1__SubjectConfirmationType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__SubjectConfirmationType(struct soap *soap, const struct saml1__SubjectConfirmationType *a, const char *tag, const char *type)
{
	if (soap_out_saml1__SubjectConfirmationType(soap, tag ? tag : "saml1:SubjectConfirmationType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__SubjectConfirmationType * SOAP_FMAC4 soap_get_saml1__SubjectConfirmationType(struct soap *soap, struct saml1__SubjectConfirmationType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml1__SubjectConfirmationType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__NameIdentifierType(struct soap *soap, struct saml1__NameIdentifierType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->__item);
	soap_default_string(soap, &a->NameQualifier);
	soap_default_string(soap, &a->Format);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__NameIdentifierType(struct soap *soap, const struct saml1__NameIdentifierType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->__item);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__NameIdentifierType(struct soap *soap, const char *tag, int id, const struct saml1__NameIdentifierType *a, const char *type)
{
	if (a->NameQualifier)
		soap_set_attr(soap, "NameQualifier", soap_string2s(soap, a->NameQualifier), 1);
	if (a->Format)
		soap_set_attr(soap, "Format", soap_string2s(soap, a->Format), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_string(soap, tag, id, (char*const*)&a->__item, "");
}

SOAP_FMAC3 struct saml1__NameIdentifierType * SOAP_FMAC4 soap_in_saml1__NameIdentifierType(struct soap *soap, const char *tag, struct saml1__NameIdentifierType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (struct saml1__NameIdentifierType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml1__NameIdentifierType, sizeof(struct saml1__NameIdentifierType), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
		return NULL;
	soap_revert(soap);
	*soap->id = '\0';
	soap_default_saml1__NameIdentifierType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "NameQualifier", 1, 0), &a->NameQualifier))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "Format", 1, 0), &a->Format))
		return NULL;
	if (!soap_in_string(soap, tag, (char**)&a->__item, "saml1:NameIdentifierType"))
		return NULL;
	return a;
}

SOAP_FMAC1 struct saml1__NameIdentifierType * SOAP_FMAC2 soap_instantiate_saml1__NameIdentifierType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml1__NameIdentifierType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml1__NameIdentifierType *p;
	size_t k = sizeof(struct saml1__NameIdentifierType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml1__NameIdentifierType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml1__NameIdentifierType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml1__NameIdentifierType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml1__NameIdentifierType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__NameIdentifierType(struct soap *soap, const struct saml1__NameIdentifierType *a, const char *tag, const char *type)
{
	if (soap_out_saml1__NameIdentifierType(soap, tag ? tag : "saml1:NameIdentifierType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__NameIdentifierType * SOAP_FMAC4 soap_get_saml1__NameIdentifierType(struct soap *soap, struct saml1__NameIdentifierType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml1__NameIdentifierType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__SubjectType(struct soap *soap, struct saml1__SubjectType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->saml1__NameIdentifier = NULL;
	a->saml1__SubjectConfirmation = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__SubjectType(struct soap *soap, const struct saml1__SubjectType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTosaml1__NameIdentifierType(soap, &a->saml1__NameIdentifier);
	soap_serialize_PointerTosaml1__SubjectConfirmationType(soap, &a->saml1__SubjectConfirmation);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__SubjectType(struct soap *soap, const char *tag, int id, const struct saml1__SubjectType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml1__SubjectType), type))
		return soap->error;
	if (soap_out_PointerTosaml1__NameIdentifierType(soap, "saml1:NameIdentifier", -1, &a->saml1__NameIdentifier, ""))
		return soap->error;
	if (soap_out_PointerTosaml1__SubjectConfirmationType(soap, "saml1:SubjectConfirmation", -1, &a->saml1__SubjectConfirmation, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml1__SubjectType * SOAP_FMAC4 soap_in_saml1__SubjectType(struct soap *soap, const char *tag, struct saml1__SubjectType *a, const char *type)
{
	size_t soap_flag_saml1__NameIdentifier = 1;
	size_t soap_flag_saml1__SubjectConfirmation = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml1__SubjectType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml1__SubjectType, sizeof(struct saml1__SubjectType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml1__SubjectType(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_saml1__NameIdentifier && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml1__NameIdentifierType(soap, "saml1:NameIdentifier", &a->saml1__NameIdentifier, "saml1:NameIdentifierType"))
				{	soap_flag_saml1__NameIdentifier--;
					continue;
				}
			}
			if (soap_flag_saml1__SubjectConfirmation && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml1__SubjectConfirmationType(soap, "saml1:SubjectConfirmation", &a->saml1__SubjectConfirmation, "saml1:SubjectConfirmationType"))
				{	soap_flag_saml1__SubjectConfirmation--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct saml1__SubjectType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml1__SubjectType, SOAP_TYPE_saml1__SubjectType, sizeof(struct saml1__SubjectType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml1__SubjectType * SOAP_FMAC2 soap_instantiate_saml1__SubjectType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml1__SubjectType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml1__SubjectType *p;
	size_t k = sizeof(struct saml1__SubjectType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml1__SubjectType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml1__SubjectType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml1__SubjectType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml1__SubjectType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__SubjectType(struct soap *soap, const struct saml1__SubjectType *a, const char *tag, const char *type)
{
	if (soap_out_saml1__SubjectType(soap, tag ? tag : "saml1:SubjectType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__SubjectType * SOAP_FMAC4 soap_get_saml1__SubjectType(struct soap *soap, struct saml1__SubjectType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml1__SubjectType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__SubjectStatementAbstractType(struct soap *soap, struct saml1__SubjectStatementAbstractType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->saml1__Subject = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__SubjectStatementAbstractType(struct soap *soap, const struct saml1__SubjectStatementAbstractType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTosaml1__SubjectType(soap, &a->saml1__Subject);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__SubjectStatementAbstractType(struct soap *soap, const char *tag, int id, const struct saml1__SubjectStatementAbstractType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml1__SubjectStatementAbstractType), type))
		return soap->error;
	if (!a->saml1__Subject)
	{	if (soap_element_empty(soap, "saml1:Subject"))
			return soap->error;
	}
	else
	if (soap_out_PointerTosaml1__SubjectType(soap, "saml1:Subject", -1, &a->saml1__Subject, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml1__SubjectStatementAbstractType * SOAP_FMAC4 soap_in_saml1__SubjectStatementAbstractType(struct soap *soap, const char *tag, struct saml1__SubjectStatementAbstractType *a, const char *type)
{
	size_t soap_flag_saml1__Subject = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml1__SubjectStatementAbstractType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml1__SubjectStatementAbstractType, sizeof(struct saml1__SubjectStatementAbstractType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml1__SubjectStatementAbstractType(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_saml1__Subject && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml1__SubjectType(soap, "saml1:Subject", &a->saml1__Subject, "saml1:SubjectType"))
				{	soap_flag_saml1__Subject--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->saml1__Subject))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct saml1__SubjectStatementAbstractType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml1__SubjectStatementAbstractType, SOAP_TYPE_saml1__SubjectStatementAbstractType, sizeof(struct saml1__SubjectStatementAbstractType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml1__SubjectStatementAbstractType * SOAP_FMAC2 soap_instantiate_saml1__SubjectStatementAbstractType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml1__SubjectStatementAbstractType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml1__SubjectStatementAbstractType *p;
	size_t k = sizeof(struct saml1__SubjectStatementAbstractType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml1__SubjectStatementAbstractType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml1__SubjectStatementAbstractType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml1__SubjectStatementAbstractType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml1__SubjectStatementAbstractType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__SubjectStatementAbstractType(struct soap *soap, const struct saml1__SubjectStatementAbstractType *a, const char *tag, const char *type)
{
	if (soap_out_saml1__SubjectStatementAbstractType(soap, tag ? tag : "saml1:SubjectStatementAbstractType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__SubjectStatementAbstractType * SOAP_FMAC4 soap_get_saml1__SubjectStatementAbstractType(struct soap *soap, struct saml1__SubjectStatementAbstractType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml1__SubjectStatementAbstractType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__StatementAbstractType(struct soap *soap, struct saml1__StatementAbstractType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__StatementAbstractType(struct soap *soap, const struct saml1__StatementAbstractType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__StatementAbstractType(struct soap *soap, const char *tag, int id, const struct saml1__StatementAbstractType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml1__StatementAbstractType), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml1__StatementAbstractType * SOAP_FMAC4 soap_in_saml1__StatementAbstractType(struct soap *soap, const char *tag, struct saml1__StatementAbstractType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml1__StatementAbstractType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml1__StatementAbstractType, sizeof(struct saml1__StatementAbstractType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml1__StatementAbstractType(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct saml1__StatementAbstractType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml1__StatementAbstractType, SOAP_TYPE_saml1__StatementAbstractType, sizeof(struct saml1__StatementAbstractType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml1__StatementAbstractType * SOAP_FMAC2 soap_instantiate_saml1__StatementAbstractType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml1__StatementAbstractType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml1__StatementAbstractType *p;
	size_t k = sizeof(struct saml1__StatementAbstractType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml1__StatementAbstractType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml1__StatementAbstractType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml1__StatementAbstractType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml1__StatementAbstractType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__StatementAbstractType(struct soap *soap, const struct saml1__StatementAbstractType *a, const char *tag, const char *type)
{
	if (soap_out_saml1__StatementAbstractType(soap, tag ? tag : "saml1:StatementAbstractType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__StatementAbstractType * SOAP_FMAC4 soap_get_saml1__StatementAbstractType(struct soap *soap, struct saml1__StatementAbstractType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml1__StatementAbstractType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AdviceType(struct soap *soap, struct saml1__AdviceType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__size_AdviceType = 0;
	a->__union_AdviceType = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AdviceType(struct soap *soap, const struct saml1__AdviceType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (a->__union_AdviceType)
	{	int i;
		for (i = 0; i < (int)a->__size_AdviceType; i++)
		{
			soap_serialize___saml1__union_AdviceType(soap, a->__union_AdviceType + i);
		}
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AdviceType(struct soap *soap, const char *tag, int id, const struct saml1__AdviceType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml1__AdviceType), type))
		return soap->error;
	if (a->__union_AdviceType)
	{	int i;
		for (i = 0; i < (int)a->__size_AdviceType; i++)
			if (soap_out___saml1__union_AdviceType(soap, "-union-AdviceType", -1, a->__union_AdviceType + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml1__AdviceType * SOAP_FMAC4 soap_in_saml1__AdviceType(struct soap *soap, const char *tag, struct saml1__AdviceType *a, const char *type)
{
	struct soap_blist *soap_blist___union_AdviceType = NULL;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml1__AdviceType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml1__AdviceType, sizeof(struct saml1__AdviceType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml1__AdviceType(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_peek_element(soap))
			{	if (a->__union_AdviceType == NULL)
				{	if (soap_blist___union_AdviceType == NULL)
						soap_blist___union_AdviceType = soap_alloc_block(soap);
					a->__union_AdviceType = soap_block<struct __saml1__union_AdviceType>::push(soap, soap_blist___union_AdviceType);
					if (a->__union_AdviceType == NULL)
						return NULL;
					soap_default___saml1__union_AdviceType(soap, a->__union_AdviceType);
				}
				if (soap_in___saml1__union_AdviceType(soap, "-union-AdviceType", a->__union_AdviceType, "-saml1:union-AdviceType"))
				{	a->__size_AdviceType++;
					a->__union_AdviceType = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->__union_AdviceType)
			soap_block<struct __saml1__union_AdviceType>::pop(soap, soap_blist___union_AdviceType);
		if (a->__size_AdviceType)
		{	a->__union_AdviceType = soap_new___saml1__union_AdviceType(soap, a->__size_AdviceType);
			if (!a->__union_AdviceType)
				return NULL;
			soap_block<struct __saml1__union_AdviceType>::save(soap, soap_blist___union_AdviceType, a->__union_AdviceType);
		}
		else
		{	a->__union_AdviceType = NULL;
			if (soap_blist___union_AdviceType)
				soap_block<struct __saml1__union_AdviceType>::end(soap, soap_blist___union_AdviceType);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct saml1__AdviceType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml1__AdviceType, SOAP_TYPE_saml1__AdviceType, sizeof(struct saml1__AdviceType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml1__AdviceType * SOAP_FMAC2 soap_instantiate_saml1__AdviceType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml1__AdviceType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml1__AdviceType *p;
	size_t k = sizeof(struct saml1__AdviceType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml1__AdviceType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml1__AdviceType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml1__AdviceType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml1__AdviceType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AdviceType(struct soap *soap, const struct saml1__AdviceType *a, const char *tag, const char *type)
{
	if (soap_out_saml1__AdviceType(soap, tag ? tag : "saml1:AdviceType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__AdviceType * SOAP_FMAC4 soap_get_saml1__AdviceType(struct soap *soap, struct saml1__AdviceType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml1__AdviceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__DoNotCacheConditionType(struct soap *soap, struct saml1__DoNotCacheConditionType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__DoNotCacheConditionType(struct soap *soap, const struct saml1__DoNotCacheConditionType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__DoNotCacheConditionType(struct soap *soap, const char *tag, int id, const struct saml1__DoNotCacheConditionType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml1__DoNotCacheConditionType), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml1__DoNotCacheConditionType * SOAP_FMAC4 soap_in_saml1__DoNotCacheConditionType(struct soap *soap, const char *tag, struct saml1__DoNotCacheConditionType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml1__DoNotCacheConditionType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml1__DoNotCacheConditionType, sizeof(struct saml1__DoNotCacheConditionType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml1__DoNotCacheConditionType(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct saml1__DoNotCacheConditionType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml1__DoNotCacheConditionType, SOAP_TYPE_saml1__DoNotCacheConditionType, sizeof(struct saml1__DoNotCacheConditionType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml1__DoNotCacheConditionType * SOAP_FMAC2 soap_instantiate_saml1__DoNotCacheConditionType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml1__DoNotCacheConditionType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml1__DoNotCacheConditionType *p;
	size_t k = sizeof(struct saml1__DoNotCacheConditionType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml1__DoNotCacheConditionType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml1__DoNotCacheConditionType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml1__DoNotCacheConditionType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml1__DoNotCacheConditionType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__DoNotCacheConditionType(struct soap *soap, const struct saml1__DoNotCacheConditionType *a, const char *tag, const char *type)
{
	if (soap_out_saml1__DoNotCacheConditionType(soap, tag ? tag : "saml1:DoNotCacheConditionType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__DoNotCacheConditionType * SOAP_FMAC4 soap_get_saml1__DoNotCacheConditionType(struct soap *soap, struct saml1__DoNotCacheConditionType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml1__DoNotCacheConditionType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AudienceRestrictionConditionType(struct soap *soap, struct saml1__AudienceRestrictionConditionType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__sizeAudience = 0;
	a->saml1__Audience = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AudienceRestrictionConditionType(struct soap *soap, const struct saml1__AudienceRestrictionConditionType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (a->saml1__Audience)
	{	int i;
		for (i = 0; i < (int)a->__sizeAudience; i++)
		{
			soap_serialize_string(soap, (char*const*)(a->saml1__Audience + i));
		}
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AudienceRestrictionConditionType(struct soap *soap, const char *tag, int id, const struct saml1__AudienceRestrictionConditionType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml1__AudienceRestrictionConditionType), type))
		return soap->error;
	if (a->saml1__Audience)
	{	int i;
		for (i = 0; i < (int)a->__sizeAudience; i++)
			if (soap_out_string(soap, "saml1:Audience", -1, (char*const*)(a->saml1__Audience + i), ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml1__AudienceRestrictionConditionType * SOAP_FMAC4 soap_in_saml1__AudienceRestrictionConditionType(struct soap *soap, const char *tag, struct saml1__AudienceRestrictionConditionType *a, const char *type)
{
	struct soap_blist *soap_blist_saml1__Audience = NULL;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml1__AudienceRestrictionConditionType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml1__AudienceRestrictionConditionType, sizeof(struct saml1__AudienceRestrictionConditionType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml1__AudienceRestrictionConditionType(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "saml1:Audience", 1, NULL))
			{	if (a->saml1__Audience == NULL)
				{	if (soap_blist_saml1__Audience == NULL)
						soap_blist_saml1__Audience = soap_alloc_block(soap);
					a->saml1__Audience = (char **)soap_push_block_max(soap, soap_blist_saml1__Audience, sizeof(char *));
					if (a->saml1__Audience == NULL)
						return NULL;
					*a->saml1__Audience = NULL;
				}
				soap_revert(soap);
				if (soap_in_string(soap, "saml1:Audience", (char**)a->saml1__Audience, "xsd:string"))
				{	a->__sizeAudience++;
					a->saml1__Audience = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->saml1__Audience)
			soap_pop_block(soap, soap_blist_saml1__Audience);
		if (a->__sizeAudience)
		{	a->saml1__Audience = (char **)soap_save_block(soap, soap_blist_saml1__Audience, NULL, 1);
		}
		else
		{	a->saml1__Audience = NULL;
			if (soap_blist_saml1__Audience)
				soap_end_block(soap, soap_blist_saml1__Audience);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (a->__sizeAudience < 1))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct saml1__AudienceRestrictionConditionType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml1__AudienceRestrictionConditionType, SOAP_TYPE_saml1__AudienceRestrictionConditionType, sizeof(struct saml1__AudienceRestrictionConditionType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml1__AudienceRestrictionConditionType * SOAP_FMAC2 soap_instantiate_saml1__AudienceRestrictionConditionType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml1__AudienceRestrictionConditionType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml1__AudienceRestrictionConditionType *p;
	size_t k = sizeof(struct saml1__AudienceRestrictionConditionType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml1__AudienceRestrictionConditionType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml1__AudienceRestrictionConditionType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml1__AudienceRestrictionConditionType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml1__AudienceRestrictionConditionType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AudienceRestrictionConditionType(struct soap *soap, const struct saml1__AudienceRestrictionConditionType *a, const char *tag, const char *type)
{
	if (soap_out_saml1__AudienceRestrictionConditionType(soap, tag ? tag : "saml1:AudienceRestrictionConditionType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__AudienceRestrictionConditionType * SOAP_FMAC4 soap_get_saml1__AudienceRestrictionConditionType(struct soap *soap, struct saml1__AudienceRestrictionConditionType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml1__AudienceRestrictionConditionType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__ConditionAbstractType(struct soap *soap, struct saml1__ConditionAbstractType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__ConditionAbstractType(struct soap *soap, const struct saml1__ConditionAbstractType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__ConditionAbstractType(struct soap *soap, const char *tag, int id, const struct saml1__ConditionAbstractType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml1__ConditionAbstractType), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml1__ConditionAbstractType * SOAP_FMAC4 soap_in_saml1__ConditionAbstractType(struct soap *soap, const char *tag, struct saml1__ConditionAbstractType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml1__ConditionAbstractType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml1__ConditionAbstractType, sizeof(struct saml1__ConditionAbstractType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml1__ConditionAbstractType(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct saml1__ConditionAbstractType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml1__ConditionAbstractType, SOAP_TYPE_saml1__ConditionAbstractType, sizeof(struct saml1__ConditionAbstractType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml1__ConditionAbstractType * SOAP_FMAC2 soap_instantiate_saml1__ConditionAbstractType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml1__ConditionAbstractType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml1__ConditionAbstractType *p;
	size_t k = sizeof(struct saml1__ConditionAbstractType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml1__ConditionAbstractType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml1__ConditionAbstractType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml1__ConditionAbstractType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml1__ConditionAbstractType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__ConditionAbstractType(struct soap *soap, const struct saml1__ConditionAbstractType *a, const char *tag, const char *type)
{
	if (soap_out_saml1__ConditionAbstractType(soap, tag ? tag : "saml1:ConditionAbstractType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__ConditionAbstractType * SOAP_FMAC4 soap_get_saml1__ConditionAbstractType(struct soap *soap, struct saml1__ConditionAbstractType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml1__ConditionAbstractType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__ConditionsType(struct soap *soap, struct saml1__ConditionsType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__size_ConditionsType = 0;
	a->__union_ConditionsType = NULL;
	a->NotBefore = NULL;
	a->NotOnOrAfter = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__ConditionsType(struct soap *soap, const struct saml1__ConditionsType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (a->__union_ConditionsType)
	{	int i;
		for (i = 0; i < (int)a->__size_ConditionsType; i++)
		{
			soap_serialize___saml1__union_ConditionsType(soap, a->__union_ConditionsType + i);
		}
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__ConditionsType(struct soap *soap, const char *tag, int id, const struct saml1__ConditionsType *a, const char *type)
{
	if (a->NotBefore)
	{	soap_set_attr(soap, "NotBefore", soap_dateTime2s(soap, *a->NotBefore), 1);
	}
	if (a->NotOnOrAfter)
	{	soap_set_attr(soap, "NotOnOrAfter", soap_dateTime2s(soap, *a->NotOnOrAfter), 1);
	}
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml1__ConditionsType), type))
		return soap->error;
	if (a->__union_ConditionsType)
	{	int i;
		for (i = 0; i < (int)a->__size_ConditionsType; i++)
			if (soap_out___saml1__union_ConditionsType(soap, "-union-ConditionsType", -1, a->__union_ConditionsType + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml1__ConditionsType * SOAP_FMAC4 soap_in_saml1__ConditionsType(struct soap *soap, const char *tag, struct saml1__ConditionsType *a, const char *type)
{
	struct soap_blist *soap_blist___union_ConditionsType = NULL;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml1__ConditionsType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml1__ConditionsType, sizeof(struct saml1__ConditionsType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml1__ConditionsType(soap, a);
	{
		const char *t = soap_attr_value(soap, "NotBefore", 5, 0);
		if (t)
		{
			if (!(a->NotBefore = (time_t *)soap_malloc(soap, sizeof(time_t))))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2dateTime(soap, t, a->NotBefore))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	{
		const char *t = soap_attr_value(soap, "NotOnOrAfter", 5, 0);
		if (t)
		{
			if (!(a->NotOnOrAfter = (time_t *)soap_malloc(soap, sizeof(time_t))))
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (soap_s2dateTime(soap, t, a->NotOnOrAfter))
				return NULL;
		}
		else if (soap->error)
			return NULL;
	}
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_peek_element(soap))
			{	if (a->__union_ConditionsType == NULL)
				{	if (soap_blist___union_ConditionsType == NULL)
						soap_blist___union_ConditionsType = soap_alloc_block(soap);
					a->__union_ConditionsType = soap_block<struct __saml1__union_ConditionsType>::push(soap, soap_blist___union_ConditionsType);
					if (a->__union_ConditionsType == NULL)
						return NULL;
					soap_default___saml1__union_ConditionsType(soap, a->__union_ConditionsType);
				}
				if (soap_in___saml1__union_ConditionsType(soap, "-union-ConditionsType", a->__union_ConditionsType, "-saml1:union-ConditionsType"))
				{	a->__size_ConditionsType++;
					a->__union_ConditionsType = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->__union_ConditionsType)
			soap_block<struct __saml1__union_ConditionsType>::pop(soap, soap_blist___union_ConditionsType);
		if (a->__size_ConditionsType)
		{	a->__union_ConditionsType = soap_new___saml1__union_ConditionsType(soap, a->__size_ConditionsType);
			if (!a->__union_ConditionsType)
				return NULL;
			soap_block<struct __saml1__union_ConditionsType>::save(soap, soap_blist___union_ConditionsType, a->__union_ConditionsType);
		}
		else
		{	a->__union_ConditionsType = NULL;
			if (soap_blist___union_ConditionsType)
				soap_block<struct __saml1__union_ConditionsType>::end(soap, soap_blist___union_ConditionsType);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct saml1__ConditionsType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml1__ConditionsType, SOAP_TYPE_saml1__ConditionsType, sizeof(struct saml1__ConditionsType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml1__ConditionsType * SOAP_FMAC2 soap_instantiate_saml1__ConditionsType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml1__ConditionsType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml1__ConditionsType *p;
	size_t k = sizeof(struct saml1__ConditionsType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml1__ConditionsType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml1__ConditionsType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml1__ConditionsType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml1__ConditionsType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__ConditionsType(struct soap *soap, const struct saml1__ConditionsType *a, const char *tag, const char *type)
{
	if (soap_out_saml1__ConditionsType(soap, tag ? tag : "saml1:ConditionsType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__ConditionsType * SOAP_FMAC4 soap_get_saml1__ConditionsType(struct soap *soap, struct saml1__ConditionsType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml1__ConditionsType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_saml1__AssertionType(struct soap *soap, struct saml1__AssertionType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->saml1__Conditions = NULL;
	a->saml1__Advice = NULL;
	a->__size_AssertionType = 0;
	a->__union_AssertionType = NULL;
	a->ds__Signature = NULL;
	soap_default_string(soap, &a->MajorVersion);
	soap_default_string(soap, &a->MinorVersion);
	soap_default_string(soap, &a->AssertionID);
	soap_default_string(soap, &a->Issuer);
	soap_default_dateTime(soap, &a->IssueInstant);
	soap_default_string(soap, &a->wsu__Id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_saml1__AssertionType(struct soap *soap, const struct saml1__AssertionType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTosaml1__ConditionsType(soap, &a->saml1__Conditions);
	soap_serialize_PointerTosaml1__AdviceType(soap, &a->saml1__Advice);
	if (a->__union_AssertionType)
	{	int i;
		for (i = 0; i < (int)a->__size_AssertionType; i++)
		{
			soap_serialize___saml1__union_AssertionType(soap, a->__union_AssertionType + i);
		}
	}
	soap_serialize_PointerTo_ds__Signature(soap, &a->ds__Signature);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_saml1__AssertionType(struct soap *soap, const char *tag, int id, const struct saml1__AssertionType *a, const char *type)
{
	soap_set_attr(soap, "MajorVersion", a->MajorVersion ? soap_string2s(soap, a->MajorVersion) : "", 1);
	soap_set_attr(soap, "MinorVersion", a->MinorVersion ? soap_string2s(soap, a->MinorVersion) : "", 1);
	soap_set_attr(soap, "AssertionID", a->AssertionID ? soap_string2s(soap, a->AssertionID) : "", 1);
	soap_set_attr(soap, "Issuer", a->Issuer ? soap_string2s(soap, a->Issuer) : "", 1);
	soap_set_attr(soap, "IssueInstant", soap_dateTime2s(soap, a->IssueInstant), 1);
	if (a->wsu__Id)
		soap_set_attr(soap, "wsu:Id", soap_string2s(soap, a->wsu__Id), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_saml1__AssertionType), type))
		return soap->error;
	if (soap_out_PointerTosaml1__ConditionsType(soap, "saml1:Conditions", -1, &a->saml1__Conditions, ""))
		return soap->error;
	if (soap_out_PointerTosaml1__AdviceType(soap, "saml1:Advice", -1, &a->saml1__Advice, ""))
		return soap->error;
	if (a->__union_AssertionType)
	{	int i;
		for (i = 0; i < (int)a->__size_AssertionType; i++)
			if (soap_out___saml1__union_AssertionType(soap, "-union-AssertionType", -1, a->__union_AssertionType + i, ""))
				return soap->error;
	}
	if (soap_out_PointerTo_ds__Signature(soap, "ds:Signature", -1, &a->ds__Signature, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct saml1__AssertionType * SOAP_FMAC4 soap_in_saml1__AssertionType(struct soap *soap, const char *tag, struct saml1__AssertionType *a, const char *type)
{
	size_t soap_flag_saml1__Conditions = 1;
	size_t soap_flag_saml1__Advice = 1;
	struct soap_blist *soap_blist___union_AssertionType = NULL;
	size_t soap_flag_ds__Signature = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct saml1__AssertionType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_saml1__AssertionType, sizeof(struct saml1__AssertionType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_saml1__AssertionType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "MajorVersion", 1, 1), &a->MajorVersion))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "MinorVersion", 1, 1), &a->MinorVersion))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "AssertionID", 1, 1), &a->AssertionID))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "Issuer", 1, 1), &a->Issuer))
		return NULL;
	if (soap_s2dateTime(soap, soap_attr_value(soap, "IssueInstant", 5, 1), &a->IssueInstant))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "wsu:Id", 1, 0), &a->wsu__Id))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_saml1__Conditions && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml1__ConditionsType(soap, "saml1:Conditions", &a->saml1__Conditions, "saml1:ConditionsType"))
				{	soap_flag_saml1__Conditions--;
					continue;
				}
			}
			if (soap_flag_saml1__Advice && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTosaml1__AdviceType(soap, "saml1:Advice", &a->saml1__Advice, "saml1:AdviceType"))
				{	soap_flag_saml1__Advice--;
					continue;
				}
			}
			if (soap_flag_ds__Signature && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ds__Signature(soap, "ds:Signature", &a->ds__Signature, ""))
				{	soap_flag_ds__Signature--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && !soap_peek_element(soap))
			{	if (a->__union_AssertionType == NULL)
				{	if (soap_blist___union_AssertionType == NULL)
						soap_blist___union_AssertionType = soap_alloc_block(soap);
					a->__union_AssertionType = soap_block<struct __saml1__union_AssertionType>::push(soap, soap_blist___union_AssertionType);
					if (a->__union_AssertionType == NULL)
						return NULL;
					soap_default___saml1__union_AssertionType(soap, a->__union_AssertionType);
				}
				if (soap_in___saml1__union_AssertionType(soap, "-union-AssertionType", a->__union_AssertionType, "-saml1:union-AssertionType"))
				{	a->__size_AssertionType++;
					a->__union_AssertionType = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->__union_AssertionType)
			soap_block<struct __saml1__union_AssertionType>::pop(soap, soap_blist___union_AssertionType);
		if (a->__size_AssertionType)
		{	a->__union_AssertionType = soap_new___saml1__union_AssertionType(soap, a->__size_AssertionType);
			if (!a->__union_AssertionType)
				return NULL;
			soap_block<struct __saml1__union_AssertionType>::save(soap, soap_blist___union_AssertionType, a->__union_AssertionType);
		}
		else
		{	a->__union_AssertionType = NULL;
			if (soap_blist___union_AssertionType)
				soap_block<struct __saml1__union_AssertionType>::end(soap, soap_blist___union_AssertionType);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct saml1__AssertionType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_saml1__AssertionType, SOAP_TYPE_saml1__AssertionType, sizeof(struct saml1__AssertionType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct saml1__AssertionType * SOAP_FMAC2 soap_instantiate_saml1__AssertionType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_saml1__AssertionType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct saml1__AssertionType *p;
	size_t k = sizeof(struct saml1__AssertionType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_saml1__AssertionType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct saml1__AssertionType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct saml1__AssertionType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct saml1__AssertionType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_saml1__AssertionType(struct soap *soap, const struct saml1__AssertionType *a, const char *tag, const char *type)
{
	if (soap_out_saml1__AssertionType(soap, tag ? tag : "saml1:AssertionType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__AssertionType * SOAP_FMAC4 soap_get_saml1__AssertionType(struct soap *soap, struct saml1__AssertionType *p, const char *tag, const char *type)
{
	if ((p = soap_in_saml1__AssertionType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___wsc__DerivedKeyTokenType_sequence(struct soap *soap, struct __wsc__DerivedKeyTokenType_sequence *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__union_DerivedKeyTokenType = -1;
	a->Length = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___wsc__DerivedKeyTokenType_sequence(struct soap *soap, const struct __wsc__DerivedKeyTokenType_sequence *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__wsc__union_DerivedKeyTokenType(soap, a->__union_DerivedKeyTokenType, &a->union_DerivedKeyTokenType);
	soap_serialize_PointerToULONG64(soap, &a->Length);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___wsc__DerivedKeyTokenType_sequence(struct soap *soap, const char *tag, int id, const struct __wsc__DerivedKeyTokenType_sequence *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out__wsc__union_DerivedKeyTokenType(soap, a->__union_DerivedKeyTokenType, &a->union_DerivedKeyTokenType))
		return soap->error;
	if (soap_out_PointerToULONG64(soap, "wsc:Length", -1, &a->Length, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __wsc__DerivedKeyTokenType_sequence * SOAP_FMAC4 soap_in___wsc__DerivedKeyTokenType_sequence(struct soap *soap, const char *tag, struct __wsc__DerivedKeyTokenType_sequence *a, const char *type)
{
	size_t soap_flag_union_DerivedKeyTokenType = 1;
	size_t soap_flag_Length = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __wsc__DerivedKeyTokenType_sequence *)soap_id_enter(soap, "", a, SOAP_TYPE___wsc__DerivedKeyTokenType_sequence, sizeof(struct __wsc__DerivedKeyTokenType_sequence), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___wsc__DerivedKeyTokenType_sequence(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_union_DerivedKeyTokenType && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in__wsc__union_DerivedKeyTokenType(soap, &a->__union_DerivedKeyTokenType, &a->union_DerivedKeyTokenType))
				{	soap_flag_union_DerivedKeyTokenType = 0;
					continue;
				}
			}
			if (soap_flag_Length && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToULONG64(soap, "wsc:Length", &a->Length, "xsd:unsignedLong"))
				{	soap_flag_Length--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __wsc__DerivedKeyTokenType_sequence * SOAP_FMAC2 soap_instantiate___wsc__DerivedKeyTokenType_sequence(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___wsc__DerivedKeyTokenType_sequence(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __wsc__DerivedKeyTokenType_sequence *p;
	size_t k = sizeof(struct __wsc__DerivedKeyTokenType_sequence);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___wsc__DerivedKeyTokenType_sequence, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __wsc__DerivedKeyTokenType_sequence);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __wsc__DerivedKeyTokenType_sequence, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __wsc__DerivedKeyTokenType_sequence location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___wsc__DerivedKeyTokenType_sequence(struct soap *soap, const struct __wsc__DerivedKeyTokenType_sequence *a, const char *tag, const char *type)
{
	if (soap_out___wsc__DerivedKeyTokenType_sequence(soap, tag ? tag : "-wsc:DerivedKeyTokenType-sequence", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __wsc__DerivedKeyTokenType_sequence * SOAP_FMAC4 soap_get___wsc__DerivedKeyTokenType_sequence(struct soap *soap, struct __wsc__DerivedKeyTokenType_sequence *p, const char *tag, const char *type)
{
	if ((p = soap_in___wsc__DerivedKeyTokenType_sequence(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsc__PropertiesType(struct soap *soap, struct wsc__PropertiesType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsc__PropertiesType(struct soap *soap, const struct wsc__PropertiesType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__PropertiesType(struct soap *soap, const char *tag, int id, const struct wsc__PropertiesType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsc__PropertiesType), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct wsc__PropertiesType * SOAP_FMAC4 soap_in_wsc__PropertiesType(struct soap *soap, const char *tag, struct wsc__PropertiesType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct wsc__PropertiesType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_wsc__PropertiesType, sizeof(struct wsc__PropertiesType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_wsc__PropertiesType(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct wsc__PropertiesType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsc__PropertiesType, SOAP_TYPE_wsc__PropertiesType, sizeof(struct wsc__PropertiesType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct wsc__PropertiesType * SOAP_FMAC2 soap_instantiate_wsc__PropertiesType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsc__PropertiesType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct wsc__PropertiesType *p;
	size_t k = sizeof(struct wsc__PropertiesType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_wsc__PropertiesType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct wsc__PropertiesType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct wsc__PropertiesType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct wsc__PropertiesType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__PropertiesType(struct soap *soap, const struct wsc__PropertiesType *a, const char *tag, const char *type)
{
	if (soap_out_wsc__PropertiesType(soap, tag ? tag : "wsc:PropertiesType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct wsc__PropertiesType * SOAP_FMAC4 soap_get_wsc__PropertiesType(struct soap *soap, struct wsc__PropertiesType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsc__PropertiesType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsc__DerivedKeyTokenType(struct soap *soap, struct wsc__DerivedKeyTokenType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->wsse__SecurityTokenReference = NULL;
	a->Properties = NULL;
	a->__DerivedKeyTokenType_sequence = NULL;
	soap_default_string(soap, &a->Label);
	soap_default_string(soap, &a->Nonce);
	soap_default_string(soap, &a->wsu__Id);
	soap_default_string(soap, &a->Algorithm);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsc__DerivedKeyTokenType(struct soap *soap, const struct wsc__DerivedKeyTokenType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_wsse__SecurityTokenReference(soap, &a->wsse__SecurityTokenReference);
	soap_serialize_PointerTowsc__PropertiesType(soap, &a->Properties);
	soap_serialize_PointerTo__wsc__DerivedKeyTokenType_sequence(soap, &a->__DerivedKeyTokenType_sequence);
	soap_serialize_string(soap, (char*const*)&a->Label);
	soap_serialize_string(soap, (char*const*)&a->Nonce);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__DerivedKeyTokenType(struct soap *soap, const char *tag, int id, const struct wsc__DerivedKeyTokenType *a, const char *type)
{
	if (a->wsu__Id)
		soap_set_attr(soap, "wsu:Id", soap_string2s(soap, a->wsu__Id), 1);
	if (a->Algorithm)
		soap_set_attr(soap, "Algorithm", soap_string2s(soap, a->Algorithm), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsc__DerivedKeyTokenType), type))
		return soap->error;
	if (soap_out_PointerTo_wsse__SecurityTokenReference(soap, "wsse:SecurityTokenReference", -1, &a->wsse__SecurityTokenReference, ""))
		return soap->error;
	if (soap_out_PointerTowsc__PropertiesType(soap, "wsc:Properties", -1, &a->Properties, ""))
		return soap->error;
	if (soap_out_PointerTo__wsc__DerivedKeyTokenType_sequence(soap, "-DerivedKeyTokenType-sequence", -1, &a->__DerivedKeyTokenType_sequence, ""))
		return soap->error;
	if (soap_out_string(soap, "wsc:Label", -1, (char*const*)&a->Label, ""))
		return soap->error;
	if (soap_out_string(soap, "wsc:Nonce", -1, (char*const*)&a->Nonce, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct wsc__DerivedKeyTokenType * SOAP_FMAC4 soap_in_wsc__DerivedKeyTokenType(struct soap *soap, const char *tag, struct wsc__DerivedKeyTokenType *a, const char *type)
{
	size_t soap_flag_wsse__SecurityTokenReference = 1;
	size_t soap_flag_Properties = 1;
	size_t soap_flag___DerivedKeyTokenType_sequence = 1;
	size_t soap_flag_Label = 1;
	size_t soap_flag_Nonce = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct wsc__DerivedKeyTokenType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_wsc__DerivedKeyTokenType, sizeof(struct wsc__DerivedKeyTokenType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_wsc__DerivedKeyTokenType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "wsu:Id", 1, 0), &a->wsu__Id))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "Algorithm", 1, 0), &a->Algorithm))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_wsse__SecurityTokenReference && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_wsse__SecurityTokenReference(soap, "wsse:SecurityTokenReference", &a->wsse__SecurityTokenReference, ""))
				{	soap_flag_wsse__SecurityTokenReference--;
					continue;
				}
			}
			if (soap_flag_Properties && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowsc__PropertiesType(soap, "wsc:Properties", &a->Properties, "wsc:PropertiesType"))
				{	soap_flag_Properties--;
					continue;
				}
			}
			if (soap_flag_Label && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "wsc:Label", (char**)&a->Label, "xsd:string"))
				{	soap_flag_Label--;
					continue;
				}
			}
			if (soap_flag_Nonce && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "wsc:Nonce", (char**)&a->Nonce, "xsd:string"))
				{	soap_flag_Nonce--;
					continue;
				}
			}
			if (soap_flag___DerivedKeyTokenType_sequence && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo__wsc__DerivedKeyTokenType_sequence(soap, "-DerivedKeyTokenType-sequence", &a->__DerivedKeyTokenType_sequence, "-wsc:DerivedKeyTokenType-sequence"))
				{	soap_flag___DerivedKeyTokenType_sequence--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct wsc__DerivedKeyTokenType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsc__DerivedKeyTokenType, SOAP_TYPE_wsc__DerivedKeyTokenType, sizeof(struct wsc__DerivedKeyTokenType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct wsc__DerivedKeyTokenType * SOAP_FMAC2 soap_instantiate_wsc__DerivedKeyTokenType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsc__DerivedKeyTokenType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct wsc__DerivedKeyTokenType *p;
	size_t k = sizeof(struct wsc__DerivedKeyTokenType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_wsc__DerivedKeyTokenType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct wsc__DerivedKeyTokenType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct wsc__DerivedKeyTokenType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct wsc__DerivedKeyTokenType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__DerivedKeyTokenType(struct soap *soap, const struct wsc__DerivedKeyTokenType *a, const char *tag, const char *type)
{
	if (soap_out_wsc__DerivedKeyTokenType(soap, tag ? tag : "wsc:DerivedKeyTokenType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct wsc__DerivedKeyTokenType * SOAP_FMAC4 soap_get_wsc__DerivedKeyTokenType(struct soap *soap, struct wsc__DerivedKeyTokenType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsc__DerivedKeyTokenType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsc__SecurityContextTokenType(struct soap *soap, struct wsc__SecurityContextTokenType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->wsu__Id);
	soap_default_string(soap, &a->Identifier);
	soap_default_string(soap, &a->Instance);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsc__SecurityContextTokenType(struct soap *soap, const struct wsc__SecurityContextTokenType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->Identifier);
	soap_serialize_string(soap, (char*const*)&a->Instance);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__SecurityContextTokenType(struct soap *soap, const char *tag, int id, const struct wsc__SecurityContextTokenType *a, const char *type)
{
	if (a->wsu__Id)
		soap_set_attr(soap, "wsu:Id", soap_string2s(soap, a->wsu__Id), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsc__SecurityContextTokenType), type))
		return soap->error;
	if (soap_out_string(soap, "wsc:Identifier", -1, (char*const*)&a->Identifier, ""))
		return soap->error;
	if (soap_out_string(soap, "wsc:Instance", -1, (char*const*)&a->Instance, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct wsc__SecurityContextTokenType * SOAP_FMAC4 soap_in_wsc__SecurityContextTokenType(struct soap *soap, const char *tag, struct wsc__SecurityContextTokenType *a, const char *type)
{
	size_t soap_flag_Identifier = 1;
	size_t soap_flag_Instance = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct wsc__SecurityContextTokenType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_wsc__SecurityContextTokenType, sizeof(struct wsc__SecurityContextTokenType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_wsc__SecurityContextTokenType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "wsu:Id", 1, 0), &a->wsu__Id))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Identifier && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "wsc:Identifier", (char**)&a->Identifier, "xsd:string"))
				{	soap_flag_Identifier--;
					continue;
				}
			}
			if (soap_flag_Instance && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "wsc:Instance", (char**)&a->Instance, "xsd:string"))
				{	soap_flag_Instance--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct wsc__SecurityContextTokenType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsc__SecurityContextTokenType, SOAP_TYPE_wsc__SecurityContextTokenType, sizeof(struct wsc__SecurityContextTokenType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct wsc__SecurityContextTokenType * SOAP_FMAC2 soap_instantiate_wsc__SecurityContextTokenType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsc__SecurityContextTokenType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct wsc__SecurityContextTokenType *p;
	size_t k = sizeof(struct wsc__SecurityContextTokenType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_wsc__SecurityContextTokenType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct wsc__SecurityContextTokenType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct wsc__SecurityContextTokenType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct wsc__SecurityContextTokenType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__SecurityContextTokenType(struct soap *soap, const struct wsc__SecurityContextTokenType *a, const char *tag, const char *type)
{
	if (soap_out_wsc__SecurityContextTokenType(soap, tag ? tag : "wsc:SecurityContextTokenType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct wsc__SecurityContextTokenType * SOAP_FMAC4 soap_get_wsc__SecurityContextTokenType(struct soap *soap, struct wsc__SecurityContextTokenType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsc__SecurityContextTokenType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__xenc__EncryptionProperty(struct soap *soap, const struct xenc__EncryptionPropertyType *a, const char *tag, const char *type)
{
	if (soap_out__xenc__EncryptionProperty(soap, tag ? tag : "xenc:EncryptionProperty", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__xenc__EncryptionProperties(struct soap *soap, const struct xenc__EncryptionPropertiesType *a, const char *tag, const char *type)
{
	if (soap_out__xenc__EncryptionProperties(soap, tag ? tag : "xenc:EncryptionProperties", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__xenc__AgreementMethod(struct soap *soap, const struct xenc__AgreementMethodType *a, const char *tag, const char *type)
{
	if (soap_out__xenc__AgreementMethod(soap, tag ? tag : "xenc:AgreementMethod", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__xenc__CipherReference(struct soap *soap, const struct xenc__CipherReferenceType *a, const char *tag, const char *type)
{
	if (soap_out__xenc__CipherReference(soap, tag ? tag : "xenc:CipherReference", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__xenc__CipherData(struct soap *soap, const struct xenc__CipherDataType *a, const char *tag, const char *type)
{
	if (soap_out__xenc__CipherData(soap, tag ? tag : "xenc:CipherData", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___xenc__union_ReferenceList(struct soap *soap, struct __xenc__union_ReferenceList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__union_ReferenceList = -1;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___xenc__union_ReferenceList(struct soap *soap, const struct __xenc__union_ReferenceList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__xenc__union_ReferenceList(soap, a->__union_ReferenceList, &a->union_ReferenceList);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___xenc__union_ReferenceList(struct soap *soap, const char *tag, int id, const struct __xenc__union_ReferenceList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out__xenc__union_ReferenceList(soap, a->__union_ReferenceList, &a->union_ReferenceList))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __xenc__union_ReferenceList * SOAP_FMAC4 soap_in___xenc__union_ReferenceList(struct soap *soap, const char *tag, struct __xenc__union_ReferenceList *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __xenc__union_ReferenceList *)soap_id_enter(soap, "", a, SOAP_TYPE___xenc__union_ReferenceList, sizeof(struct __xenc__union_ReferenceList), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___xenc__union_ReferenceList(soap, a);
		if (!soap_in__xenc__union_ReferenceList(soap, &a->__union_ReferenceList, &a->union_ReferenceList))
			return NULL;
	return a;
}

SOAP_FMAC1 struct __xenc__union_ReferenceList * SOAP_FMAC2 soap_instantiate___xenc__union_ReferenceList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___xenc__union_ReferenceList(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __xenc__union_ReferenceList *p;
	size_t k = sizeof(struct __xenc__union_ReferenceList);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___xenc__union_ReferenceList, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __xenc__union_ReferenceList);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __xenc__union_ReferenceList, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __xenc__union_ReferenceList location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___xenc__union_ReferenceList(struct soap *soap, const struct __xenc__union_ReferenceList *a, const char *tag, const char *type)
{
	if (soap_out___xenc__union_ReferenceList(soap, tag ? tag : "-xenc:union-ReferenceList", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __xenc__union_ReferenceList * SOAP_FMAC4 soap_get___xenc__union_ReferenceList(struct soap *soap, struct __xenc__union_ReferenceList *p, const char *tag, const char *type)
{
	if ((p = soap_in___xenc__union_ReferenceList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__xenc__ReferenceList(struct soap *soap, struct _xenc__ReferenceList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__size_ReferenceList = 0;
	a->__union_ReferenceList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__xenc__ReferenceList(struct soap *soap, const struct _xenc__ReferenceList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (a->__union_ReferenceList)
	{	int i;
		for (i = 0; i < (int)a->__size_ReferenceList; i++)
		{
			soap_serialize___xenc__union_ReferenceList(soap, a->__union_ReferenceList + i);
		}
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__xenc__ReferenceList(struct soap *soap, const char *tag, int id, const struct _xenc__ReferenceList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__xenc__ReferenceList), type))
		return soap->error;
	if (a->__union_ReferenceList)
	{	int i;
		for (i = 0; i < (int)a->__size_ReferenceList; i++)
			if (soap_out___xenc__union_ReferenceList(soap, "-union-ReferenceList", -1, a->__union_ReferenceList + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct _xenc__ReferenceList * SOAP_FMAC4 soap_in__xenc__ReferenceList(struct soap *soap, const char *tag, struct _xenc__ReferenceList *a, const char *type)
{
	struct soap_blist *soap_blist___union_ReferenceList = NULL;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct _xenc__ReferenceList *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__xenc__ReferenceList, sizeof(struct _xenc__ReferenceList), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default__xenc__ReferenceList(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_peek_element(soap))
			{	if (a->__union_ReferenceList == NULL)
				{	if (soap_blist___union_ReferenceList == NULL)
						soap_blist___union_ReferenceList = soap_alloc_block(soap);
					a->__union_ReferenceList = soap_block<struct __xenc__union_ReferenceList>::push(soap, soap_blist___union_ReferenceList);
					if (a->__union_ReferenceList == NULL)
						return NULL;
					soap_default___xenc__union_ReferenceList(soap, a->__union_ReferenceList);
				}
				if (soap_in___xenc__union_ReferenceList(soap, "-union-ReferenceList", a->__union_ReferenceList, "-xenc:union-ReferenceList"))
				{	a->__size_ReferenceList++;
					a->__union_ReferenceList = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->__union_ReferenceList)
			soap_block<struct __xenc__union_ReferenceList>::pop(soap, soap_blist___union_ReferenceList);
		if (a->__size_ReferenceList)
		{	a->__union_ReferenceList = soap_new___xenc__union_ReferenceList(soap, a->__size_ReferenceList);
			if (!a->__union_ReferenceList)
				return NULL;
			soap_block<struct __xenc__union_ReferenceList>::save(soap, soap_blist___union_ReferenceList, a->__union_ReferenceList);
		}
		else
		{	a->__union_ReferenceList = NULL;
			if (soap_blist___union_ReferenceList)
				soap_block<struct __xenc__union_ReferenceList>::end(soap, soap_blist___union_ReferenceList);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (a->__size_ReferenceList < 1))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct _xenc__ReferenceList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__xenc__ReferenceList, SOAP_TYPE__xenc__ReferenceList, sizeof(struct _xenc__ReferenceList), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct _xenc__ReferenceList * SOAP_FMAC2 soap_instantiate__xenc__ReferenceList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__xenc__ReferenceList(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct _xenc__ReferenceList *p;
	size_t k = sizeof(struct _xenc__ReferenceList);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__xenc__ReferenceList, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct _xenc__ReferenceList);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct _xenc__ReferenceList, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct _xenc__ReferenceList location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__xenc__ReferenceList(struct soap *soap, const struct _xenc__ReferenceList *a, const char *tag, const char *type)
{
	if (soap_out__xenc__ReferenceList(soap, tag ? tag : "xenc:ReferenceList", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct _xenc__ReferenceList * SOAP_FMAC4 soap_get__xenc__ReferenceList(struct soap *soap, struct _xenc__ReferenceList *p, const char *tag, const char *type)
{
	if ((p = soap_in__xenc__ReferenceList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptionPropertyType(struct soap *soap, struct xenc__EncryptionPropertyType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->Target);
	soap_default_string(soap, &a->Id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptionPropertyType(struct soap *soap, const struct xenc__EncryptionPropertyType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptionPropertyType(struct soap *soap, const char *tag, int id, const struct xenc__EncryptionPropertyType *a, const char *type)
{
	if (a->Target)
		soap_set_attr(soap, "Target", soap_string2s(soap, a->Target), 1);
	if (a->Id)
		soap_set_attr(soap, "Id", soap_string2s(soap, a->Id), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_xenc__EncryptionPropertyType), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct xenc__EncryptionPropertyType * SOAP_FMAC4 soap_in_xenc__EncryptionPropertyType(struct soap *soap, const char *tag, struct xenc__EncryptionPropertyType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct xenc__EncryptionPropertyType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xenc__EncryptionPropertyType, sizeof(struct xenc__EncryptionPropertyType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_xenc__EncryptionPropertyType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "Target", 1, 0), &a->Target))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "Id", 1, 0), &a->Id))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct xenc__EncryptionPropertyType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xenc__EncryptionPropertyType, SOAP_TYPE_xenc__EncryptionPropertyType, sizeof(struct xenc__EncryptionPropertyType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct xenc__EncryptionPropertyType * SOAP_FMAC2 soap_instantiate_xenc__EncryptionPropertyType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xenc__EncryptionPropertyType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct xenc__EncryptionPropertyType *p;
	size_t k = sizeof(struct xenc__EncryptionPropertyType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xenc__EncryptionPropertyType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct xenc__EncryptionPropertyType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct xenc__EncryptionPropertyType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct xenc__EncryptionPropertyType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptionPropertyType(struct soap *soap, const struct xenc__EncryptionPropertyType *a, const char *tag, const char *type)
{
	if (soap_out_xenc__EncryptionPropertyType(soap, tag ? tag : "xenc:EncryptionPropertyType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct xenc__EncryptionPropertyType * SOAP_FMAC4 soap_get_xenc__EncryptionPropertyType(struct soap *soap, struct xenc__EncryptionPropertyType *p, const char *tag, const char *type)
{
	if ((p = soap_in_xenc__EncryptionPropertyType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptionPropertiesType(struct soap *soap, struct xenc__EncryptionPropertiesType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__sizeEncryptionProperty = 0;
	a->EncryptionProperty_ = NULL;
	soap_default_string(soap, &a->Id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptionPropertiesType(struct soap *soap, const struct xenc__EncryptionPropertiesType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (a->EncryptionProperty_)
	{	int i;
		for (i = 0; i < (int)a->__sizeEncryptionProperty; i++)
		{
			soap_embedded(soap, a->EncryptionProperty_ + i, SOAP_TYPE_xenc__EncryptionPropertyType);
			soap_serialize_xenc__EncryptionPropertyType(soap, a->EncryptionProperty_ + i);
		}
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptionPropertiesType(struct soap *soap, const char *tag, int id, const struct xenc__EncryptionPropertiesType *a, const char *type)
{
	if (a->Id)
		soap_set_attr(soap, "Id", soap_string2s(soap, a->Id), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_xenc__EncryptionPropertiesType), type))
		return soap->error;
	if (a->EncryptionProperty_)
	{	int i;
		for (i = 0; i < (int)a->__sizeEncryptionProperty; i++)
			if (soap_out_xenc__EncryptionPropertyType(soap, "xenc:EncryptionProperty", -1, a->EncryptionProperty_ + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct xenc__EncryptionPropertiesType * SOAP_FMAC4 soap_in_xenc__EncryptionPropertiesType(struct soap *soap, const char *tag, struct xenc__EncryptionPropertiesType *a, const char *type)
{
	struct soap_blist *soap_blist_EncryptionProperty_ = NULL;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct xenc__EncryptionPropertiesType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xenc__EncryptionPropertiesType, sizeof(struct xenc__EncryptionPropertiesType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_xenc__EncryptionPropertiesType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "Id", 1, 0), &a->Id))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "xenc:EncryptionProperty", 1, NULL))
			{	if (a->EncryptionProperty_ == NULL)
				{	if (soap_blist_EncryptionProperty_ == NULL)
						soap_blist_EncryptionProperty_ = soap_alloc_block(soap);
					a->EncryptionProperty_ = soap_block<struct xenc__EncryptionPropertyType>::push(soap, soap_blist_EncryptionProperty_);
					if (a->EncryptionProperty_ == NULL)
						return NULL;
					soap_default_xenc__EncryptionPropertyType(soap, a->EncryptionProperty_);
				}
				soap_revert(soap);
				if (soap_in_xenc__EncryptionPropertyType(soap, "xenc:EncryptionProperty", a->EncryptionProperty_, "xenc:EncryptionPropertyType"))
				{	a->__sizeEncryptionProperty++;
					a->EncryptionProperty_ = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->EncryptionProperty_)
			soap_block<struct xenc__EncryptionPropertyType>::pop(soap, soap_blist_EncryptionProperty_);
		if (a->__sizeEncryptionProperty)
		{	a->EncryptionProperty_ = soap_new_xenc__EncryptionPropertyType(soap, a->__sizeEncryptionProperty);
			if (!a->EncryptionProperty_)
				return NULL;
			soap_block<struct xenc__EncryptionPropertyType>::save(soap, soap_blist_EncryptionProperty_, a->EncryptionProperty_);
		}
		else
		{	a->EncryptionProperty_ = NULL;
			if (soap_blist_EncryptionProperty_)
				soap_block<struct xenc__EncryptionPropertyType>::end(soap, soap_blist_EncryptionProperty_);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (a->__sizeEncryptionProperty < 1))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct xenc__EncryptionPropertiesType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xenc__EncryptionPropertiesType, SOAP_TYPE_xenc__EncryptionPropertiesType, sizeof(struct xenc__EncryptionPropertiesType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct xenc__EncryptionPropertiesType * SOAP_FMAC2 soap_instantiate_xenc__EncryptionPropertiesType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xenc__EncryptionPropertiesType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct xenc__EncryptionPropertiesType *p;
	size_t k = sizeof(struct xenc__EncryptionPropertiesType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xenc__EncryptionPropertiesType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct xenc__EncryptionPropertiesType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct xenc__EncryptionPropertiesType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct xenc__EncryptionPropertiesType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptionPropertiesType(struct soap *soap, const struct xenc__EncryptionPropertiesType *a, const char *tag, const char *type)
{
	if (soap_out_xenc__EncryptionPropertiesType(soap, tag ? tag : "xenc:EncryptionPropertiesType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct xenc__EncryptionPropertiesType * SOAP_FMAC4 soap_get_xenc__EncryptionPropertiesType(struct soap *soap, struct xenc__EncryptionPropertiesType *p, const char *tag, const char *type)
{
	if ((p = soap_in_xenc__EncryptionPropertiesType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__ReferenceType(struct soap *soap, struct xenc__ReferenceType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->URI);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__ReferenceType(struct soap *soap, const struct xenc__ReferenceType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__ReferenceType(struct soap *soap, const char *tag, int id, const struct xenc__ReferenceType *a, const char *type)
{
	soap_set_attr(soap, "URI", a->URI ? soap_string2s(soap, a->URI) : "", 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_xenc__ReferenceType), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct xenc__ReferenceType * SOAP_FMAC4 soap_in_xenc__ReferenceType(struct soap *soap, const char *tag, struct xenc__ReferenceType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct xenc__ReferenceType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xenc__ReferenceType, sizeof(struct xenc__ReferenceType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_xenc__ReferenceType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "URI", 1, 1), &a->URI))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct xenc__ReferenceType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xenc__ReferenceType, SOAP_TYPE_xenc__ReferenceType, sizeof(struct xenc__ReferenceType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct xenc__ReferenceType * SOAP_FMAC2 soap_instantiate_xenc__ReferenceType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xenc__ReferenceType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct xenc__ReferenceType *p;
	size_t k = sizeof(struct xenc__ReferenceType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xenc__ReferenceType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct xenc__ReferenceType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct xenc__ReferenceType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct xenc__ReferenceType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__ReferenceType(struct soap *soap, const struct xenc__ReferenceType *a, const char *tag, const char *type)
{
	if (soap_out_xenc__ReferenceType(soap, tag ? tag : "xenc:ReferenceType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct xenc__ReferenceType * SOAP_FMAC4 soap_get_xenc__ReferenceType(struct soap *soap, struct xenc__ReferenceType *p, const char *tag, const char *type)
{
	if ((p = soap_in_xenc__ReferenceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__AgreementMethodType(struct soap *soap, struct xenc__AgreementMethodType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->KA_Nonce);
	a->OriginatorKeyInfo = NULL;
	a->RecipientKeyInfo = NULL;
	soap_default_string(soap, &a->Algorithm);
	a->__mixed = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__AgreementMethodType(struct soap *soap, const struct xenc__AgreementMethodType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->KA_Nonce);
	soap_serialize_PointerTods__KeyInfoType(soap, &a->OriginatorKeyInfo);
	soap_serialize_PointerTods__KeyInfoType(soap, &a->RecipientKeyInfo);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__AgreementMethodType(struct soap *soap, const char *tag, int id, const struct xenc__AgreementMethodType *a, const char *type)
{
	soap_set_attr(soap, "Algorithm", a->Algorithm ? soap_string2s(soap, a->Algorithm) : "", 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_xenc__AgreementMethodType), type))
		return soap->error;
	if (soap_out_string(soap, "xenc:KA-Nonce", -1, (char*const*)&a->KA_Nonce, ""))
		return soap->error;
	if (soap_out_PointerTods__KeyInfoType(soap, "xenc:OriginatorKeyInfo", -1, &a->OriginatorKeyInfo, ""))
		return soap->error;
	if (soap_out_PointerTods__KeyInfoType(soap, "xenc:RecipientKeyInfo", -1, &a->RecipientKeyInfo, ""))
		return soap->error;
	if (soap_outliteral(soap, "-mixed", (char*const*)&a->__mixed, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct xenc__AgreementMethodType * SOAP_FMAC4 soap_in_xenc__AgreementMethodType(struct soap *soap, const char *tag, struct xenc__AgreementMethodType *a, const char *type)
{
	size_t soap_flag_KA_Nonce = 1;
	size_t soap_flag_OriginatorKeyInfo = 1;
	size_t soap_flag_RecipientKeyInfo = 1;
	size_t soap_flag___mixed = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct xenc__AgreementMethodType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xenc__AgreementMethodType, sizeof(struct xenc__AgreementMethodType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_xenc__AgreementMethodType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "Algorithm", 1, 1), &a->Algorithm))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_KA_Nonce && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "xenc:KA-Nonce", (char**)&a->KA_Nonce, "xsd:string"))
				{	soap_flag_KA_Nonce--;
					continue;
				}
			}
			if (soap_flag_OriginatorKeyInfo && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTods__KeyInfoType(soap, "xenc:OriginatorKeyInfo", &a->OriginatorKeyInfo, "ds:KeyInfoType"))
				{	soap_flag_OriginatorKeyInfo--;
					continue;
				}
			}
			if (soap_flag_RecipientKeyInfo && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTods__KeyInfoType(soap, "xenc:RecipientKeyInfo", &a->RecipientKeyInfo, "ds:KeyInfoType"))
				{	soap_flag_RecipientKeyInfo--;
					continue;
				}
			}
			if (soap_flag___mixed && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-mixed", (char**)&a->__mixed))
				{	soap_flag___mixed--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct xenc__AgreementMethodType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xenc__AgreementMethodType, SOAP_TYPE_xenc__AgreementMethodType, sizeof(struct xenc__AgreementMethodType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct xenc__AgreementMethodType * SOAP_FMAC2 soap_instantiate_xenc__AgreementMethodType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xenc__AgreementMethodType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct xenc__AgreementMethodType *p;
	size_t k = sizeof(struct xenc__AgreementMethodType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xenc__AgreementMethodType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct xenc__AgreementMethodType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct xenc__AgreementMethodType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct xenc__AgreementMethodType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__AgreementMethodType(struct soap *soap, const struct xenc__AgreementMethodType *a, const char *tag, const char *type)
{
	if (soap_out_xenc__AgreementMethodType(soap, tag ? tag : "xenc:AgreementMethodType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct xenc__AgreementMethodType * SOAP_FMAC4 soap_get_xenc__AgreementMethodType(struct soap *soap, struct xenc__AgreementMethodType *p, const char *tag, const char *type)
{
	if ((p = soap_in_xenc__AgreementMethodType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptedKeyType(struct soap *soap, struct xenc__EncryptedKeyType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->EncryptionMethod = NULL;
	a->ds__KeyInfo = NULL;
	a->CipherData = NULL;
	a->EncryptionProperties = NULL;
	soap_default_string(soap, &a->Id);
	soap_default_string(soap, &a->Type);
	soap_default_string(soap, &a->MimeType);
	soap_default_string(soap, &a->Encoding);
	a->ReferenceList = NULL;
	soap_default_string(soap, &a->CarriedKeyName);
	soap_default_string(soap, &a->Recipient);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptedKeyType(struct soap *soap, const struct xenc__EncryptedKeyType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToxenc__EncryptionMethodType(soap, &a->EncryptionMethod);
	soap_serialize_PointerTo_ds__KeyInfo(soap, &a->ds__KeyInfo);
	soap_serialize_PointerToxenc__CipherDataType(soap, &a->CipherData);
	soap_serialize_PointerToxenc__EncryptionPropertiesType(soap, &a->EncryptionProperties);
	soap_serialize_PointerTo_xenc__ReferenceList(soap, &a->ReferenceList);
	soap_serialize_string(soap, (char*const*)&a->CarriedKeyName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptedKeyType(struct soap *soap, const char *tag, int id, const struct xenc__EncryptedKeyType *a, const char *type)
{
	if (a->Id)
		soap_set_attr(soap, "Id", soap_string2s(soap, a->Id), 1);
	if (a->Type)
		soap_set_attr(soap, "Type", soap_string2s(soap, a->Type), 1);
	if (a->MimeType)
		soap_set_attr(soap, "MimeType", soap_string2s(soap, a->MimeType), 1);
	if (a->Encoding)
		soap_set_attr(soap, "Encoding", soap_string2s(soap, a->Encoding), 1);
	if (a->Recipient)
		soap_set_attr(soap, "Recipient", soap_string2s(soap, a->Recipient), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_xenc__EncryptedKeyType), type))
		return soap->error;
	if (soap_out_PointerToxenc__EncryptionMethodType(soap, "xenc:EncryptionMethod", -1, &a->EncryptionMethod, ""))
		return soap->error;
	if (soap_out_PointerTo_ds__KeyInfo(soap, "ds:KeyInfo", -1, &a->ds__KeyInfo, ""))
		return soap->error;
	if (!a->CipherData)
	{	if (soap_element_empty(soap, "xenc:CipherData"))
			return soap->error;
	}
	else
	if (soap_out_PointerToxenc__CipherDataType(soap, "xenc:CipherData", -1, &a->CipherData, ""))
		return soap->error;
	if (soap_out_PointerToxenc__EncryptionPropertiesType(soap, "xenc:EncryptionProperties", -1, &a->EncryptionProperties, ""))
		return soap->error;
	if (soap_out_PointerTo_xenc__ReferenceList(soap, "xenc:ReferenceList", -1, &a->ReferenceList, ""))
		return soap->error;
	if (soap_out_string(soap, "xenc:CarriedKeyName", -1, (char*const*)&a->CarriedKeyName, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct xenc__EncryptedKeyType * SOAP_FMAC4 soap_in_xenc__EncryptedKeyType(struct soap *soap, const char *tag, struct xenc__EncryptedKeyType *a, const char *type)
{
	size_t soap_flag_EncryptionMethod = 1;
	size_t soap_flag_ds__KeyInfo = 1;
	size_t soap_flag_CipherData = 1;
	size_t soap_flag_EncryptionProperties = 1;
	size_t soap_flag_ReferenceList = 1;
	size_t soap_flag_CarriedKeyName = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct xenc__EncryptedKeyType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xenc__EncryptedKeyType, sizeof(struct xenc__EncryptedKeyType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_xenc__EncryptedKeyType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "Id", 1, 0), &a->Id))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "Type", 1, 0), &a->Type))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "MimeType", 1, 0), &a->MimeType))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "Encoding", 1, 0), &a->Encoding))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "Recipient", 1, 0), &a->Recipient))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_EncryptionMethod && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToxenc__EncryptionMethodType(soap, "xenc:EncryptionMethod", &a->EncryptionMethod, "xenc:EncryptionMethodType"))
				{	soap_flag_EncryptionMethod--;
					continue;
				}
			}
			if (soap_flag_ds__KeyInfo && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ds__KeyInfo(soap, "ds:KeyInfo", &a->ds__KeyInfo, ""))
				{	soap_flag_ds__KeyInfo--;
					continue;
				}
			}
			if (soap_flag_CipherData && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToxenc__CipherDataType(soap, "xenc:CipherData", &a->CipherData, "xenc:CipherDataType"))
				{	soap_flag_CipherData--;
					continue;
				}
			}
			if (soap_flag_EncryptionProperties && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToxenc__EncryptionPropertiesType(soap, "xenc:EncryptionProperties", &a->EncryptionProperties, "xenc:EncryptionPropertiesType"))
				{	soap_flag_EncryptionProperties--;
					continue;
				}
			}
			if (soap_flag_ReferenceList && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_xenc__ReferenceList(soap, "xenc:ReferenceList", &a->ReferenceList, ""))
				{	soap_flag_ReferenceList--;
					continue;
				}
			}
			if (soap_flag_CarriedKeyName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "xenc:CarriedKeyName", (char**)&a->CarriedKeyName, "xsd:string"))
				{	soap_flag_CarriedKeyName--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->CipherData))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct xenc__EncryptedKeyType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xenc__EncryptedKeyType, SOAP_TYPE_xenc__EncryptedKeyType, sizeof(struct xenc__EncryptedKeyType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct xenc__EncryptedKeyType * SOAP_FMAC2 soap_instantiate_xenc__EncryptedKeyType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xenc__EncryptedKeyType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct xenc__EncryptedKeyType *p;
	size_t k = sizeof(struct xenc__EncryptedKeyType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xenc__EncryptedKeyType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct xenc__EncryptedKeyType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct xenc__EncryptedKeyType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct xenc__EncryptedKeyType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptedKeyType(struct soap *soap, const struct xenc__EncryptedKeyType *a, const char *tag, const char *type)
{
	if (soap_out_xenc__EncryptedKeyType(soap, tag ? tag : "xenc:EncryptedKeyType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct xenc__EncryptedKeyType * SOAP_FMAC4 soap_get_xenc__EncryptedKeyType(struct soap *soap, struct xenc__EncryptedKeyType *p, const char *tag, const char *type)
{
	if ((p = soap_in_xenc__EncryptedKeyType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptedDataType(struct soap *soap, struct xenc__EncryptedDataType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->EncryptionMethod = NULL;
	a->ds__KeyInfo = NULL;
	a->CipherData = NULL;
	a->EncryptionProperties = NULL;
	soap_default_string(soap, &a->Id);
	soap_default_string(soap, &a->Type);
	soap_default_string(soap, &a->MimeType);
	soap_default_string(soap, &a->Encoding);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptedDataType(struct soap *soap, const struct xenc__EncryptedDataType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToxenc__EncryptionMethodType(soap, &a->EncryptionMethod);
	soap_serialize_PointerTo_ds__KeyInfo(soap, &a->ds__KeyInfo);
	soap_serialize_PointerToxenc__CipherDataType(soap, &a->CipherData);
	soap_serialize_PointerToxenc__EncryptionPropertiesType(soap, &a->EncryptionProperties);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptedDataType(struct soap *soap, const char *tag, int id, const struct xenc__EncryptedDataType *a, const char *type)
{
	if (a->Id)
		soap_set_attr(soap, "Id", soap_string2s(soap, a->Id), 1);
	if (a->Type)
		soap_set_attr(soap, "Type", soap_string2s(soap, a->Type), 1);
	if (a->MimeType)
		soap_set_attr(soap, "MimeType", soap_string2s(soap, a->MimeType), 1);
	if (a->Encoding)
		soap_set_attr(soap, "Encoding", soap_string2s(soap, a->Encoding), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_xenc__EncryptedDataType), type))
		return soap->error;
	if (soap_out_PointerToxenc__EncryptionMethodType(soap, "xenc:EncryptionMethod", -1, &a->EncryptionMethod, ""))
		return soap->error;
	if (soap_out_PointerTo_ds__KeyInfo(soap, "ds:KeyInfo", -1, &a->ds__KeyInfo, ""))
		return soap->error;
	if (!a->CipherData)
	{	if (soap_element_empty(soap, "xenc:CipherData"))
			return soap->error;
	}
	else
	if (soap_out_PointerToxenc__CipherDataType(soap, "xenc:CipherData", -1, &a->CipherData, ""))
		return soap->error;
	if (soap_out_PointerToxenc__EncryptionPropertiesType(soap, "xenc:EncryptionProperties", -1, &a->EncryptionProperties, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct xenc__EncryptedDataType * SOAP_FMAC4 soap_in_xenc__EncryptedDataType(struct soap *soap, const char *tag, struct xenc__EncryptedDataType *a, const char *type)
{
	size_t soap_flag_EncryptionMethod = 1;
	size_t soap_flag_ds__KeyInfo = 1;
	size_t soap_flag_CipherData = 1;
	size_t soap_flag_EncryptionProperties = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct xenc__EncryptedDataType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xenc__EncryptedDataType, sizeof(struct xenc__EncryptedDataType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_xenc__EncryptedDataType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "Id", 1, 0), &a->Id))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "Type", 1, 0), &a->Type))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "MimeType", 1, 0), &a->MimeType))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "Encoding", 1, 0), &a->Encoding))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_EncryptionMethod && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToxenc__EncryptionMethodType(soap, "xenc:EncryptionMethod", &a->EncryptionMethod, "xenc:EncryptionMethodType"))
				{	soap_flag_EncryptionMethod--;
					continue;
				}
			}
			if (soap_flag_ds__KeyInfo && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ds__KeyInfo(soap, "ds:KeyInfo", &a->ds__KeyInfo, ""))
				{	soap_flag_ds__KeyInfo--;
					continue;
				}
			}
			if (soap_flag_CipherData && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToxenc__CipherDataType(soap, "xenc:CipherData", &a->CipherData, "xenc:CipherDataType"))
				{	soap_flag_CipherData--;
					continue;
				}
			}
			if (soap_flag_EncryptionProperties && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToxenc__EncryptionPropertiesType(soap, "xenc:EncryptionProperties", &a->EncryptionProperties, "xenc:EncryptionPropertiesType"))
				{	soap_flag_EncryptionProperties--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->CipherData))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct xenc__EncryptedDataType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xenc__EncryptedDataType, SOAP_TYPE_xenc__EncryptedDataType, sizeof(struct xenc__EncryptedDataType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct xenc__EncryptedDataType * SOAP_FMAC2 soap_instantiate_xenc__EncryptedDataType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xenc__EncryptedDataType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct xenc__EncryptedDataType *p;
	size_t k = sizeof(struct xenc__EncryptedDataType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xenc__EncryptedDataType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct xenc__EncryptedDataType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct xenc__EncryptedDataType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct xenc__EncryptedDataType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptedDataType(struct soap *soap, const struct xenc__EncryptedDataType *a, const char *tag, const char *type)
{
	if (soap_out_xenc__EncryptedDataType(soap, tag ? tag : "xenc:EncryptedDataType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct xenc__EncryptedDataType * SOAP_FMAC4 soap_get_xenc__EncryptedDataType(struct soap *soap, struct xenc__EncryptedDataType *p, const char *tag, const char *type)
{
	if ((p = soap_in_xenc__EncryptedDataType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__TransformsType(struct soap *soap, struct xenc__TransformsType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__sizeds__Transform = 0;
	a->ds__Transform = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__TransformsType(struct soap *soap, const struct xenc__TransformsType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (a->ds__Transform)
	{	int i;
		for (i = 0; i < (int)a->__sizeds__Transform; i++)
		{
			soap_serialize_PointerTo_ds__Transform(soap, a->ds__Transform + i);
		}
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__TransformsType(struct soap *soap, const char *tag, int id, const struct xenc__TransformsType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_xenc__TransformsType), type))
		return soap->error;
	if (a->ds__Transform)
	{	int i;
		for (i = 0; i < (int)a->__sizeds__Transform; i++)
			if (soap_out_PointerTo_ds__Transform(soap, "ds:Transform", -1, a->ds__Transform + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct xenc__TransformsType * SOAP_FMAC4 soap_in_xenc__TransformsType(struct soap *soap, const char *tag, struct xenc__TransformsType *a, const char *type)
{
	struct soap_blist *soap_blist_ds__Transform = NULL;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct xenc__TransformsType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xenc__TransformsType, sizeof(struct xenc__TransformsType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_xenc__TransformsType(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "ds:Transform", 1, NULL))
			{	if (a->ds__Transform == NULL)
				{	if (soap_blist_ds__Transform == NULL)
						soap_blist_ds__Transform = soap_alloc_block(soap);
					a->ds__Transform = (struct ds__TransformType **)soap_push_block_max(soap, soap_blist_ds__Transform, sizeof(struct ds__TransformType *));
					if (a->ds__Transform == NULL)
						return NULL;
					*a->ds__Transform = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerTo_ds__Transform(soap, "ds:Transform", a->ds__Transform, ""))
				{	a->__sizeds__Transform++;
					a->ds__Transform = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ds__Transform)
			soap_pop_block(soap, soap_blist_ds__Transform);
		if (a->__sizeds__Transform)
		{	a->ds__Transform = (struct ds__TransformType **)soap_save_block(soap, soap_blist_ds__Transform, NULL, 1);
		}
		else
		{	a->ds__Transform = NULL;
			if (soap_blist_ds__Transform)
				soap_end_block(soap, soap_blist_ds__Transform);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (a->__sizeds__Transform < 1))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct xenc__TransformsType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xenc__TransformsType, SOAP_TYPE_xenc__TransformsType, sizeof(struct xenc__TransformsType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct xenc__TransformsType * SOAP_FMAC2 soap_instantiate_xenc__TransformsType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xenc__TransformsType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct xenc__TransformsType *p;
	size_t k = sizeof(struct xenc__TransformsType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xenc__TransformsType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct xenc__TransformsType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct xenc__TransformsType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct xenc__TransformsType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__TransformsType(struct soap *soap, const struct xenc__TransformsType *a, const char *tag, const char *type)
{
	if (soap_out_xenc__TransformsType(soap, tag ? tag : "xenc:TransformsType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct xenc__TransformsType * SOAP_FMAC4 soap_get_xenc__TransformsType(struct soap *soap, struct xenc__TransformsType *p, const char *tag, const char *type)
{
	if ((p = soap_in_xenc__TransformsType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__CipherReferenceType(struct soap *soap, struct xenc__CipherReferenceType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__union_CipherReferenceType = 0;
	soap_default_string(soap, &a->URI);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__CipherReferenceType(struct soap *soap, const struct xenc__CipherReferenceType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__xenc__union_CipherReferenceType(soap, a->__union_CipherReferenceType, &a->union_CipherReferenceType);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__CipherReferenceType(struct soap *soap, const char *tag, int id, const struct xenc__CipherReferenceType *a, const char *type)
{
	soap_set_attr(soap, "URI", a->URI ? soap_string2s(soap, a->URI) : "", 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_xenc__CipherReferenceType), type))
		return soap->error;
	if (soap_out__xenc__union_CipherReferenceType(soap, a->__union_CipherReferenceType, &a->union_CipherReferenceType))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct xenc__CipherReferenceType * SOAP_FMAC4 soap_in_xenc__CipherReferenceType(struct soap *soap, const char *tag, struct xenc__CipherReferenceType *a, const char *type)
{
	size_t soap_flag_union_CipherReferenceType = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct xenc__CipherReferenceType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xenc__CipherReferenceType, sizeof(struct xenc__CipherReferenceType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_xenc__CipherReferenceType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "URI", 1, 1), &a->URI))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_union_CipherReferenceType && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in__xenc__union_CipherReferenceType(soap, &a->__union_CipherReferenceType, &a->union_CipherReferenceType))
				{	soap_flag_union_CipherReferenceType = 0;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct xenc__CipherReferenceType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xenc__CipherReferenceType, SOAP_TYPE_xenc__CipherReferenceType, sizeof(struct xenc__CipherReferenceType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct xenc__CipherReferenceType * SOAP_FMAC2 soap_instantiate_xenc__CipherReferenceType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xenc__CipherReferenceType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct xenc__CipherReferenceType *p;
	size_t k = sizeof(struct xenc__CipherReferenceType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xenc__CipherReferenceType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct xenc__CipherReferenceType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct xenc__CipherReferenceType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct xenc__CipherReferenceType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__CipherReferenceType(struct soap *soap, const struct xenc__CipherReferenceType *a, const char *tag, const char *type)
{
	if (soap_out_xenc__CipherReferenceType(soap, tag ? tag : "xenc:CipherReferenceType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct xenc__CipherReferenceType * SOAP_FMAC4 soap_get_xenc__CipherReferenceType(struct soap *soap, struct xenc__CipherReferenceType *p, const char *tag, const char *type)
{
	if ((p = soap_in_xenc__CipherReferenceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__CipherDataType(struct soap *soap, struct xenc__CipherDataType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__union_CipherDataType = -1;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__CipherDataType(struct soap *soap, const struct xenc__CipherDataType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__xenc__union_CipherDataType(soap, a->__union_CipherDataType, &a->union_CipherDataType);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__CipherDataType(struct soap *soap, const char *tag, int id, const struct xenc__CipherDataType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_xenc__CipherDataType), type))
		return soap->error;
	if (soap_out__xenc__union_CipherDataType(soap, a->__union_CipherDataType, &a->union_CipherDataType))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct xenc__CipherDataType * SOAP_FMAC4 soap_in_xenc__CipherDataType(struct soap *soap, const char *tag, struct xenc__CipherDataType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct xenc__CipherDataType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xenc__CipherDataType, sizeof(struct xenc__CipherDataType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_xenc__CipherDataType(soap, a);
	if (!tag || *tag == '-' || (soap->body && *soap->href != '#'))
	{
		if (!soap_in__xenc__union_CipherDataType(soap, &a->__union_CipherDataType, &a->union_CipherDataType))
			return NULL;
		if (tag && *tag != '-')
		{	soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_TAG_MISMATCH || soap_element_end_in(soap, tag))
				return NULL;
		}
	}
	else
	{	a = (struct xenc__CipherDataType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xenc__CipherDataType, SOAP_TYPE_xenc__CipherDataType, sizeof(struct xenc__CipherDataType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct xenc__CipherDataType * SOAP_FMAC2 soap_instantiate_xenc__CipherDataType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xenc__CipherDataType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct xenc__CipherDataType *p;
	size_t k = sizeof(struct xenc__CipherDataType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xenc__CipherDataType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct xenc__CipherDataType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct xenc__CipherDataType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct xenc__CipherDataType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__CipherDataType(struct soap *soap, const struct xenc__CipherDataType *a, const char *tag, const char *type)
{
	if (soap_out_xenc__CipherDataType(soap, tag ? tag : "xenc:CipherDataType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct xenc__CipherDataType * SOAP_FMAC4 soap_get_xenc__CipherDataType(struct soap *soap, struct xenc__CipherDataType *p, const char *tag, const char *type)
{
	if ((p = soap_in_xenc__CipherDataType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptionMethodType(struct soap *soap, struct xenc__EncryptionMethodType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->KeySize = NULL;
	soap_default_string(soap, &a->OAEPparams);
	soap_default_string(soap, &a->Algorithm);
	a->__mixed = NULL;
	a->ds__DigestMethod = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptionMethodType(struct soap *soap, const struct xenc__EncryptionMethodType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToint(soap, &a->KeySize);
	soap_serialize_string(soap, (char*const*)&a->OAEPparams);
	soap_serialize_PointerTods__DigestMethodType(soap, &a->ds__DigestMethod);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptionMethodType(struct soap *soap, const char *tag, int id, const struct xenc__EncryptionMethodType *a, const char *type)
{
	soap_set_attr(soap, "Algorithm", a->Algorithm ? soap_string2s(soap, a->Algorithm) : "", 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_xenc__EncryptionMethodType), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "xenc:KeySize", -1, &a->KeySize, ""))
		return soap->error;
	if (soap_out_string(soap, "xenc:OAEPparams", -1, (char*const*)&a->OAEPparams, ""))
		return soap->error;
	if (soap_outliteral(soap, "-mixed", (char*const*)&a->__mixed, NULL))
		return soap->error;
	if (soap_out_PointerTods__DigestMethodType(soap, "ds:DigestMethod", -1, &a->ds__DigestMethod, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct xenc__EncryptionMethodType * SOAP_FMAC4 soap_in_xenc__EncryptionMethodType(struct soap *soap, const char *tag, struct xenc__EncryptionMethodType *a, const char *type)
{
	size_t soap_flag_KeySize = 1;
	size_t soap_flag_OAEPparams = 1;
	size_t soap_flag___mixed = 1;
	size_t soap_flag_ds__DigestMethod = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct xenc__EncryptionMethodType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xenc__EncryptionMethodType, sizeof(struct xenc__EncryptionMethodType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_xenc__EncryptionMethodType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "Algorithm", 1, 1), &a->Algorithm))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_KeySize && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToint(soap, "xenc:KeySize", &a->KeySize, "xsd:int"))
				{	soap_flag_KeySize--;
					continue;
				}
			}
			if (soap_flag_OAEPparams && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "xenc:OAEPparams", (char**)&a->OAEPparams, "xsd:string"))
				{	soap_flag_OAEPparams--;
					continue;
				}
			}
			if (soap_flag_ds__DigestMethod && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTods__DigestMethodType(soap, "ds:DigestMethod", &a->ds__DigestMethod, "ds:DigestMethodType"))
				{	soap_flag_ds__DigestMethod--;
					continue;
				}
			}
			if (soap_flag___mixed && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-mixed", (char**)&a->__mixed))
				{	soap_flag___mixed--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct xenc__EncryptionMethodType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xenc__EncryptionMethodType, SOAP_TYPE_xenc__EncryptionMethodType, sizeof(struct xenc__EncryptionMethodType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct xenc__EncryptionMethodType * SOAP_FMAC2 soap_instantiate_xenc__EncryptionMethodType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xenc__EncryptionMethodType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct xenc__EncryptionMethodType *p;
	size_t k = sizeof(struct xenc__EncryptionMethodType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xenc__EncryptionMethodType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct xenc__EncryptionMethodType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct xenc__EncryptionMethodType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct xenc__EncryptionMethodType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptionMethodType(struct soap *soap, const struct xenc__EncryptionMethodType *a, const char *tag, const char *type)
{
	if (soap_out_xenc__EncryptionMethodType(soap, tag ? tag : "xenc:EncryptionMethodType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct xenc__EncryptionMethodType * SOAP_FMAC4 soap_get_xenc__EncryptionMethodType(struct soap *soap, struct xenc__EncryptionMethodType *p, const char *tag, const char *type)
{
	if ((p = soap_in_xenc__EncryptionMethodType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xenc__EncryptedType(struct soap *soap, struct xenc__EncryptedType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->EncryptionMethod = NULL;
	a->ds__KeyInfo = NULL;
	a->CipherData = NULL;
	a->EncryptionProperties = NULL;
	soap_default_string(soap, &a->Id);
	soap_default_string(soap, &a->Type);
	soap_default_string(soap, &a->MimeType);
	soap_default_string(soap, &a->Encoding);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xenc__EncryptedType(struct soap *soap, const struct xenc__EncryptedType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToxenc__EncryptionMethodType(soap, &a->EncryptionMethod);
	soap_serialize_PointerTo_ds__KeyInfo(soap, &a->ds__KeyInfo);
	soap_serialize_PointerToxenc__CipherDataType(soap, &a->CipherData);
	soap_serialize_PointerToxenc__EncryptionPropertiesType(soap, &a->EncryptionProperties);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xenc__EncryptedType(struct soap *soap, const char *tag, int id, const struct xenc__EncryptedType *a, const char *type)
{
	if (a->Id)
		soap_set_attr(soap, "Id", soap_string2s(soap, a->Id), 1);
	if (a->Type)
		soap_set_attr(soap, "Type", soap_string2s(soap, a->Type), 1);
	if (a->MimeType)
		soap_set_attr(soap, "MimeType", soap_string2s(soap, a->MimeType), 1);
	if (a->Encoding)
		soap_set_attr(soap, "Encoding", soap_string2s(soap, a->Encoding), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_xenc__EncryptedType), type))
		return soap->error;
	if (soap_out_PointerToxenc__EncryptionMethodType(soap, "xenc:EncryptionMethod", -1, &a->EncryptionMethod, ""))
		return soap->error;
	if (soap_out_PointerTo_ds__KeyInfo(soap, "ds:KeyInfo", -1, &a->ds__KeyInfo, ""))
		return soap->error;
	if (!a->CipherData)
	{	if (soap_element_empty(soap, "xenc:CipherData"))
			return soap->error;
	}
	else
	if (soap_out_PointerToxenc__CipherDataType(soap, "xenc:CipherData", -1, &a->CipherData, ""))
		return soap->error;
	if (soap_out_PointerToxenc__EncryptionPropertiesType(soap, "xenc:EncryptionProperties", -1, &a->EncryptionProperties, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct xenc__EncryptedType * SOAP_FMAC4 soap_in_xenc__EncryptedType(struct soap *soap, const char *tag, struct xenc__EncryptedType *a, const char *type)
{
	size_t soap_flag_EncryptionMethod = 1;
	size_t soap_flag_ds__KeyInfo = 1;
	size_t soap_flag_CipherData = 1;
	size_t soap_flag_EncryptionProperties = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct xenc__EncryptedType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xenc__EncryptedType, sizeof(struct xenc__EncryptedType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_xenc__EncryptedType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "Id", 1, 0), &a->Id))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "Type", 1, 0), &a->Type))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "MimeType", 1, 0), &a->MimeType))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "Encoding", 1, 0), &a->Encoding))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_EncryptionMethod && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToxenc__EncryptionMethodType(soap, "xenc:EncryptionMethod", &a->EncryptionMethod, "xenc:EncryptionMethodType"))
				{	soap_flag_EncryptionMethod--;
					continue;
				}
			}
			if (soap_flag_ds__KeyInfo && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ds__KeyInfo(soap, "ds:KeyInfo", &a->ds__KeyInfo, ""))
				{	soap_flag_ds__KeyInfo--;
					continue;
				}
			}
			if (soap_flag_CipherData && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToxenc__CipherDataType(soap, "xenc:CipherData", &a->CipherData, "xenc:CipherDataType"))
				{	soap_flag_CipherData--;
					continue;
				}
			}
			if (soap_flag_EncryptionProperties && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToxenc__EncryptionPropertiesType(soap, "xenc:EncryptionProperties", &a->EncryptionProperties, "xenc:EncryptionPropertiesType"))
				{	soap_flag_EncryptionProperties--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->CipherData))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct xenc__EncryptedType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xenc__EncryptedType, SOAP_TYPE_xenc__EncryptedType, sizeof(struct xenc__EncryptedType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct xenc__EncryptedType * SOAP_FMAC2 soap_instantiate_xenc__EncryptedType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xenc__EncryptedType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct xenc__EncryptedType *p;
	size_t k = sizeof(struct xenc__EncryptedType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_xenc__EncryptedType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct xenc__EncryptedType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct xenc__EncryptedType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct xenc__EncryptedType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xenc__EncryptedType(struct soap *soap, const struct xenc__EncryptedType *a, const char *tag, const char *type)
{
	if (soap_out_xenc__EncryptedType(soap, tag ? tag : "xenc:EncryptedType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct xenc__EncryptedType * SOAP_FMAC4 soap_get_xenc__EncryptedType(struct soap *soap, struct xenc__EncryptedType *p, const char *tag, const char *type)
{
	if ((p = soap_in_xenc__EncryptedType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ds__RSAKeyValue(struct soap *soap, const struct ds__RSAKeyValueType *a, const char *tag, const char *type)
{
	if (soap_out__ds__RSAKeyValue(soap, tag ? tag : "ds:RSAKeyValue", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ds__DSAKeyValue(struct soap *soap, const struct ds__DSAKeyValueType *a, const char *tag, const char *type)
{
	if (soap_out__ds__DSAKeyValue(soap, tag ? tag : "ds:DSAKeyValue", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ds__X509Data(struct soap *soap, const struct ds__X509DataType *a, const char *tag, const char *type)
{
	if (soap_out__ds__X509Data(soap, tag ? tag : "ds:X509Data", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ds__RetrievalMethod(struct soap *soap, const struct ds__RetrievalMethodType *a, const char *tag, const char *type)
{
	if (soap_out__ds__RetrievalMethod(soap, tag ? tag : "ds:RetrievalMethod", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ds__KeyValue(struct soap *soap, const struct ds__KeyValueType *a, const char *tag, const char *type)
{
	if (soap_out__ds__KeyValue(soap, tag ? tag : "ds:KeyValue", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ds__DigestMethod(struct soap *soap, const struct ds__DigestMethodType *a, const char *tag, const char *type)
{
	if (soap_out__ds__DigestMethod(soap, tag ? tag : "ds:DigestMethod", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ds__Transforms(struct soap *soap, const struct ds__TransformsType *a, const char *tag, const char *type)
{
	if (soap_out__ds__Transforms(soap, tag ? tag : "ds:Transforms", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ds__Reference(struct soap *soap, const struct ds__ReferenceType *a, const char *tag, const char *type)
{
	if (soap_out__ds__Reference(soap, tag ? tag : "ds:Reference", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ds__SignatureMethod(struct soap *soap, const struct ds__SignatureMethodType *a, const char *tag, const char *type)
{
	if (soap_out__ds__SignatureMethod(soap, tag ? tag : "ds:SignatureMethod", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ds__CanonicalizationMethod(struct soap *soap, const struct ds__CanonicalizationMethodType *a, const char *tag, const char *type)
{
	if (soap_out__ds__CanonicalizationMethod(soap, tag ? tag : "ds:CanonicalizationMethod", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ds__SignedInfo(struct soap *soap, const struct ds__SignedInfoType *a, const char *tag, const char *type)
{
	if (soap_out__ds__SignedInfo(soap, tag ? tag : "ds:SignedInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ds__DSAKeyValueType_sequence_(struct soap *soap, struct __ds__DSAKeyValueType_sequence_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->Seed);
	soap_default_string(soap, &a->PgenCounter);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ds__DSAKeyValueType_sequence_(struct soap *soap, const struct __ds__DSAKeyValueType_sequence_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->Seed);
	soap_serialize_string(soap, (char*const*)&a->PgenCounter);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ds__DSAKeyValueType_sequence_(struct soap *soap, const char *tag, int id, const struct __ds__DSAKeyValueType_sequence_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (!a->Seed)
	{	if (soap_element_empty(soap, "ds:Seed"))
			return soap->error;
	}
	else
	if (soap_out_string(soap, "ds:Seed", -1, (char*const*)&a->Seed, ""))
		return soap->error;
	if (!a->PgenCounter)
	{	if (soap_element_empty(soap, "ds:PgenCounter"))
			return soap->error;
	}
	else
	if (soap_out_string(soap, "ds:PgenCounter", -1, (char*const*)&a->PgenCounter, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ds__DSAKeyValueType_sequence_ * SOAP_FMAC4 soap_in___ds__DSAKeyValueType_sequence_(struct soap *soap, const char *tag, struct __ds__DSAKeyValueType_sequence_ *a, const char *type)
{
	size_t soap_flag_Seed = 1;
	size_t soap_flag_PgenCounter = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ds__DSAKeyValueType_sequence_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ds__DSAKeyValueType_sequence_, sizeof(struct __ds__DSAKeyValueType_sequence_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ds__DSAKeyValueType_sequence_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Seed && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "ds:Seed", (char**)&a->Seed, "xsd:string"))
				{	soap_flag_Seed--;
					continue;
				}
			}
			if (soap_flag_PgenCounter && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "ds:PgenCounter", (char**)&a->PgenCounter, "xsd:string"))
				{	soap_flag_PgenCounter--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (!a->Seed || !a->PgenCounter))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ds__DSAKeyValueType_sequence_ * SOAP_FMAC2 soap_instantiate___ds__DSAKeyValueType_sequence_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ds__DSAKeyValueType_sequence_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ds__DSAKeyValueType_sequence_ *p;
	size_t k = sizeof(struct __ds__DSAKeyValueType_sequence_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ds__DSAKeyValueType_sequence_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ds__DSAKeyValueType_sequence_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ds__DSAKeyValueType_sequence_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ds__DSAKeyValueType_sequence_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ds__DSAKeyValueType_sequence_(struct soap *soap, const struct __ds__DSAKeyValueType_sequence_ *a, const char *tag, const char *type)
{
	if (soap_out___ds__DSAKeyValueType_sequence_(soap, tag ? tag : "-ds:DSAKeyValueType-sequence", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ds__DSAKeyValueType_sequence_ * SOAP_FMAC4 soap_get___ds__DSAKeyValueType_sequence_(struct soap *soap, struct __ds__DSAKeyValueType_sequence_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ds__DSAKeyValueType_sequence_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ds__DSAKeyValueType_sequence(struct soap *soap, struct __ds__DSAKeyValueType_sequence *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->P);
	soap_default_string(soap, &a->Q);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ds__DSAKeyValueType_sequence(struct soap *soap, const struct __ds__DSAKeyValueType_sequence *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->P);
	soap_serialize_string(soap, (char*const*)&a->Q);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ds__DSAKeyValueType_sequence(struct soap *soap, const char *tag, int id, const struct __ds__DSAKeyValueType_sequence *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (!a->P)
	{	if (soap_element_empty(soap, "ds:P"))
			return soap->error;
	}
	else
	if (soap_out_string(soap, "ds:P", -1, (char*const*)&a->P, ""))
		return soap->error;
	if (!a->Q)
	{	if (soap_element_empty(soap, "ds:Q"))
			return soap->error;
	}
	else
	if (soap_out_string(soap, "ds:Q", -1, (char*const*)&a->Q, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ds__DSAKeyValueType_sequence * SOAP_FMAC4 soap_in___ds__DSAKeyValueType_sequence(struct soap *soap, const char *tag, struct __ds__DSAKeyValueType_sequence *a, const char *type)
{
	size_t soap_flag_P = 1;
	size_t soap_flag_Q = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ds__DSAKeyValueType_sequence *)soap_id_enter(soap, "", a, SOAP_TYPE___ds__DSAKeyValueType_sequence, sizeof(struct __ds__DSAKeyValueType_sequence), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ds__DSAKeyValueType_sequence(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_P && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "ds:P", (char**)&a->P, "xsd:string"))
				{	soap_flag_P--;
					continue;
				}
			}
			if (soap_flag_Q && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "ds:Q", (char**)&a->Q, "xsd:string"))
				{	soap_flag_Q--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (!a->P || !a->Q))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ds__DSAKeyValueType_sequence * SOAP_FMAC2 soap_instantiate___ds__DSAKeyValueType_sequence(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ds__DSAKeyValueType_sequence(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ds__DSAKeyValueType_sequence *p;
	size_t k = sizeof(struct __ds__DSAKeyValueType_sequence);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ds__DSAKeyValueType_sequence, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ds__DSAKeyValueType_sequence);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ds__DSAKeyValueType_sequence, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ds__DSAKeyValueType_sequence location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ds__DSAKeyValueType_sequence(struct soap *soap, const struct __ds__DSAKeyValueType_sequence *a, const char *tag, const char *type)
{
	if (soap_out___ds__DSAKeyValueType_sequence(soap, tag ? tag : "-ds:DSAKeyValueType-sequence", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ds__DSAKeyValueType_sequence * SOAP_FMAC4 soap_get___ds__DSAKeyValueType_sequence(struct soap *soap, struct __ds__DSAKeyValueType_sequence *p, const char *tag, const char *type)
{
	if ((p = soap_in___ds__DSAKeyValueType_sequence(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ds__X509DataType_sequence(struct soap *soap, struct __ds__X509DataType_sequence *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__union_X509DataType = -1;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ds__X509DataType_sequence(struct soap *soap, const struct __ds__X509DataType_sequence *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__ds__union_X509DataType(soap, a->__union_X509DataType, &a->union_X509DataType);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ds__X509DataType_sequence(struct soap *soap, const char *tag, int id, const struct __ds__X509DataType_sequence *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out__ds__union_X509DataType(soap, a->__union_X509DataType, &a->union_X509DataType))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ds__X509DataType_sequence * SOAP_FMAC4 soap_in___ds__X509DataType_sequence(struct soap *soap, const char *tag, struct __ds__X509DataType_sequence *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ds__X509DataType_sequence *)soap_id_enter(soap, "", a, SOAP_TYPE___ds__X509DataType_sequence, sizeof(struct __ds__X509DataType_sequence), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ds__X509DataType_sequence(soap, a);
		if (!soap_in__ds__union_X509DataType(soap, &a->__union_X509DataType, &a->union_X509DataType))
			return NULL;
	return a;
}

SOAP_FMAC1 struct __ds__X509DataType_sequence * SOAP_FMAC2 soap_instantiate___ds__X509DataType_sequence(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ds__X509DataType_sequence(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ds__X509DataType_sequence *p;
	size_t k = sizeof(struct __ds__X509DataType_sequence);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ds__X509DataType_sequence, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ds__X509DataType_sequence);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ds__X509DataType_sequence, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ds__X509DataType_sequence location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ds__X509DataType_sequence(struct soap *soap, const struct __ds__X509DataType_sequence *a, const char *tag, const char *type)
{
	if (soap_out___ds__X509DataType_sequence(soap, tag ? tag : "-ds:X509DataType-sequence", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ds__X509DataType_sequence * SOAP_FMAC4 soap_get___ds__X509DataType_sequence(struct soap *soap, struct __ds__X509DataType_sequence *p, const char *tag, const char *type)
{
	if ((p = soap_in___ds__X509DataType_sequence(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__RSAKeyValueType(struct soap *soap, struct ds__RSAKeyValueType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->Modulus);
	soap_default_string(soap, &a->Exponent);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__RSAKeyValueType(struct soap *soap, const struct ds__RSAKeyValueType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->Modulus);
	soap_serialize_string(soap, (char*const*)&a->Exponent);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__RSAKeyValueType(struct soap *soap, const char *tag, int id, const struct ds__RSAKeyValueType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ds__RSAKeyValueType), type))
		return soap->error;
	if (!a->Modulus)
	{	if (soap_element_empty(soap, "ds:Modulus"))
			return soap->error;
	}
	else
	if (soap_out_string(soap, "ds:Modulus", -1, (char*const*)&a->Modulus, ""))
		return soap->error;
	if (!a->Exponent)
	{	if (soap_element_empty(soap, "ds:Exponent"))
			return soap->error;
	}
	else
	if (soap_out_string(soap, "ds:Exponent", -1, (char*const*)&a->Exponent, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ds__RSAKeyValueType * SOAP_FMAC4 soap_in_ds__RSAKeyValueType(struct soap *soap, const char *tag, struct ds__RSAKeyValueType *a, const char *type)
{
	size_t soap_flag_Modulus = 1;
	size_t soap_flag_Exponent = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ds__RSAKeyValueType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ds__RSAKeyValueType, sizeof(struct ds__RSAKeyValueType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ds__RSAKeyValueType(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Modulus && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "ds:Modulus", (char**)&a->Modulus, "xsd:string"))
				{	soap_flag_Modulus--;
					continue;
				}
			}
			if (soap_flag_Exponent && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "ds:Exponent", (char**)&a->Exponent, "xsd:string"))
				{	soap_flag_Exponent--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->Modulus || !a->Exponent))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ds__RSAKeyValueType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ds__RSAKeyValueType, SOAP_TYPE_ds__RSAKeyValueType, sizeof(struct ds__RSAKeyValueType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ds__RSAKeyValueType * SOAP_FMAC2 soap_instantiate_ds__RSAKeyValueType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ds__RSAKeyValueType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ds__RSAKeyValueType *p;
	size_t k = sizeof(struct ds__RSAKeyValueType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ds__RSAKeyValueType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ds__RSAKeyValueType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ds__RSAKeyValueType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ds__RSAKeyValueType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__RSAKeyValueType(struct soap *soap, const struct ds__RSAKeyValueType *a, const char *tag, const char *type)
{
	if (soap_out_ds__RSAKeyValueType(soap, tag ? tag : "ds:RSAKeyValueType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ds__RSAKeyValueType * SOAP_FMAC4 soap_get_ds__RSAKeyValueType(struct soap *soap, struct ds__RSAKeyValueType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ds__RSAKeyValueType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__DSAKeyValueType(struct soap *soap, struct ds__DSAKeyValueType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__DSAKeyValueType_sequence = NULL;
	soap_default_string(soap, &a->G);
	soap_default_string(soap, &a->Y);
	soap_default_string(soap, &a->J);
	a->__DSAKeyValueType_sequence_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__DSAKeyValueType(struct soap *soap, const struct ds__DSAKeyValueType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo__ds__DSAKeyValueType_sequence(soap, &a->__DSAKeyValueType_sequence);
	soap_serialize_string(soap, (char*const*)&a->G);
	soap_serialize_string(soap, (char*const*)&a->Y);
	soap_serialize_string(soap, (char*const*)&a->J);
	soap_serialize_PointerTo__ds__DSAKeyValueType_sequence_(soap, &a->__DSAKeyValueType_sequence_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__DSAKeyValueType(struct soap *soap, const char *tag, int id, const struct ds__DSAKeyValueType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ds__DSAKeyValueType), type))
		return soap->error;
	if (soap_out_PointerTo__ds__DSAKeyValueType_sequence(soap, "-DSAKeyValueType-sequence", -1, &a->__DSAKeyValueType_sequence, ""))
		return soap->error;
	if (soap_out_string(soap, "ds:G", -1, (char*const*)&a->G, ""))
		return soap->error;
	if (!a->Y)
	{	if (soap_element_empty(soap, "ds:Y"))
			return soap->error;
	}
	else
	if (soap_out_string(soap, "ds:Y", -1, (char*const*)&a->Y, ""))
		return soap->error;
	if (soap_out_string(soap, "ds:J", -1, (char*const*)&a->J, ""))
		return soap->error;
	if (soap_out_PointerTo__ds__DSAKeyValueType_sequence_(soap, "-DSAKeyValueType-sequence", -1, &a->__DSAKeyValueType_sequence_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ds__DSAKeyValueType * SOAP_FMAC4 soap_in_ds__DSAKeyValueType(struct soap *soap, const char *tag, struct ds__DSAKeyValueType *a, const char *type)
{
	size_t soap_flag___DSAKeyValueType_sequence = 1;
	size_t soap_flag_G = 1;
	size_t soap_flag_Y = 1;
	size_t soap_flag_J = 1;
	size_t soap_flag___DSAKeyValueType_sequence_ = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ds__DSAKeyValueType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ds__DSAKeyValueType, sizeof(struct ds__DSAKeyValueType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ds__DSAKeyValueType(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_G && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "ds:G", (char**)&a->G, "xsd:string"))
				{	soap_flag_G--;
					continue;
				}
			}
			if (soap_flag_Y && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "ds:Y", (char**)&a->Y, "xsd:string"))
				{	soap_flag_Y--;
					continue;
				}
			}
			if (soap_flag_J && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "ds:J", (char**)&a->J, "xsd:string"))
				{	soap_flag_J--;
					continue;
				}
			}
			if (soap_flag___DSAKeyValueType_sequence && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo__ds__DSAKeyValueType_sequence(soap, "-DSAKeyValueType-sequence", &a->__DSAKeyValueType_sequence, "-ds:DSAKeyValueType-sequence"))
				{	soap_flag___DSAKeyValueType_sequence--;
					continue;
				}
			}
			if (soap_flag___DSAKeyValueType_sequence_ && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo__ds__DSAKeyValueType_sequence_(soap, "-DSAKeyValueType-sequence", &a->__DSAKeyValueType_sequence_, "-ds:DSAKeyValueType-sequence"))
				{	soap_flag___DSAKeyValueType_sequence_--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->Y))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ds__DSAKeyValueType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ds__DSAKeyValueType, SOAP_TYPE_ds__DSAKeyValueType, sizeof(struct ds__DSAKeyValueType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ds__DSAKeyValueType * SOAP_FMAC2 soap_instantiate_ds__DSAKeyValueType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ds__DSAKeyValueType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ds__DSAKeyValueType *p;
	size_t k = sizeof(struct ds__DSAKeyValueType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ds__DSAKeyValueType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ds__DSAKeyValueType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ds__DSAKeyValueType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ds__DSAKeyValueType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__DSAKeyValueType(struct soap *soap, const struct ds__DSAKeyValueType *a, const char *tag, const char *type)
{
	if (soap_out_ds__DSAKeyValueType(soap, tag ? tag : "ds:DSAKeyValueType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ds__DSAKeyValueType * SOAP_FMAC4 soap_get_ds__DSAKeyValueType(struct soap *soap, struct ds__DSAKeyValueType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ds__DSAKeyValueType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__X509IssuerSerialType(struct soap *soap, struct ds__X509IssuerSerialType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->X509IssuerName);
	soap_default_string(soap, &a->X509SerialNumber);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__X509IssuerSerialType(struct soap *soap, const struct ds__X509IssuerSerialType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->X509IssuerName);
	soap_serialize_string(soap, (char*const*)&a->X509SerialNumber);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__X509IssuerSerialType(struct soap *soap, const char *tag, int id, const struct ds__X509IssuerSerialType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ds__X509IssuerSerialType), type))
		return soap->error;
	if (!a->X509IssuerName)
	{	if (soap_element_empty(soap, "ds:X509IssuerName"))
			return soap->error;
	}
	else
	if (soap_out_string(soap, "ds:X509IssuerName", -1, (char*const*)&a->X509IssuerName, ""))
		return soap->error;
	if (!a->X509SerialNumber)
	{	if (soap_element_empty(soap, "ds:X509SerialNumber"))
			return soap->error;
	}
	else
	if (soap_out_string(soap, "ds:X509SerialNumber", -1, (char*const*)&a->X509SerialNumber, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ds__X509IssuerSerialType * SOAP_FMAC4 soap_in_ds__X509IssuerSerialType(struct soap *soap, const char *tag, struct ds__X509IssuerSerialType *a, const char *type)
{
	size_t soap_flag_X509IssuerName = 1;
	size_t soap_flag_X509SerialNumber = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ds__X509IssuerSerialType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ds__X509IssuerSerialType, sizeof(struct ds__X509IssuerSerialType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ds__X509IssuerSerialType(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_X509IssuerName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "ds:X509IssuerName", (char**)&a->X509IssuerName, "xsd:string"))
				{	soap_flag_X509IssuerName--;
					continue;
				}
			}
			if (soap_flag_X509SerialNumber && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "ds:X509SerialNumber", (char**)&a->X509SerialNumber, "xsd:string"))
				{	soap_flag_X509SerialNumber--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->X509IssuerName || !a->X509SerialNumber))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ds__X509IssuerSerialType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ds__X509IssuerSerialType, SOAP_TYPE_ds__X509IssuerSerialType, sizeof(struct ds__X509IssuerSerialType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ds__X509IssuerSerialType * SOAP_FMAC2 soap_instantiate_ds__X509IssuerSerialType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ds__X509IssuerSerialType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ds__X509IssuerSerialType *p;
	size_t k = sizeof(struct ds__X509IssuerSerialType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ds__X509IssuerSerialType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ds__X509IssuerSerialType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ds__X509IssuerSerialType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ds__X509IssuerSerialType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__X509IssuerSerialType(struct soap *soap, const struct ds__X509IssuerSerialType *a, const char *tag, const char *type)
{
	if (soap_out_ds__X509IssuerSerialType(soap, tag ? tag : "ds:X509IssuerSerialType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ds__X509IssuerSerialType * SOAP_FMAC4 soap_get_ds__X509IssuerSerialType(struct soap *soap, struct ds__X509IssuerSerialType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ds__X509IssuerSerialType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ds__KeyInfo(struct soap *soap, const struct ds__KeyInfoType *a, const char *tag, const char *type)
{
	if (soap_out__ds__KeyInfo(soap, tag ? tag : "ds:KeyInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__RetrievalMethodType(struct soap *soap, struct ds__RetrievalMethodType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Transforms = NULL;
	soap_default_string(soap, &a->URI);
	soap_default_string(soap, &a->Type);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__RetrievalMethodType(struct soap *soap, const struct ds__RetrievalMethodType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTods__TransformsType(soap, &a->Transforms);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__RetrievalMethodType(struct soap *soap, const char *tag, int id, const struct ds__RetrievalMethodType *a, const char *type)
{
	if (a->URI)
		soap_set_attr(soap, "URI", soap_string2s(soap, a->URI), 1);
	if (a->Type)
		soap_set_attr(soap, "Type", soap_string2s(soap, a->Type), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ds__RetrievalMethodType), type))
		return soap->error;
	if (soap_out_PointerTods__TransformsType(soap, "ds:Transforms", -1, &a->Transforms, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ds__RetrievalMethodType * SOAP_FMAC4 soap_in_ds__RetrievalMethodType(struct soap *soap, const char *tag, struct ds__RetrievalMethodType *a, const char *type)
{
	size_t soap_flag_Transforms = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ds__RetrievalMethodType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ds__RetrievalMethodType, sizeof(struct ds__RetrievalMethodType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ds__RetrievalMethodType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "URI", 1, 0), &a->URI))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "Type", 1, 0), &a->Type))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Transforms && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTods__TransformsType(soap, "ds:Transforms", &a->Transforms, "ds:TransformsType"))
				{	soap_flag_Transforms--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ds__RetrievalMethodType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ds__RetrievalMethodType, SOAP_TYPE_ds__RetrievalMethodType, sizeof(struct ds__RetrievalMethodType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ds__RetrievalMethodType * SOAP_FMAC2 soap_instantiate_ds__RetrievalMethodType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ds__RetrievalMethodType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ds__RetrievalMethodType *p;
	size_t k = sizeof(struct ds__RetrievalMethodType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ds__RetrievalMethodType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ds__RetrievalMethodType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ds__RetrievalMethodType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ds__RetrievalMethodType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__RetrievalMethodType(struct soap *soap, const struct ds__RetrievalMethodType *a, const char *tag, const char *type)
{
	if (soap_out_ds__RetrievalMethodType(soap, tag ? tag : "ds:RetrievalMethodType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ds__RetrievalMethodType * SOAP_FMAC4 soap_get_ds__RetrievalMethodType(struct soap *soap, struct ds__RetrievalMethodType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ds__RetrievalMethodType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__KeyValueType(struct soap *soap, struct ds__KeyValueType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__union_KeyValueType = -1;
	a->__mixed = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__KeyValueType(struct soap *soap, const struct ds__KeyValueType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__ds__union_KeyValueType(soap, a->__union_KeyValueType, &a->union_KeyValueType);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__KeyValueType(struct soap *soap, const char *tag, int id, const struct ds__KeyValueType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ds__KeyValueType), type))
		return soap->error;
	if (soap_out__ds__union_KeyValueType(soap, a->__union_KeyValueType, &a->union_KeyValueType))
		return soap->error;
	if (soap_outliteral(soap, "-mixed", (char*const*)&a->__mixed, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ds__KeyValueType * SOAP_FMAC4 soap_in_ds__KeyValueType(struct soap *soap, const char *tag, struct ds__KeyValueType *a, const char *type)
{
	size_t soap_flag_union_KeyValueType = 1;
	size_t soap_flag___mixed = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ds__KeyValueType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ds__KeyValueType, sizeof(struct ds__KeyValueType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ds__KeyValueType(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_union_KeyValueType && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in__ds__union_KeyValueType(soap, &a->__union_KeyValueType, &a->union_KeyValueType))
				{	soap_flag_union_KeyValueType = 0;
					continue;
				}
			}
			if (soap_flag___mixed && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-mixed", (char**)&a->__mixed))
				{	soap_flag___mixed--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ds__KeyValueType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ds__KeyValueType, SOAP_TYPE_ds__KeyValueType, sizeof(struct ds__KeyValueType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ds__KeyValueType * SOAP_FMAC2 soap_instantiate_ds__KeyValueType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ds__KeyValueType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ds__KeyValueType *p;
	size_t k = sizeof(struct ds__KeyValueType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ds__KeyValueType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ds__KeyValueType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ds__KeyValueType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ds__KeyValueType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__KeyValueType(struct soap *soap, const struct ds__KeyValueType *a, const char *tag, const char *type)
{
	if (soap_out_ds__KeyValueType(soap, tag ? tag : "ds:KeyValueType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ds__KeyValueType * SOAP_FMAC4 soap_get_ds__KeyValueType(struct soap *soap, struct ds__KeyValueType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ds__KeyValueType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__DigestMethodType(struct soap *soap, struct ds__DigestMethodType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->Algorithm);
	a->__mixed = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__DigestMethodType(struct soap *soap, const struct ds__DigestMethodType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__DigestMethodType(struct soap *soap, const char *tag, int id, const struct ds__DigestMethodType *a, const char *type)
{
	soap_set_attr(soap, "Algorithm", a->Algorithm ? soap_string2s(soap, a->Algorithm) : "", 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ds__DigestMethodType), type))
		return soap->error;
	if (soap_outliteral(soap, "-mixed", (char*const*)&a->__mixed, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ds__DigestMethodType * SOAP_FMAC4 soap_in_ds__DigestMethodType(struct soap *soap, const char *tag, struct ds__DigestMethodType *a, const char *type)
{
	size_t soap_flag___mixed = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ds__DigestMethodType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ds__DigestMethodType, sizeof(struct ds__DigestMethodType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ds__DigestMethodType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "Algorithm", 1, 1), &a->Algorithm))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___mixed && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-mixed", (char**)&a->__mixed))
				{	soap_flag___mixed--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ds__DigestMethodType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ds__DigestMethodType, SOAP_TYPE_ds__DigestMethodType, sizeof(struct ds__DigestMethodType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ds__DigestMethodType * SOAP_FMAC2 soap_instantiate_ds__DigestMethodType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ds__DigestMethodType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ds__DigestMethodType *p;
	size_t k = sizeof(struct ds__DigestMethodType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ds__DigestMethodType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ds__DigestMethodType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ds__DigestMethodType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ds__DigestMethodType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__DigestMethodType(struct soap *soap, const struct ds__DigestMethodType *a, const char *tag, const char *type)
{
	if (soap_out_ds__DigestMethodType(soap, tag ? tag : "ds:DigestMethodType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ds__DigestMethodType * SOAP_FMAC4 soap_get_ds__DigestMethodType(struct soap *soap, struct ds__DigestMethodType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ds__DigestMethodType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ds__Transform(struct soap *soap, const struct ds__TransformType *a, const char *tag, const char *type)
{
	if (soap_out__ds__Transform(soap, tag ? tag : "ds:Transform", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__TransformType(struct soap *soap, struct ds__TransformType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->c14n__InclusiveNamespaces = NULL;
	a->__any = NULL;
	soap_default_string(soap, &a->Algorithm);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__TransformType(struct soap *soap, const struct ds__TransformType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_c14n__InclusiveNamespaces(soap, &a->c14n__InclusiveNamespaces);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__TransformType(struct soap *soap, const char *tag, int id, const struct ds__TransformType *a, const char *type)
{
	if (a->Algorithm)
		soap_set_attr(soap, "Algorithm", soap_string2s(soap, a->Algorithm), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ds__TransformType), type))
		return soap->error;
	if (soap_out_PointerTo_c14n__InclusiveNamespaces(soap, "c14n:InclusiveNamespaces", -1, &a->c14n__InclusiveNamespaces, ""))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ds__TransformType * SOAP_FMAC4 soap_in_ds__TransformType(struct soap *soap, const char *tag, struct ds__TransformType *a, const char *type)
{
	size_t soap_flag_c14n__InclusiveNamespaces = 1;
	size_t soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ds__TransformType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ds__TransformType, sizeof(struct ds__TransformType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ds__TransformType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "Algorithm", 1, 0), &a->Algorithm))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_c14n__InclusiveNamespaces && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_c14n__InclusiveNamespaces(soap, "c14n:InclusiveNamespaces", &a->c14n__InclusiveNamespaces, ""))
				{	soap_flag_c14n__InclusiveNamespaces--;
					continue;
				}
			}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ds__TransformType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ds__TransformType, SOAP_TYPE_ds__TransformType, sizeof(struct ds__TransformType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ds__TransformType * SOAP_FMAC2 soap_instantiate_ds__TransformType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ds__TransformType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ds__TransformType *p;
	size_t k = sizeof(struct ds__TransformType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ds__TransformType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ds__TransformType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ds__TransformType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ds__TransformType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__TransformType(struct soap *soap, const struct ds__TransformType *a, const char *tag, const char *type)
{
	if (soap_out_ds__TransformType(soap, tag ? tag : "ds:TransformType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ds__TransformType * SOAP_FMAC4 soap_get_ds__TransformType(struct soap *soap, struct ds__TransformType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ds__TransformType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__c14n__InclusiveNamespaces(struct soap *soap, struct _c14n__InclusiveNamespaces *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->PrefixList);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__c14n__InclusiveNamespaces(struct soap *soap, const struct _c14n__InclusiveNamespaces *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__c14n__InclusiveNamespaces(struct soap *soap, const char *tag, int id, const struct _c14n__InclusiveNamespaces *a, const char *type)
{
	if (a->PrefixList)
		soap_set_attr(soap, "PrefixList", soap_string2s(soap, a->PrefixList), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__c14n__InclusiveNamespaces), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct _c14n__InclusiveNamespaces * SOAP_FMAC4 soap_in__c14n__InclusiveNamespaces(struct soap *soap, const char *tag, struct _c14n__InclusiveNamespaces *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct _c14n__InclusiveNamespaces *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__c14n__InclusiveNamespaces, sizeof(struct _c14n__InclusiveNamespaces), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default__c14n__InclusiveNamespaces(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "PrefixList", 1, 0), &a->PrefixList))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct _c14n__InclusiveNamespaces *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__c14n__InclusiveNamespaces, SOAP_TYPE__c14n__InclusiveNamespaces, sizeof(struct _c14n__InclusiveNamespaces), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct _c14n__InclusiveNamespaces * SOAP_FMAC2 soap_instantiate__c14n__InclusiveNamespaces(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__c14n__InclusiveNamespaces(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct _c14n__InclusiveNamespaces *p;
	size_t k = sizeof(struct _c14n__InclusiveNamespaces);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__c14n__InclusiveNamespaces, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct _c14n__InclusiveNamespaces);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct _c14n__InclusiveNamespaces, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct _c14n__InclusiveNamespaces location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__c14n__InclusiveNamespaces(struct soap *soap, const struct _c14n__InclusiveNamespaces *a, const char *tag, const char *type)
{
	if (soap_out__c14n__InclusiveNamespaces(soap, tag ? tag : "c14n:InclusiveNamespaces", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct _c14n__InclusiveNamespaces * SOAP_FMAC4 soap_get__c14n__InclusiveNamespaces(struct soap *soap, struct _c14n__InclusiveNamespaces *p, const char *tag, const char *type)
{
	if ((p = soap_in__c14n__InclusiveNamespaces(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__TransformsType(struct soap *soap, struct ds__TransformsType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__sizeTransform = 0;
	a->Transform_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__TransformsType(struct soap *soap, const struct ds__TransformsType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (a->Transform_)
	{	int i;
		for (i = 0; i < (int)a->__sizeTransform; i++)
		{
			soap_embedded(soap, a->Transform_ + i, SOAP_TYPE_ds__TransformType);
			soap_serialize_ds__TransformType(soap, a->Transform_ + i);
		}
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__TransformsType(struct soap *soap, const char *tag, int id, const struct ds__TransformsType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ds__TransformsType), type))
		return soap->error;
	if (a->Transform_)
	{	int i;
		for (i = 0; i < (int)a->__sizeTransform; i++)
			if (soap_out_ds__TransformType(soap, "ds:Transform", -1, a->Transform_ + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ds__TransformsType * SOAP_FMAC4 soap_in_ds__TransformsType(struct soap *soap, const char *tag, struct ds__TransformsType *a, const char *type)
{
	struct soap_blist *soap_blist_Transform_ = NULL;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ds__TransformsType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ds__TransformsType, sizeof(struct ds__TransformsType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ds__TransformsType(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "ds:Transform", 1, NULL))
			{	if (a->Transform_ == NULL)
				{	if (soap_blist_Transform_ == NULL)
						soap_blist_Transform_ = soap_alloc_block(soap);
					a->Transform_ = soap_block<struct ds__TransformType>::push(soap, soap_blist_Transform_);
					if (a->Transform_ == NULL)
						return NULL;
					soap_default_ds__TransformType(soap, a->Transform_);
				}
				soap_revert(soap);
				if (soap_in_ds__TransformType(soap, "ds:Transform", a->Transform_, "ds:TransformType"))
				{	a->__sizeTransform++;
					a->Transform_ = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Transform_)
			soap_block<struct ds__TransformType>::pop(soap, soap_blist_Transform_);
		if (a->__sizeTransform)
		{	a->Transform_ = soap_new_ds__TransformType(soap, a->__sizeTransform);
			if (!a->Transform_)
				return NULL;
			soap_block<struct ds__TransformType>::save(soap, soap_blist_Transform_, a->Transform_);
		}
		else
		{	a->Transform_ = NULL;
			if (soap_blist_Transform_)
				soap_block<struct ds__TransformType>::end(soap, soap_blist_Transform_);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (a->__sizeTransform < 1))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ds__TransformsType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ds__TransformsType, SOAP_TYPE_ds__TransformsType, sizeof(struct ds__TransformsType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ds__TransformsType * SOAP_FMAC2 soap_instantiate_ds__TransformsType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ds__TransformsType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ds__TransformsType *p;
	size_t k = sizeof(struct ds__TransformsType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ds__TransformsType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ds__TransformsType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ds__TransformsType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ds__TransformsType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__TransformsType(struct soap *soap, const struct ds__TransformsType *a, const char *tag, const char *type)
{
	if (soap_out_ds__TransformsType(soap, tag ? tag : "ds:TransformsType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ds__TransformsType * SOAP_FMAC4 soap_get_ds__TransformsType(struct soap *soap, struct ds__TransformsType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ds__TransformsType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__ReferenceType(struct soap *soap, struct ds__ReferenceType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Transforms = NULL;
	a->DigestMethod = NULL;
	soap_default_string(soap, &a->DigestValue);
	soap_default_string(soap, &a->Id);
	soap_default_string(soap, &a->URI);
	soap_default_string(soap, &a->Type);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__ReferenceType(struct soap *soap, const struct ds__ReferenceType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTods__TransformsType(soap, &a->Transforms);
	soap_serialize_PointerTods__DigestMethodType(soap, &a->DigestMethod);
	soap_serialize_string(soap, (char*const*)&a->DigestValue);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__ReferenceType(struct soap *soap, const char *tag, int id, const struct ds__ReferenceType *a, const char *type)
{
	if (a->Id)
		soap_set_attr(soap, "Id", soap_string2s(soap, a->Id), 1);
	if (a->URI)
		soap_set_attr(soap, "URI", soap_string2s(soap, a->URI), 1);
	if (a->Type)
		soap_set_attr(soap, "Type", soap_string2s(soap, a->Type), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ds__ReferenceType), type))
		return soap->error;
	if (soap_out_PointerTods__TransformsType(soap, "ds:Transforms", -1, &a->Transforms, ""))
		return soap->error;
	if (!a->DigestMethod)
	{	if (soap_element_empty(soap, "ds:DigestMethod"))
			return soap->error;
	}
	else
	if (soap_out_PointerTods__DigestMethodType(soap, "ds:DigestMethod", -1, &a->DigestMethod, ""))
		return soap->error;
	if (!a->DigestValue)
	{	if (soap_element_empty(soap, "ds:DigestValue"))
			return soap->error;
	}
	else
	if (soap_out_string(soap, "ds:DigestValue", -1, (char*const*)&a->DigestValue, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ds__ReferenceType * SOAP_FMAC4 soap_in_ds__ReferenceType(struct soap *soap, const char *tag, struct ds__ReferenceType *a, const char *type)
{
	size_t soap_flag_Transforms = 1;
	size_t soap_flag_DigestMethod = 1;
	size_t soap_flag_DigestValue = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ds__ReferenceType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ds__ReferenceType, sizeof(struct ds__ReferenceType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ds__ReferenceType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "Id", 1, 0), &a->Id))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "URI", 1, 0), &a->URI))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "Type", 1, 0), &a->Type))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Transforms && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTods__TransformsType(soap, "ds:Transforms", &a->Transforms, "ds:TransformsType"))
				{	soap_flag_Transforms--;
					continue;
				}
			}
			if (soap_flag_DigestMethod && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTods__DigestMethodType(soap, "ds:DigestMethod", &a->DigestMethod, "ds:DigestMethodType"))
				{	soap_flag_DigestMethod--;
					continue;
				}
			}
			if (soap_flag_DigestValue && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "ds:DigestValue", (char**)&a->DigestValue, "xsd:string"))
				{	soap_flag_DigestValue--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->DigestMethod || !a->DigestValue))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ds__ReferenceType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ds__ReferenceType, SOAP_TYPE_ds__ReferenceType, sizeof(struct ds__ReferenceType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ds__ReferenceType * SOAP_FMAC2 soap_instantiate_ds__ReferenceType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ds__ReferenceType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ds__ReferenceType *p;
	size_t k = sizeof(struct ds__ReferenceType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ds__ReferenceType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ds__ReferenceType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ds__ReferenceType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ds__ReferenceType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__ReferenceType(struct soap *soap, const struct ds__ReferenceType *a, const char *tag, const char *type)
{
	if (soap_out_ds__ReferenceType(soap, tag ? tag : "ds:ReferenceType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ds__ReferenceType * SOAP_FMAC4 soap_get_ds__ReferenceType(struct soap *soap, struct ds__ReferenceType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ds__ReferenceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__SignatureMethodType(struct soap *soap, struct ds__SignatureMethodType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->HMACOutputLength = NULL;
	soap_default_string(soap, &a->Algorithm);
	a->__mixed = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__SignatureMethodType(struct soap *soap, const struct ds__SignatureMethodType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToint(soap, &a->HMACOutputLength);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__SignatureMethodType(struct soap *soap, const char *tag, int id, const struct ds__SignatureMethodType *a, const char *type)
{
	soap_set_attr(soap, "Algorithm", a->Algorithm ? soap_string2s(soap, a->Algorithm) : "", 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ds__SignatureMethodType), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "ds:HMACOutputLength", -1, &a->HMACOutputLength, ""))
		return soap->error;
	if (soap_outliteral(soap, "-mixed", (char*const*)&a->__mixed, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ds__SignatureMethodType * SOAP_FMAC4 soap_in_ds__SignatureMethodType(struct soap *soap, const char *tag, struct ds__SignatureMethodType *a, const char *type)
{
	size_t soap_flag_HMACOutputLength = 1;
	size_t soap_flag___mixed = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ds__SignatureMethodType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ds__SignatureMethodType, sizeof(struct ds__SignatureMethodType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ds__SignatureMethodType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "Algorithm", 1, 1), &a->Algorithm))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_HMACOutputLength && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToint(soap, "ds:HMACOutputLength", &a->HMACOutputLength, "xsd:int"))
				{	soap_flag_HMACOutputLength--;
					continue;
				}
			}
			if (soap_flag___mixed && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-mixed", (char**)&a->__mixed))
				{	soap_flag___mixed--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ds__SignatureMethodType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ds__SignatureMethodType, SOAP_TYPE_ds__SignatureMethodType, sizeof(struct ds__SignatureMethodType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ds__SignatureMethodType * SOAP_FMAC2 soap_instantiate_ds__SignatureMethodType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ds__SignatureMethodType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ds__SignatureMethodType *p;
	size_t k = sizeof(struct ds__SignatureMethodType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ds__SignatureMethodType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ds__SignatureMethodType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ds__SignatureMethodType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ds__SignatureMethodType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__SignatureMethodType(struct soap *soap, const struct ds__SignatureMethodType *a, const char *tag, const char *type)
{
	if (soap_out_ds__SignatureMethodType(soap, tag ? tag : "ds:SignatureMethodType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ds__SignatureMethodType * SOAP_FMAC4 soap_get_ds__SignatureMethodType(struct soap *soap, struct ds__SignatureMethodType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ds__SignatureMethodType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__CanonicalizationMethodType(struct soap *soap, struct ds__CanonicalizationMethodType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->Algorithm);
	a->__mixed = NULL;
	a->c14n__InclusiveNamespaces = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__CanonicalizationMethodType(struct soap *soap, const struct ds__CanonicalizationMethodType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_c14n__InclusiveNamespaces(soap, &a->c14n__InclusiveNamespaces);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__CanonicalizationMethodType(struct soap *soap, const char *tag, int id, const struct ds__CanonicalizationMethodType *a, const char *type)
{
	soap_set_attr(soap, "Algorithm", a->Algorithm ? soap_string2s(soap, a->Algorithm) : "", 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ds__CanonicalizationMethodType), type))
		return soap->error;
	if (soap_outliteral(soap, "-mixed", (char*const*)&a->__mixed, NULL))
		return soap->error;
	if (soap_out_PointerTo_c14n__InclusiveNamespaces(soap, "c14n:InclusiveNamespaces", -1, &a->c14n__InclusiveNamespaces, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ds__CanonicalizationMethodType * SOAP_FMAC4 soap_in_ds__CanonicalizationMethodType(struct soap *soap, const char *tag, struct ds__CanonicalizationMethodType *a, const char *type)
{
	size_t soap_flag___mixed = 1;
	size_t soap_flag_c14n__InclusiveNamespaces = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ds__CanonicalizationMethodType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ds__CanonicalizationMethodType, sizeof(struct ds__CanonicalizationMethodType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ds__CanonicalizationMethodType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "Algorithm", 1, 1), &a->Algorithm))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_c14n__InclusiveNamespaces && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_c14n__InclusiveNamespaces(soap, "c14n:InclusiveNamespaces", &a->c14n__InclusiveNamespaces, ""))
				{	soap_flag_c14n__InclusiveNamespaces--;
					continue;
				}
			}
			if (soap_flag___mixed && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-mixed", (char**)&a->__mixed))
				{	soap_flag___mixed--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ds__CanonicalizationMethodType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ds__CanonicalizationMethodType, SOAP_TYPE_ds__CanonicalizationMethodType, sizeof(struct ds__CanonicalizationMethodType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ds__CanonicalizationMethodType * SOAP_FMAC2 soap_instantiate_ds__CanonicalizationMethodType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ds__CanonicalizationMethodType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ds__CanonicalizationMethodType *p;
	size_t k = sizeof(struct ds__CanonicalizationMethodType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ds__CanonicalizationMethodType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ds__CanonicalizationMethodType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ds__CanonicalizationMethodType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ds__CanonicalizationMethodType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__CanonicalizationMethodType(struct soap *soap, const struct ds__CanonicalizationMethodType *a, const char *tag, const char *type)
{
	if (soap_out_ds__CanonicalizationMethodType(soap, tag ? tag : "ds:CanonicalizationMethodType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ds__CanonicalizationMethodType * SOAP_FMAC4 soap_get_ds__CanonicalizationMethodType(struct soap *soap, struct ds__CanonicalizationMethodType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ds__CanonicalizationMethodType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ds__Signature(struct soap *soap, const struct ds__SignatureType *a, const char *tag, const char *type)
{
	if (soap_out__ds__Signature(soap, tag ? tag : "ds:Signature", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__KeyInfoType(struct soap *soap, struct ds__KeyInfoType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->KeyName);
	a->KeyValue = NULL;
	a->RetrievalMethod = NULL;
	a->X509Data = NULL;
	a->wsse__SecurityTokenReference = NULL;
	soap_default_string(soap, &a->Id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__KeyInfoType(struct soap *soap, const struct ds__KeyInfoType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->KeyName);
	soap_serialize_PointerTods__KeyValueType(soap, &a->KeyValue);
	soap_serialize_PointerTods__RetrievalMethodType(soap, &a->RetrievalMethod);
	soap_serialize_PointerTods__X509DataType(soap, &a->X509Data);
	soap_serialize_PointerTo_wsse__SecurityTokenReference(soap, &a->wsse__SecurityTokenReference);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__KeyInfoType(struct soap *soap, const char *tag, int id, const struct ds__KeyInfoType *a, const char *type)
{
	if (a->Id)
		soap_set_attr(soap, "Id", soap_string2s(soap, a->Id), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ds__KeyInfoType), type))
		return soap->error;
	if (soap_out_string(soap, "ds:KeyName", -1, (char*const*)&a->KeyName, ""))
		return soap->error;
	if (soap_out_PointerTods__KeyValueType(soap, "ds:KeyValue", -1, &a->KeyValue, ""))
		return soap->error;
	if (soap_out_PointerTods__RetrievalMethodType(soap, "ds:RetrievalMethod", -1, &a->RetrievalMethod, ""))
		return soap->error;
	if (soap_out_PointerTods__X509DataType(soap, "ds:X509Data", -1, &a->X509Data, ""))
		return soap->error;
	if (soap_out_PointerTo_wsse__SecurityTokenReference(soap, "wsse:SecurityTokenReference", -1, &a->wsse__SecurityTokenReference, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ds__KeyInfoType * SOAP_FMAC4 soap_in_ds__KeyInfoType(struct soap *soap, const char *tag, struct ds__KeyInfoType *a, const char *type)
{
	size_t soap_flag_KeyName = 1;
	size_t soap_flag_KeyValue = 1;
	size_t soap_flag_RetrievalMethod = 1;
	size_t soap_flag_X509Data = 1;
	size_t soap_flag_wsse__SecurityTokenReference = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ds__KeyInfoType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ds__KeyInfoType, sizeof(struct ds__KeyInfoType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ds__KeyInfoType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "Id", 1, 0), &a->Id))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_KeyName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "ds:KeyName", (char**)&a->KeyName, "xsd:string"))
				{	soap_flag_KeyName--;
					continue;
				}
			}
			if (soap_flag_KeyValue && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTods__KeyValueType(soap, "ds:KeyValue", &a->KeyValue, "ds:KeyValueType"))
				{	soap_flag_KeyValue--;
					continue;
				}
			}
			if (soap_flag_RetrievalMethod && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTods__RetrievalMethodType(soap, "ds:RetrievalMethod", &a->RetrievalMethod, "ds:RetrievalMethodType"))
				{	soap_flag_RetrievalMethod--;
					continue;
				}
			}
			if (soap_flag_X509Data && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTods__X509DataType(soap, "ds:X509Data", &a->X509Data, "ds:X509DataType"))
				{	soap_flag_X509Data--;
					continue;
				}
			}
			if (soap_flag_wsse__SecurityTokenReference && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_wsse__SecurityTokenReference(soap, "wsse:SecurityTokenReference", &a->wsse__SecurityTokenReference, ""))
				{	soap_flag_wsse__SecurityTokenReference--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ds__KeyInfoType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ds__KeyInfoType, SOAP_TYPE_ds__KeyInfoType, sizeof(struct ds__KeyInfoType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ds__KeyInfoType * SOAP_FMAC2 soap_instantiate_ds__KeyInfoType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ds__KeyInfoType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ds__KeyInfoType *p;
	size_t k = sizeof(struct ds__KeyInfoType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ds__KeyInfoType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ds__KeyInfoType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ds__KeyInfoType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ds__KeyInfoType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__KeyInfoType(struct soap *soap, const struct ds__KeyInfoType *a, const char *tag, const char *type)
{
	if (soap_out_ds__KeyInfoType(soap, tag ? tag : "ds:KeyInfoType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ds__KeyInfoType * SOAP_FMAC4 soap_get_ds__KeyInfoType(struct soap *soap, struct ds__KeyInfoType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ds__KeyInfoType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__SignedInfoType(struct soap *soap, struct ds__SignedInfoType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->CanonicalizationMethod = NULL;
	a->SignatureMethod = NULL;
	a->__sizeReference = 0;
	a->Reference_ = NULL;
	soap_default_string(soap, &a->Id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__SignedInfoType(struct soap *soap, const struct ds__SignedInfoType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTods__CanonicalizationMethodType(soap, &a->CanonicalizationMethod);
	soap_serialize_PointerTods__SignatureMethodType(soap, &a->SignatureMethod);
	if (a->Reference_)
	{	int i;
		for (i = 0; i < (int)a->__sizeReference; i++)
		{
			soap_embedded(soap, a->Reference_ + i, SOAP_TYPE_ds__ReferenceType);
			soap_serialize_ds__ReferenceType(soap, a->Reference_ + i);
		}
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__SignedInfoType(struct soap *soap, const char *tag, int id, const struct ds__SignedInfoType *a, const char *type)
{
	if (a->Id)
		soap_set_attr(soap, "Id", soap_string2s(soap, a->Id), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ds__SignedInfoType), type))
		return soap->error;
	if (!a->CanonicalizationMethod)
	{	if (soap_element_empty(soap, "ds:CanonicalizationMethod"))
			return soap->error;
	}
	else
	if (soap_out_PointerTods__CanonicalizationMethodType(soap, "ds:CanonicalizationMethod", -1, &a->CanonicalizationMethod, ""))
		return soap->error;
	if (!a->SignatureMethod)
	{	if (soap_element_empty(soap, "ds:SignatureMethod"))
			return soap->error;
	}
	else
	if (soap_out_PointerTods__SignatureMethodType(soap, "ds:SignatureMethod", -1, &a->SignatureMethod, ""))
		return soap->error;
	if (a->Reference_)
	{	int i;
		for (i = 0; i < (int)a->__sizeReference; i++)
			if (soap_out_ds__ReferenceType(soap, "ds:Reference", -1, a->Reference_ + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ds__SignedInfoType * SOAP_FMAC4 soap_in_ds__SignedInfoType(struct soap *soap, const char *tag, struct ds__SignedInfoType *a, const char *type)
{
	size_t soap_flag_CanonicalizationMethod = 1;
	size_t soap_flag_SignatureMethod = 1;
	struct soap_blist *soap_blist_Reference_ = NULL;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ds__SignedInfoType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ds__SignedInfoType, sizeof(struct ds__SignedInfoType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ds__SignedInfoType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "Id", 1, 0), &a->Id))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CanonicalizationMethod && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTods__CanonicalizationMethodType(soap, "ds:CanonicalizationMethod", &a->CanonicalizationMethod, "ds:CanonicalizationMethodType"))
				{	soap_flag_CanonicalizationMethod--;
					continue;
				}
			}
			if (soap_flag_SignatureMethod && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTods__SignatureMethodType(soap, "ds:SignatureMethod", &a->SignatureMethod, "ds:SignatureMethodType"))
				{	soap_flag_SignatureMethod--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "ds:Reference", 1, NULL))
			{	if (a->Reference_ == NULL)
				{	if (soap_blist_Reference_ == NULL)
						soap_blist_Reference_ = soap_alloc_block(soap);
					a->Reference_ = soap_block<struct ds__ReferenceType>::push(soap, soap_blist_Reference_);
					if (a->Reference_ == NULL)
						return NULL;
					soap_default_ds__ReferenceType(soap, a->Reference_);
				}
				soap_revert(soap);
				if (soap_in_ds__ReferenceType(soap, "ds:Reference", a->Reference_, "ds:ReferenceType"))
				{	a->__sizeReference++;
					a->Reference_ = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Reference_)
			soap_block<struct ds__ReferenceType>::pop(soap, soap_blist_Reference_);
		if (a->__sizeReference)
		{	a->Reference_ = soap_new_ds__ReferenceType(soap, a->__sizeReference);
			if (!a->Reference_)
				return NULL;
			soap_block<struct ds__ReferenceType>::save(soap, soap_blist_Reference_, a->Reference_);
		}
		else
		{	a->Reference_ = NULL;
			if (soap_blist_Reference_)
				soap_block<struct ds__ReferenceType>::end(soap, soap_blist_Reference_);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->CanonicalizationMethod || !a->SignatureMethod || a->__sizeReference < 1))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ds__SignedInfoType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ds__SignedInfoType, SOAP_TYPE_ds__SignedInfoType, sizeof(struct ds__SignedInfoType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ds__SignedInfoType * SOAP_FMAC2 soap_instantiate_ds__SignedInfoType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ds__SignedInfoType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ds__SignedInfoType *p;
	size_t k = sizeof(struct ds__SignedInfoType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ds__SignedInfoType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ds__SignedInfoType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ds__SignedInfoType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ds__SignedInfoType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__SignedInfoType(struct soap *soap, const struct ds__SignedInfoType *a, const char *tag, const char *type)
{
	if (soap_out_ds__SignedInfoType(soap, tag ? tag : "ds:SignedInfoType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ds__SignedInfoType * SOAP_FMAC4 soap_get_ds__SignedInfoType(struct soap *soap, struct ds__SignedInfoType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ds__SignedInfoType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__SignatureType(struct soap *soap, struct ds__SignatureType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->SignedInfo = NULL;
	soap_default__ds__SignatureValue(soap, &a->SignatureValue);
	a->KeyInfo = NULL;
	soap_default_string(soap, &a->Id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__SignatureType(struct soap *soap, const struct ds__SignatureType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTods__SignedInfoType(soap, &a->SignedInfo);
	soap_serialize__ds__SignatureValue(soap, (char*const*)&a->SignatureValue);
	soap_serialize_PointerTods__KeyInfoType(soap, &a->KeyInfo);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__SignatureType(struct soap *soap, const char *tag, int id, const struct ds__SignatureType *a, const char *type)
{
	if (a->Id)
		soap_set_attr(soap, "Id", soap_string2s(soap, a->Id), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ds__SignatureType), type))
		return soap->error;
	if (soap_out_PointerTods__SignedInfoType(soap, "ds:SignedInfo", -1, &a->SignedInfo, ""))
		return soap->error;
	if (soap_out__ds__SignatureValue(soap, "ds:SignatureValue", -1, (char*const*)&a->SignatureValue, ""))
		return soap->error;
	if (soap_out_PointerTods__KeyInfoType(soap, "ds:KeyInfo", -1, &a->KeyInfo, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ds__SignatureType * SOAP_FMAC4 soap_in_ds__SignatureType(struct soap *soap, const char *tag, struct ds__SignatureType *a, const char *type)
{
	size_t soap_flag_SignedInfo = 1;
	size_t soap_flag_SignatureValue = 1;
	size_t soap_flag_KeyInfo = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ds__SignatureType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ds__SignatureType, sizeof(struct ds__SignatureType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ds__SignatureType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "Id", 1, 0), &a->Id))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SignedInfo && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTods__SignedInfoType(soap, "ds:SignedInfo", &a->SignedInfo, "ds:SignedInfoType"))
				{	soap_flag_SignedInfo--;
					continue;
				}
			}
			if (soap_flag_SignatureValue && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__ds__SignatureValue(soap, "ds:SignatureValue", (char**)&a->SignatureValue, ""))
				{	soap_flag_SignatureValue--;
					continue;
				}
			}
			if (soap_flag_KeyInfo && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTods__KeyInfoType(soap, "ds:KeyInfo", &a->KeyInfo, "ds:KeyInfoType"))
				{	soap_flag_KeyInfo--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ds__SignatureType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ds__SignatureType, SOAP_TYPE_ds__SignatureType, sizeof(struct ds__SignatureType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ds__SignatureType * SOAP_FMAC2 soap_instantiate_ds__SignatureType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ds__SignatureType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ds__SignatureType *p;
	size_t k = sizeof(struct ds__SignatureType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ds__SignatureType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ds__SignatureType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ds__SignatureType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ds__SignatureType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__SignatureType(struct soap *soap, const struct ds__SignatureType *a, const char *tag, const char *type)
{
	if (soap_out_ds__SignatureType(soap, tag ? tag : "ds:SignatureType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ds__SignatureType * SOAP_FMAC4 soap_get_ds__SignatureType(struct soap *soap, struct ds__SignatureType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ds__SignatureType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ds__X509DataType(struct soap *soap, struct ds__X509DataType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__size_X509DataType_sequence = 0;
	a->__X509DataType_sequence = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ds__X509DataType(struct soap *soap, const struct ds__X509DataType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (a->__X509DataType_sequence)
	{	int i;
		for (i = 0; i < (int)a->__size_X509DataType_sequence; i++)
		{
			soap_serialize___ds__X509DataType_sequence(soap, a->__X509DataType_sequence + i);
		}
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ds__X509DataType(struct soap *soap, const char *tag, int id, const struct ds__X509DataType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ds__X509DataType), type))
		return soap->error;
	if (a->__X509DataType_sequence)
	{	int i;
		for (i = 0; i < (int)a->__size_X509DataType_sequence; i++)
			if (soap_out___ds__X509DataType_sequence(soap, "-X509DataType-sequence", -1, a->__X509DataType_sequence + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ds__X509DataType * SOAP_FMAC4 soap_in_ds__X509DataType(struct soap *soap, const char *tag, struct ds__X509DataType *a, const char *type)
{
	struct soap_blist *soap_blist___X509DataType_sequence = NULL;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ds__X509DataType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ds__X509DataType, sizeof(struct ds__X509DataType), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ds__X509DataType(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_peek_element(soap))
			{	if (a->__X509DataType_sequence == NULL)
				{	if (soap_blist___X509DataType_sequence == NULL)
						soap_blist___X509DataType_sequence = soap_alloc_block(soap);
					a->__X509DataType_sequence = soap_block<struct __ds__X509DataType_sequence>::push(soap, soap_blist___X509DataType_sequence);
					if (a->__X509DataType_sequence == NULL)
						return NULL;
					soap_default___ds__X509DataType_sequence(soap, a->__X509DataType_sequence);
				}
				if (soap_in___ds__X509DataType_sequence(soap, "-X509DataType-sequence", a->__X509DataType_sequence, "-ds:X509DataType-sequence"))
				{	a->__size_X509DataType_sequence++;
					a->__X509DataType_sequence = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->__X509DataType_sequence)
			soap_block<struct __ds__X509DataType_sequence>::pop(soap, soap_blist___X509DataType_sequence);
		if (a->__size_X509DataType_sequence)
		{	a->__X509DataType_sequence = soap_new___ds__X509DataType_sequence(soap, a->__size_X509DataType_sequence);
			if (!a->__X509DataType_sequence)
				return NULL;
			soap_block<struct __ds__X509DataType_sequence>::save(soap, soap_blist___X509DataType_sequence, a->__X509DataType_sequence);
		}
		else
		{	a->__X509DataType_sequence = NULL;
			if (soap_blist___X509DataType_sequence)
				soap_block<struct __ds__X509DataType_sequence>::end(soap, soap_blist___X509DataType_sequence);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ds__X509DataType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ds__X509DataType, SOAP_TYPE_ds__X509DataType, sizeof(struct ds__X509DataType), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ds__X509DataType * SOAP_FMAC2 soap_instantiate_ds__X509DataType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ds__X509DataType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ds__X509DataType *p;
	size_t k = sizeof(struct ds__X509DataType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ds__X509DataType, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ds__X509DataType);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ds__X509DataType, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ds__X509DataType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ds__X509DataType(struct soap *soap, const struct ds__X509DataType *a, const char *tag, const char *type)
{
	if (soap_out_ds__X509DataType(soap, tag ? tag : "ds:X509DataType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ds__X509DataType * SOAP_FMAC4 soap_get_ds__X509DataType(struct soap *soap, struct ds__X509DataType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ds__X509DataType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__SecurityTokenReference(struct soap *soap, struct _wsse__SecurityTokenReference *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Reference = NULL;
	a->KeyIdentifier = NULL;
	a->Embedded = NULL;
	a->ds__X509Data = NULL;
	soap_default_string(soap, &a->wsu__Id);
	soap_default_string(soap, &a->wsc__Instance);
	soap_default_string(soap, &a->Usage);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__SecurityTokenReference(struct soap *soap, const struct _wsse__SecurityTokenReference *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_wsse__Reference(soap, &a->Reference);
	soap_serialize_PointerTo_wsse__KeyIdentifier(soap, &a->KeyIdentifier);
	soap_serialize_PointerTo_wsse__Embedded(soap, &a->Embedded);
	soap_serialize_PointerTods__X509DataType(soap, &a->ds__X509Data);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__SecurityTokenReference(struct soap *soap, const char *tag, int id, const struct _wsse__SecurityTokenReference *a, const char *type)
{
	if (a->wsu__Id)
		soap_set_attr(soap, "wsu:Id", soap_string2s(soap, a->wsu__Id), 1);
	if (a->wsc__Instance)
		soap_set_attr(soap, "wsc:Instance", soap_string2s(soap, a->wsc__Instance), 1);
	if (a->Usage)
		soap_set_attr(soap, "Usage", soap_string2s(soap, a->Usage), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsse__SecurityTokenReference), type))
		return soap->error;
	if (soap_out_PointerTo_wsse__Reference(soap, "wsse:Reference", -1, &a->Reference, ""))
		return soap->error;
	if (soap_out_PointerTo_wsse__KeyIdentifier(soap, "wsse:KeyIdentifier", -1, &a->KeyIdentifier, ""))
		return soap->error;
	if (soap_out_PointerTo_wsse__Embedded(soap, "wsse:Embedded", -1, &a->Embedded, ""))
		return soap->error;
	if (soap_out_PointerTods__X509DataType(soap, "ds:X509Data", -1, &a->ds__X509Data, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct _wsse__SecurityTokenReference * SOAP_FMAC4 soap_in__wsse__SecurityTokenReference(struct soap *soap, const char *tag, struct _wsse__SecurityTokenReference *a, const char *type)
{
	size_t soap_flag_Reference = 1;
	size_t soap_flag_KeyIdentifier = 1;
	size_t soap_flag_Embedded = 1;
	size_t soap_flag_ds__X509Data = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct _wsse__SecurityTokenReference *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__wsse__SecurityTokenReference, sizeof(struct _wsse__SecurityTokenReference), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default__wsse__SecurityTokenReference(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "wsu:Id", 1, 0), &a->wsu__Id))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "wsc:Instance", 1, 0), &a->wsc__Instance))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "Usage", 1, 0), &a->Usage))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Reference && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_wsse__Reference(soap, "wsse:Reference", &a->Reference, ""))
				{	soap_flag_Reference--;
					continue;
				}
			}
			if (soap_flag_KeyIdentifier && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_wsse__KeyIdentifier(soap, "wsse:KeyIdentifier", &a->KeyIdentifier, ""))
				{	soap_flag_KeyIdentifier--;
					continue;
				}
			}
			if (soap_flag_Embedded && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_wsse__Embedded(soap, "wsse:Embedded", &a->Embedded, ""))
				{	soap_flag_Embedded--;
					continue;
				}
			}
			if (soap_flag_ds__X509Data && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTods__X509DataType(soap, "ds:X509Data", &a->ds__X509Data, "ds:X509DataType"))
				{	soap_flag_ds__X509Data--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct _wsse__SecurityTokenReference *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsse__SecurityTokenReference, SOAP_TYPE__wsse__SecurityTokenReference, sizeof(struct _wsse__SecurityTokenReference), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct _wsse__SecurityTokenReference * SOAP_FMAC2 soap_instantiate__wsse__SecurityTokenReference(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsse__SecurityTokenReference(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct _wsse__SecurityTokenReference *p;
	size_t k = sizeof(struct _wsse__SecurityTokenReference);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__wsse__SecurityTokenReference, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct _wsse__SecurityTokenReference);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct _wsse__SecurityTokenReference, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct _wsse__SecurityTokenReference location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__SecurityTokenReference(struct soap *soap, const struct _wsse__SecurityTokenReference *a, const char *tag, const char *type)
{
	if (soap_out__wsse__SecurityTokenReference(soap, tag ? tag : "wsse:SecurityTokenReference", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct _wsse__SecurityTokenReference * SOAP_FMAC4 soap_get__wsse__SecurityTokenReference(struct soap *soap, struct _wsse__SecurityTokenReference *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsse__SecurityTokenReference(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__KeyIdentifier(struct soap *soap, struct _wsse__KeyIdentifier *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->__item);
	soap_default_string(soap, &a->wsu__Id);
	soap_default_string(soap, &a->ValueType);
	soap_default_string(soap, &a->EncodingType);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__KeyIdentifier(struct soap *soap, const struct _wsse__KeyIdentifier *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->__item);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__KeyIdentifier(struct soap *soap, const char *tag, int id, const struct _wsse__KeyIdentifier *a, const char *type)
{
	if (a->wsu__Id)
		soap_set_attr(soap, "wsu:Id", soap_string2s(soap, a->wsu__Id), 1);
	if (a->ValueType)
		soap_set_attr(soap, "ValueType", soap_string2s(soap, a->ValueType), 1);
	if (a->EncodingType)
		soap_set_attr(soap, "EncodingType", soap_string2s(soap, a->EncodingType), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_string(soap, tag, id, (char*const*)&a->__item, "");
}

SOAP_FMAC3 struct _wsse__KeyIdentifier * SOAP_FMAC4 soap_in__wsse__KeyIdentifier(struct soap *soap, const char *tag, struct _wsse__KeyIdentifier *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (struct _wsse__KeyIdentifier *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__wsse__KeyIdentifier, sizeof(struct _wsse__KeyIdentifier), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
		return NULL;
	soap_revert(soap);
	*soap->id = '\0';
	soap_default__wsse__KeyIdentifier(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "wsu:Id", 1, 0), &a->wsu__Id))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "ValueType", 1, 0), &a->ValueType))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "EncodingType", 1, 0), &a->EncodingType))
		return NULL;
	if (!soap_in_string(soap, tag, (char**)&a->__item, ""))
		return NULL;
	return a;
}

SOAP_FMAC1 struct _wsse__KeyIdentifier * SOAP_FMAC2 soap_instantiate__wsse__KeyIdentifier(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsse__KeyIdentifier(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct _wsse__KeyIdentifier *p;
	size_t k = sizeof(struct _wsse__KeyIdentifier);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__wsse__KeyIdentifier, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct _wsse__KeyIdentifier);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct _wsse__KeyIdentifier, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct _wsse__KeyIdentifier location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__KeyIdentifier(struct soap *soap, const struct _wsse__KeyIdentifier *a, const char *tag, const char *type)
{
	if (soap_out__wsse__KeyIdentifier(soap, tag ? tag : "wsse:KeyIdentifier", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct _wsse__KeyIdentifier * SOAP_FMAC4 soap_get__wsse__KeyIdentifier(struct soap *soap, struct _wsse__KeyIdentifier *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsse__KeyIdentifier(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__Embedded(struct soap *soap, struct _wsse__Embedded *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->wsu__Id);
	soap_default_string(soap, &a->ValueType);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__Embedded(struct soap *soap, const struct _wsse__Embedded *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__Embedded(struct soap *soap, const char *tag, int id, const struct _wsse__Embedded *a, const char *type)
{
	if (a->wsu__Id)
		soap_set_attr(soap, "wsu:Id", soap_string2s(soap, a->wsu__Id), 1);
	if (a->ValueType)
		soap_set_attr(soap, "ValueType", soap_string2s(soap, a->ValueType), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsse__Embedded), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct _wsse__Embedded * SOAP_FMAC4 soap_in__wsse__Embedded(struct soap *soap, const char *tag, struct _wsse__Embedded *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct _wsse__Embedded *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__wsse__Embedded, sizeof(struct _wsse__Embedded), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default__wsse__Embedded(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "wsu:Id", 1, 0), &a->wsu__Id))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "ValueType", 1, 0), &a->ValueType))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct _wsse__Embedded *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsse__Embedded, SOAP_TYPE__wsse__Embedded, sizeof(struct _wsse__Embedded), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct _wsse__Embedded * SOAP_FMAC2 soap_instantiate__wsse__Embedded(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsse__Embedded(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct _wsse__Embedded *p;
	size_t k = sizeof(struct _wsse__Embedded);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__wsse__Embedded, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct _wsse__Embedded);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct _wsse__Embedded, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct _wsse__Embedded location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__Embedded(struct soap *soap, const struct _wsse__Embedded *a, const char *tag, const char *type)
{
	if (soap_out__wsse__Embedded(soap, tag ? tag : "wsse:Embedded", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct _wsse__Embedded * SOAP_FMAC4 soap_get__wsse__Embedded(struct soap *soap, struct _wsse__Embedded *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsse__Embedded(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__Reference(struct soap *soap, struct _wsse__Reference *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->URI);
	soap_default_string(soap, &a->ValueType);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__Reference(struct soap *soap, const struct _wsse__Reference *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__Reference(struct soap *soap, const char *tag, int id, const struct _wsse__Reference *a, const char *type)
{
	if (a->URI)
		soap_set_attr(soap, "URI", soap_string2s(soap, a->URI), 1);
	if (a->ValueType)
		soap_set_attr(soap, "ValueType", soap_string2s(soap, a->ValueType), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsse__Reference), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct _wsse__Reference * SOAP_FMAC4 soap_in__wsse__Reference(struct soap *soap, const char *tag, struct _wsse__Reference *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct _wsse__Reference *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__wsse__Reference, sizeof(struct _wsse__Reference), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default__wsse__Reference(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "URI", 1, 0), &a->URI))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "ValueType", 1, 0), &a->ValueType))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct _wsse__Reference *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsse__Reference, SOAP_TYPE__wsse__Reference, sizeof(struct _wsse__Reference), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct _wsse__Reference * SOAP_FMAC2 soap_instantiate__wsse__Reference(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsse__Reference(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct _wsse__Reference *p;
	size_t k = sizeof(struct _wsse__Reference);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__wsse__Reference, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct _wsse__Reference);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct _wsse__Reference, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct _wsse__Reference location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__Reference(struct soap *soap, const struct _wsse__Reference *a, const char *tag, const char *type)
{
	if (soap_out__wsse__Reference(soap, tag ? tag : "wsse:Reference", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct _wsse__Reference * SOAP_FMAC4 soap_get__wsse__Reference(struct soap *soap, struct _wsse__Reference *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsse__Reference(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__BinarySecurityToken(struct soap *soap, struct _wsse__BinarySecurityToken *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->__item);
	soap_default_string(soap, &a->wsu__Id);
	soap_default_string(soap, &a->ValueType);
	soap_default_string(soap, &a->EncodingType);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__BinarySecurityToken(struct soap *soap, const struct _wsse__BinarySecurityToken *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->__item);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__BinarySecurityToken(struct soap *soap, const char *tag, int id, const struct _wsse__BinarySecurityToken *a, const char *type)
{
	if (a->wsu__Id)
		soap_set_attr(soap, "wsu:Id", soap_string2s(soap, a->wsu__Id), 1);
	if (a->ValueType)
		soap_set_attr(soap, "ValueType", soap_string2s(soap, a->ValueType), 1);
	if (a->EncodingType)
		soap_set_attr(soap, "EncodingType", soap_string2s(soap, a->EncodingType), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_string(soap, tag, id, (char*const*)&a->__item, "");
}

SOAP_FMAC3 struct _wsse__BinarySecurityToken * SOAP_FMAC4 soap_in__wsse__BinarySecurityToken(struct soap *soap, const char *tag, struct _wsse__BinarySecurityToken *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (struct _wsse__BinarySecurityToken *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__wsse__BinarySecurityToken, sizeof(struct _wsse__BinarySecurityToken), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
		return NULL;
	soap_revert(soap);
	*soap->id = '\0';
	soap_default__wsse__BinarySecurityToken(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "wsu:Id", 1, 0), &a->wsu__Id))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "ValueType", 1, 0), &a->ValueType))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "EncodingType", 1, 0), &a->EncodingType))
		return NULL;
	if (!soap_in_string(soap, tag, (char**)&a->__item, ""))
		return NULL;
	return a;
}

SOAP_FMAC1 struct _wsse__BinarySecurityToken * SOAP_FMAC2 soap_instantiate__wsse__BinarySecurityToken(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsse__BinarySecurityToken(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct _wsse__BinarySecurityToken *p;
	size_t k = sizeof(struct _wsse__BinarySecurityToken);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__wsse__BinarySecurityToken, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct _wsse__BinarySecurityToken);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct _wsse__BinarySecurityToken, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct _wsse__BinarySecurityToken location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__BinarySecurityToken(struct soap *soap, const struct _wsse__BinarySecurityToken *a, const char *tag, const char *type)
{
	if (soap_out__wsse__BinarySecurityToken(soap, tag ? tag : "wsse:BinarySecurityToken", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct _wsse__BinarySecurityToken * SOAP_FMAC4 soap_get__wsse__BinarySecurityToken(struct soap *soap, struct _wsse__BinarySecurityToken *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsse__BinarySecurityToken(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__Password(struct soap *soap, struct _wsse__Password *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->__item);
	soap_default_string(soap, &a->Type);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__Password(struct soap *soap, const struct _wsse__Password *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->__item);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__Password(struct soap *soap, const char *tag, int id, const struct _wsse__Password *a, const char *type)
{
	if (a->Type)
		soap_set_attr(soap, "Type", soap_string2s(soap, a->Type), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_string(soap, tag, id, (char*const*)&a->__item, "");
}

SOAP_FMAC3 struct _wsse__Password * SOAP_FMAC4 soap_in__wsse__Password(struct soap *soap, const char *tag, struct _wsse__Password *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (struct _wsse__Password *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__wsse__Password, sizeof(struct _wsse__Password), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
		return NULL;
	soap_revert(soap);
	*soap->id = '\0';
	soap_default__wsse__Password(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "Type", 1, 0), &a->Type))
		return NULL;
	if (!soap_in_string(soap, tag, (char**)&a->__item, ""))
		return NULL;
	return a;
}

SOAP_FMAC1 struct _wsse__Password * SOAP_FMAC2 soap_instantiate__wsse__Password(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsse__Password(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct _wsse__Password *p;
	size_t k = sizeof(struct _wsse__Password);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__wsse__Password, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct _wsse__Password);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct _wsse__Password, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct _wsse__Password location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__Password(struct soap *soap, const struct _wsse__Password *a, const char *tag, const char *type)
{
	if (soap_out__wsse__Password(soap, tag ? tag : "wsse:Password", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct _wsse__Password * SOAP_FMAC4 soap_get__wsse__Password(struct soap *soap, struct _wsse__Password *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsse__Password(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsse__UsernameToken(struct soap *soap, struct _wsse__UsernameToken *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->Username);
	a->Password = NULL;
	a->Nonce = NULL;
	soap_default_string(soap, &a->wsu__Created);
	soap_default_string(soap, &a->wsu__Id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsse__UsernameToken(struct soap *soap, const struct _wsse__UsernameToken *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->Username);
	soap_serialize_PointerTo_wsse__Password(soap, &a->Password);
	soap_serialize_PointerTowsse__EncodedString(soap, &a->Nonce);
	soap_serialize_string(soap, (char*const*)&a->wsu__Created);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsse__UsernameToken(struct soap *soap, const char *tag, int id, const struct _wsse__UsernameToken *a, const char *type)
{
	if (a->wsu__Id)
		soap_set_attr(soap, "wsu:Id", soap_string2s(soap, a->wsu__Id), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsse__UsernameToken), type))
		return soap->error;
	if (soap_out_string(soap, "wsse:Username", -1, (char*const*)&a->Username, ""))
		return soap->error;
	if (soap_out_PointerTo_wsse__Password(soap, "wsse:Password", -1, &a->Password, ""))
		return soap->error;
	if (soap_out_PointerTowsse__EncodedString(soap, "wsse:Nonce", -1, &a->Nonce, ""))
		return soap->error;
	if (soap_out_string(soap, "wsu:Created", -1, (char*const*)&a->wsu__Created, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct _wsse__UsernameToken * SOAP_FMAC4 soap_in__wsse__UsernameToken(struct soap *soap, const char *tag, struct _wsse__UsernameToken *a, const char *type)
{
	size_t soap_flag_Username = 1;
	size_t soap_flag_Password = 1;
	size_t soap_flag_Nonce = 1;
	size_t soap_flag_wsu__Created = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct _wsse__UsernameToken *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__wsse__UsernameToken, sizeof(struct _wsse__UsernameToken), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default__wsse__UsernameToken(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "wsu:Id", 1, 0), &a->wsu__Id))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Username && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "wsse:Username", (char**)&a->Username, "xsd:string"))
				{	soap_flag_Username--;
					continue;
				}
			}
			if (soap_flag_Password && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_wsse__Password(soap, "wsse:Password", &a->Password, ""))
				{	soap_flag_Password--;
					continue;
				}
			}
			if (soap_flag_Nonce && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTowsse__EncodedString(soap, "wsse:Nonce", &a->Nonce, "wsse:EncodedString"))
				{	soap_flag_Nonce--;
					continue;
				}
			}
			if (soap_flag_wsu__Created && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "wsu:Created", (char**)&a->wsu__Created, "xsd:string"))
				{	soap_flag_wsu__Created--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct _wsse__UsernameToken *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsse__UsernameToken, SOAP_TYPE__wsse__UsernameToken, sizeof(struct _wsse__UsernameToken), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct _wsse__UsernameToken * SOAP_FMAC2 soap_instantiate__wsse__UsernameToken(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsse__UsernameToken(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct _wsse__UsernameToken *p;
	size_t k = sizeof(struct _wsse__UsernameToken);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__wsse__UsernameToken, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct _wsse__UsernameToken);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct _wsse__UsernameToken, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct _wsse__UsernameToken location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsse__UsernameToken(struct soap *soap, const struct _wsse__UsernameToken *a, const char *tag, const char *type)
{
	if (soap_out__wsse__UsernameToken(soap, tag ? tag : "wsse:UsernameToken", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct _wsse__UsernameToken * SOAP_FMAC4 soap_get__wsse__UsernameToken(struct soap *soap, struct _wsse__UsernameToken *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsse__UsernameToken(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsse__EncodedString(struct soap *soap, struct wsse__EncodedString *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->__item);
	soap_default_string(soap, &a->EncodingType);
	soap_default_string(soap, &a->wsu__Id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsse__EncodedString(struct soap *soap, const struct wsse__EncodedString *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->__item);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsse__EncodedString(struct soap *soap, const char *tag, int id, const struct wsse__EncodedString *a, const char *type)
{
	if (a->EncodingType)
		soap_set_attr(soap, "EncodingType", soap_string2s(soap, a->EncodingType), 1);
	if (a->wsu__Id)
		soap_set_attr(soap, "wsu:Id", soap_string2s(soap, a->wsu__Id), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_string(soap, tag, id, (char*const*)&a->__item, "");
}

SOAP_FMAC3 struct wsse__EncodedString * SOAP_FMAC4 soap_in_wsse__EncodedString(struct soap *soap, const char *tag, struct wsse__EncodedString *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (struct wsse__EncodedString *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_wsse__EncodedString, sizeof(struct wsse__EncodedString), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
		return NULL;
	soap_revert(soap);
	*soap->id = '\0';
	soap_default_wsse__EncodedString(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "EncodingType", 1, 0), &a->EncodingType))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "wsu:Id", 1, 0), &a->wsu__Id))
		return NULL;
	if (!soap_in_string(soap, tag, (char**)&a->__item, "wsse:EncodedString"))
		return NULL;
	return a;
}

SOAP_FMAC1 struct wsse__EncodedString * SOAP_FMAC2 soap_instantiate_wsse__EncodedString(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsse__EncodedString(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct wsse__EncodedString *p;
	size_t k = sizeof(struct wsse__EncodedString);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_wsse__EncodedString, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct wsse__EncodedString);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct wsse__EncodedString, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct wsse__EncodedString location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsse__EncodedString(struct soap *soap, const struct wsse__EncodedString *a, const char *tag, const char *type)
{
	if (soap_out_wsse__EncodedString(soap, tag ? tag : "wsse:EncodedString", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct wsse__EncodedString * SOAP_FMAC4 soap_get_wsse__EncodedString(struct soap *soap, struct wsse__EncodedString *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsse__EncodedString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__wsu__Timestamp(struct soap *soap, struct _wsu__Timestamp *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->wsu__Id);
	soap_default_string(soap, &a->Created);
	soap_default_string(soap, &a->Expires);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsu__Timestamp(struct soap *soap, const struct _wsu__Timestamp *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->Created);
	soap_serialize_string(soap, (char*const*)&a->Expires);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsu__Timestamp(struct soap *soap, const char *tag, int id, const struct _wsu__Timestamp *a, const char *type)
{
	if (a->wsu__Id)
		soap_set_attr(soap, "wsu:Id", soap_string2s(soap, a->wsu__Id), 1);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__wsu__Timestamp), type))
		return soap->error;
	if (soap_out_string(soap, "wsu:Created", -1, (char*const*)&a->Created, ""))
		return soap->error;
	if (soap_out_string(soap, "wsu:Expires", -1, (char*const*)&a->Expires, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct _wsu__Timestamp * SOAP_FMAC4 soap_in__wsu__Timestamp(struct soap *soap, const char *tag, struct _wsu__Timestamp *a, const char *type)
{
	size_t soap_flag_Created = 1;
	size_t soap_flag_Expires = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct _wsu__Timestamp *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__wsu__Timestamp, sizeof(struct _wsu__Timestamp), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default__wsu__Timestamp(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "wsu:Id", 1, 0), &a->wsu__Id))
		return NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Created && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "wsu:Created", (char**)&a->Created, "xsd:string"))
				{	soap_flag_Created--;
					continue;
				}
			}
			if (soap_flag_Expires && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "wsu:Expires", (char**)&a->Expires, "xsd:string"))
				{	soap_flag_Expires--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct _wsu__Timestamp *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__wsu__Timestamp, SOAP_TYPE__wsu__Timestamp, sizeof(struct _wsu__Timestamp), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct _wsu__Timestamp * SOAP_FMAC2 soap_instantiate__wsu__Timestamp(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__wsu__Timestamp(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct _wsu__Timestamp *p;
	size_t k = sizeof(struct _wsu__Timestamp);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__wsu__Timestamp, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct _wsu__Timestamp);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct _wsu__Timestamp, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct _wsu__Timestamp location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsu__Timestamp(struct soap *soap, const struct _wsu__Timestamp *a, const char *tag, const char *type)
{
	if (soap_out__wsu__Timestamp(soap, tag ? tag : "wsu:Timestamp", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct _wsu__Timestamp * SOAP_FMAC4 soap_get__wsu__Timestamp(struct soap *soap, struct _wsu__Timestamp *p, const char *tag, const char *type)
{
	if ((p = soap_in__wsu__Timestamp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__wsc__union_DerivedKeyTokenType(struct soap *soap, int choice, const union _wsc__union_DerivedKeyTokenType *a)
{
	(void)soap; (void)choice; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	switch (choice)
	{
	case SOAP_UNION__wsc__union_DerivedKeyTokenType_Generation:
		soap_embedded(soap, &a->Generation, SOAP_TYPE_ULONG64);
		break;
	case SOAP_UNION__wsc__union_DerivedKeyTokenType_Offset:
		soap_embedded(soap, &a->Offset, SOAP_TYPE_ULONG64);
		break;
	default:
		break;
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsc__union_DerivedKeyTokenType(struct soap *soap, int choice, const union _wsc__union_DerivedKeyTokenType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	switch (choice)
	{
	case SOAP_UNION__wsc__union_DerivedKeyTokenType_Generation:
		return soap_out_ULONG64(soap, "wsc:Generation", -1, &a->Generation, "");
	case SOAP_UNION__wsc__union_DerivedKeyTokenType_Offset:
		return soap_out_ULONG64(soap, "wsc:Offset", -1, &a->Offset, "");
	default:
		break;
	}
	return SOAP_OK;
}

SOAP_FMAC3 union _wsc__union_DerivedKeyTokenType * SOAP_FMAC4 soap_in__wsc__union_DerivedKeyTokenType(struct soap *soap, int *choice, union _wsc__union_DerivedKeyTokenType *a)
{
	(void)a; /* appease -Wall -Werror */	soap->error = SOAP_TAG_MISMATCH;
	if (soap->error == SOAP_TAG_MISMATCH && soap_in_ULONG64(soap, "wsc:Generation", &a->Generation, "xsd:unsignedLong"))
	{	*choice = SOAP_UNION__wsc__union_DerivedKeyTokenType_Generation;
		return a;
	}
	if (soap->error == SOAP_TAG_MISMATCH && soap_in_ULONG64(soap, "wsc:Offset", &a->Offset, "xsd:unsignedLong"))
	{	*choice = SOAP_UNION__wsc__union_DerivedKeyTokenType_Offset;
		return a;
	}
	*choice = -1;
	if (!soap->error)
		soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__xenc__union_ReferenceList(struct soap *soap, int choice, const union _xenc__union_ReferenceList *a)
{
	(void)soap; (void)choice; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	switch (choice)
	{
	case SOAP_UNION__xenc__union_ReferenceList_DataReference:
		soap_serialize_PointerToxenc__ReferenceType(soap, &a->DataReference);
		break;
	case SOAP_UNION__xenc__union_ReferenceList_KeyReference:
		soap_serialize_PointerToxenc__ReferenceType(soap, &a->KeyReference);
		break;
	default:
		break;
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__xenc__union_ReferenceList(struct soap *soap, int choice, const union _xenc__union_ReferenceList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	switch (choice)
	{
	case SOAP_UNION__xenc__union_ReferenceList_DataReference:
		return soap_out_PointerToxenc__ReferenceType(soap, "xenc:DataReference", -1, &a->DataReference, "");
	case SOAP_UNION__xenc__union_ReferenceList_KeyReference:
		return soap_out_PointerToxenc__ReferenceType(soap, "xenc:KeyReference", -1, &a->KeyReference, "");
	default:
		break;
	}
	return SOAP_OK;
}

SOAP_FMAC3 union _xenc__union_ReferenceList * SOAP_FMAC4 soap_in__xenc__union_ReferenceList(struct soap *soap, int *choice, union _xenc__union_ReferenceList *a)
{
	(void)a; /* appease -Wall -Werror */	soap->error = SOAP_TAG_MISMATCH;
	a->DataReference = NULL;
	if (soap->error == SOAP_TAG_MISMATCH && soap_in_PointerToxenc__ReferenceType(soap, "xenc:DataReference", &a->DataReference, "xenc:ReferenceType"))
	{	*choice = SOAP_UNION__xenc__union_ReferenceList_DataReference;
		return a;
	}
	a->KeyReference = NULL;
	if (soap->error == SOAP_TAG_MISMATCH && soap_in_PointerToxenc__ReferenceType(soap, "xenc:KeyReference", &a->KeyReference, "xenc:ReferenceType"))
	{	*choice = SOAP_UNION__xenc__union_ReferenceList_KeyReference;
		return a;
	}
	*choice = -1;
	if (!soap->error)
		soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__xenc__union_CipherReferenceType(struct soap *soap, int choice, const union _xenc__union_CipherReferenceType *a)
{
	(void)soap; (void)choice; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	switch (choice)
	{
	case SOAP_UNION__xenc__union_CipherReferenceType_Transforms:
		soap_serialize_PointerToxenc__TransformsType(soap, &a->Transforms);
		break;
	default:
		break;
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__xenc__union_CipherReferenceType(struct soap *soap, int choice, const union _xenc__union_CipherReferenceType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	switch (choice)
	{
	case SOAP_UNION__xenc__union_CipherReferenceType_Transforms:
		return soap_out_PointerToxenc__TransformsType(soap, "xenc:Transforms", -1, &a->Transforms, "");
	default:
		break;
	}
	return SOAP_OK;
}

SOAP_FMAC3 union _xenc__union_CipherReferenceType * SOAP_FMAC4 soap_in__xenc__union_CipherReferenceType(struct soap *soap, int *choice, union _xenc__union_CipherReferenceType *a)
{
	(void)a; /* appease -Wall -Werror */	soap->error = SOAP_TAG_MISMATCH;
	a->Transforms = NULL;
	if (soap->error == SOAP_TAG_MISMATCH && soap_in_PointerToxenc__TransformsType(soap, "xenc:Transforms", &a->Transforms, "xenc:TransformsType"))
	{	*choice = SOAP_UNION__xenc__union_CipherReferenceType_Transforms;
		return a;
	}
	*choice = 0;
	if (!soap->error)
		soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__xenc__union_CipherDataType(struct soap *soap, int choice, const union _xenc__union_CipherDataType *a)
{
	(void)soap; (void)choice; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	switch (choice)
	{
	case SOAP_UNION__xenc__union_CipherDataType_CipherValue:
		soap_serialize_string(soap, &a->CipherValue);
		break;
	case SOAP_UNION__xenc__union_CipherDataType_CipherReference:
		soap_serialize_PointerToxenc__CipherReferenceType(soap, &a->CipherReference);
		break;
	default:
		break;
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__xenc__union_CipherDataType(struct soap *soap, int choice, const union _xenc__union_CipherDataType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	switch (choice)
	{
	case SOAP_UNION__xenc__union_CipherDataType_CipherValue:
		return soap_out_string(soap, "xenc:CipherValue", -1, (char*const*)&a->CipherValue, "");
	case SOAP_UNION__xenc__union_CipherDataType_CipherReference:
		return soap_out_PointerToxenc__CipherReferenceType(soap, "xenc:CipherReference", -1, &a->CipherReference, "");
	default:
		break;
	}
	return SOAP_OK;
}

SOAP_FMAC3 union _xenc__union_CipherDataType * SOAP_FMAC4 soap_in__xenc__union_CipherDataType(struct soap *soap, int *choice, union _xenc__union_CipherDataType *a)
{
	(void)a; /* appease -Wall -Werror */	soap->error = SOAP_TAG_MISMATCH;
	a->CipherValue = NULL;
	if (soap->error == SOAP_TAG_MISMATCH && soap_in_string(soap, "xenc:CipherValue", &a->CipherValue, "xsd:string"))
	{	*choice = SOAP_UNION__xenc__union_CipherDataType_CipherValue;
		return a;
	}
	a->CipherReference = NULL;
	if (soap->error == SOAP_TAG_MISMATCH && soap_in_PointerToxenc__CipherReferenceType(soap, "xenc:CipherReference", &a->CipherReference, "xenc:CipherReferenceType"))
	{	*choice = SOAP_UNION__xenc__union_CipherDataType_CipherReference;
		return a;
	}
	*choice = -1;
	if (!soap->error)
		soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ds__union_X509DataType(struct soap *soap, int choice, const union _ds__union_X509DataType *a)
{
	(void)soap; (void)choice; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	switch (choice)
	{
	case SOAP_UNION__ds__union_X509DataType_X509IssuerSerial:
		soap_serialize_PointerTods__X509IssuerSerialType(soap, &a->X509IssuerSerial);
		break;
	case SOAP_UNION__ds__union_X509DataType_X509SKI:
		soap_serialize_string(soap, &a->X509SKI);
		break;
	case SOAP_UNION__ds__union_X509DataType_X509SubjectName:
		soap_serialize_string(soap, &a->X509SubjectName);
		break;
	case SOAP_UNION__ds__union_X509DataType_X509Certificate:
		soap_serialize_string(soap, &a->X509Certificate);
		break;
	case SOAP_UNION__ds__union_X509DataType_X509CRL:
		soap_serialize_string(soap, &a->X509CRL);
		break;
	default:
		break;
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ds__union_X509DataType(struct soap *soap, int choice, const union _ds__union_X509DataType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	switch (choice)
	{
	case SOAP_UNION__ds__union_X509DataType_X509IssuerSerial:
		return soap_out_PointerTods__X509IssuerSerialType(soap, "ds:X509IssuerSerial", -1, &a->X509IssuerSerial, "");
	case SOAP_UNION__ds__union_X509DataType_X509SKI:
		return soap_out_string(soap, "ds:X509SKI", -1, (char*const*)&a->X509SKI, "");
	case SOAP_UNION__ds__union_X509DataType_X509SubjectName:
		return soap_out_string(soap, "ds:X509SubjectName", -1, (char*const*)&a->X509SubjectName, "");
	case SOAP_UNION__ds__union_X509DataType_X509Certificate:
		return soap_out_string(soap, "ds:X509Certificate", -1, (char*const*)&a->X509Certificate, "");
	case SOAP_UNION__ds__union_X509DataType_X509CRL:
		return soap_out_string(soap, "ds:X509CRL", -1, (char*const*)&a->X509CRL, "");
	default:
		break;
	}
	return SOAP_OK;
}

SOAP_FMAC3 union _ds__union_X509DataType * SOAP_FMAC4 soap_in__ds__union_X509DataType(struct soap *soap, int *choice, union _ds__union_X509DataType *a)
{
	(void)a; /* appease -Wall -Werror */	soap->error = SOAP_TAG_MISMATCH;
	a->X509IssuerSerial = NULL;
	if (soap->error == SOAP_TAG_MISMATCH && soap_in_PointerTods__X509IssuerSerialType(soap, "ds:X509IssuerSerial", &a->X509IssuerSerial, "ds:X509IssuerSerialType"))
	{	*choice = SOAP_UNION__ds__union_X509DataType_X509IssuerSerial;
		return a;
	}
	a->X509SKI = NULL;
	if (soap->error == SOAP_TAG_MISMATCH && soap_in_string(soap, "ds:X509SKI", &a->X509SKI, "xsd:string"))
	{	*choice = SOAP_UNION__ds__union_X509DataType_X509SKI;
		return a;
	}
	a->X509SubjectName = NULL;
	if (soap->error == SOAP_TAG_MISMATCH && soap_in_string(soap, "ds:X509SubjectName", &a->X509SubjectName, "xsd:string"))
	{	*choice = SOAP_UNION__ds__union_X509DataType_X509SubjectName;
		return a;
	}
	a->X509Certificate = NULL;
	if (soap->error == SOAP_TAG_MISMATCH && soap_in_string(soap, "ds:X509Certificate", &a->X509Certificate, "xsd:string"))
	{	*choice = SOAP_UNION__ds__union_X509DataType_X509Certificate;
		return a;
	}
	a->X509CRL = NULL;
	if (soap->error == SOAP_TAG_MISMATCH && soap_in_string(soap, "ds:X509CRL", &a->X509CRL, "xsd:string"))
	{	*choice = SOAP_UNION__ds__union_X509DataType_X509CRL;
		return a;
	}
	*choice = -1;
	if (!soap->error)
		soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ds__union_KeyValueType(struct soap *soap, int choice, const union _ds__union_KeyValueType *a)
{
	(void)soap; (void)choice; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	switch (choice)
	{
	case SOAP_UNION__ds__union_KeyValueType_DSAKeyValue:
		soap_serialize_PointerTods__DSAKeyValueType(soap, &a->DSAKeyValue);
		break;
	case SOAP_UNION__ds__union_KeyValueType_RSAKeyValue:
		soap_serialize_PointerTods__RSAKeyValueType(soap, &a->RSAKeyValue);
		break;
	default:
		break;
	}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ds__union_KeyValueType(struct soap *soap, int choice, const union _ds__union_KeyValueType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	switch (choice)
	{
	case SOAP_UNION__ds__union_KeyValueType_DSAKeyValue:
		return soap_out_PointerTods__DSAKeyValueType(soap, "ds:DSAKeyValue", -1, &a->DSAKeyValue, "");
	case SOAP_UNION__ds__union_KeyValueType_RSAKeyValue:
		return soap_out_PointerTods__RSAKeyValueType(soap, "ds:RSAKeyValue", -1, &a->RSAKeyValue, "");
	default:
		break;
	}
	return SOAP_OK;
}

SOAP_FMAC3 union _ds__union_KeyValueType * SOAP_FMAC4 soap_in__ds__union_KeyValueType(struct soap *soap, int *choice, union _ds__union_KeyValueType *a)
{
	(void)a; /* appease -Wall -Werror */	soap->error = SOAP_TAG_MISMATCH;
	a->DSAKeyValue = NULL;
	if (soap->error == SOAP_TAG_MISMATCH && soap_in_PointerTods__DSAKeyValueType(soap, "ds:DSAKeyValue", &a->DSAKeyValue, "ds:DSAKeyValueType"))
	{	*choice = SOAP_UNION__ds__union_KeyValueType_DSAKeyValue;
		return a;
	}
	a->RSAKeyValue = NULL;
	if (soap->error == SOAP_TAG_MISMATCH && soap_in_PointerTods__RSAKeyValueType(soap, "ds:RSAKeyValue", &a->RSAKeyValue, "ds:RSAKeyValueType"))
	{	*choice = SOAP_UNION__ds__union_KeyValueType_RSAKeyValue;
		return a;
	}
	*choice = -1;
	if (!soap->error)
		soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	(void)soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__sendSummary(struct soap *soap, ns1__sendSummary *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__sendSummary))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__sendSummary(struct soap *soap, const char *tag, int id, ns1__sendSummary *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__sendSummary, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__sendSummary ? type : NULL);
}

SOAP_FMAC3 ns1__sendSummary ** SOAP_FMAC4 soap_in_PointerTons1__sendSummary(struct soap *soap, const char *tag, ns1__sendSummary **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__sendSummary **)soap_malloc(soap, sizeof(ns1__sendSummary *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__sendSummary *)soap_instantiate_ns1__sendSummary(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__sendSummary **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__sendSummary, sizeof(ns1__sendSummary), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__sendSummary(struct soap *soap, ns1__sendSummary *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__sendSummary(soap, tag ? tag : "ns1:sendSummary", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__sendSummary ** SOAP_FMAC4 soap_get_PointerTons1__sendSummary(struct soap *soap, ns1__sendSummary **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__sendSummary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__sendPack(struct soap *soap, ns1__sendPack *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__sendPack))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__sendPack(struct soap *soap, const char *tag, int id, ns1__sendPack *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__sendPack, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__sendPack ? type : NULL);
}

SOAP_FMAC3 ns1__sendPack ** SOAP_FMAC4 soap_in_PointerTons1__sendPack(struct soap *soap, const char *tag, ns1__sendPack **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__sendPack **)soap_malloc(soap, sizeof(ns1__sendPack *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__sendPack *)soap_instantiate_ns1__sendPack(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__sendPack **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__sendPack, sizeof(ns1__sendPack), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__sendPack(struct soap *soap, ns1__sendPack *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__sendPack(soap, tag ? tag : "ns1:sendPack", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__sendPack ** SOAP_FMAC4 soap_get_PointerTons1__sendPack(struct soap *soap, ns1__sendPack **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__sendPack(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__sendBill(struct soap *soap, ns1__sendBill *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__sendBill))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__sendBill(struct soap *soap, const char *tag, int id, ns1__sendBill *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__sendBill, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__sendBill ? type : NULL);
}

SOAP_FMAC3 ns1__sendBill ** SOAP_FMAC4 soap_in_PointerTons1__sendBill(struct soap *soap, const char *tag, ns1__sendBill **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__sendBill **)soap_malloc(soap, sizeof(ns1__sendBill *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__sendBill *)soap_instantiate_ns1__sendBill(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__sendBill **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__sendBill, sizeof(ns1__sendBill), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__sendBill(struct soap *soap, ns1__sendBill *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__sendBill(soap, tag ? tag : "ns1:sendBill", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__sendBill ** SOAP_FMAC4 soap_get_PointerTons1__sendBill(struct soap *soap, ns1__sendBill **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__sendBill(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getStatus(struct soap *soap, ns1__getStatus *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__getStatus))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getStatus(struct soap *soap, const char *tag, int id, ns1__getStatus *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__getStatus, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__getStatus ? type : NULL);
}

SOAP_FMAC3 ns1__getStatus ** SOAP_FMAC4 soap_in_PointerTons1__getStatus(struct soap *soap, const char *tag, ns1__getStatus **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__getStatus **)soap_malloc(soap, sizeof(ns1__getStatus *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__getStatus *)soap_instantiate_ns1__getStatus(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__getStatus **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__getStatus, sizeof(ns1__getStatus), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getStatus(struct soap *soap, ns1__getStatus *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__getStatus(soap, tag ? tag : "ns1:getStatus", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__getStatus ** SOAP_FMAC4 soap_get_PointerTons1__getStatus(struct soap *soap, ns1__getStatus **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__getStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__statusResponse(struct soap *soap, ns1__statusResponse *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__statusResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__statusResponse(struct soap *soap, const char *tag, int id, ns1__statusResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__statusResponse, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__statusResponse ? type : NULL);
}

SOAP_FMAC3 ns1__statusResponse ** SOAP_FMAC4 soap_in_PointerTons1__statusResponse(struct soap *soap, const char *tag, ns1__statusResponse **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__statusResponse **)soap_malloc(soap, sizeof(ns1__statusResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__statusResponse *)soap_instantiate_ns1__statusResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__statusResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__statusResponse, sizeof(ns1__statusResponse), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__statusResponse(struct soap *soap, ns1__statusResponse *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__statusResponse(soap, tag ? tag : "ns1:statusResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__statusResponse ** SOAP_FMAC4 soap_get_PointerTons1__statusResponse(struct soap *soap, ns1__statusResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__statusResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (*a)
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__base64Binary(struct soap *soap, const char *tag, int id, xsd__base64Binary *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, *a ? (*a)->__ptr : NULL, *a ? (*a)->__size : 0, type, SOAP_TYPE_xsd__base64Binary, NULL);
	if (!*a || id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_xsd__base64Binary ? type : NULL);
}

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_in_PointerToxsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (xsd__base64Binary **)soap_malloc(soap, sizeof(xsd__base64Binary *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (xsd__base64Binary *)soap_instantiate_xsd__base64Binary(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (xsd__base64Binary **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToxsd__base64Binary(soap, tag ? tag : "xsd:base64Binary", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_get_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTostd__string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_unsignedByte);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedByte, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedByte, sizeof(unsigned char), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTounsignedByte(soap, tag ? tag : "unsignedByte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__SignatureType(struct soap *soap, struct ds__SignatureType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ds__SignatureType))
		soap_serialize_ds__SignatureType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__SignatureType(struct soap *soap, const char *tag, int id, struct ds__SignatureType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ds__SignatureType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_ds__SignatureType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ds__SignatureType ** SOAP_FMAC4 soap_in_PointerTods__SignatureType(struct soap *soap, const char *tag, struct ds__SignatureType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ds__SignatureType **)soap_malloc(soap, sizeof(struct ds__SignatureType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ds__SignatureType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ds__SignatureType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ds__SignatureType, sizeof(struct ds__SignatureType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__SignatureType(struct soap *soap, struct ds__SignatureType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTods__SignatureType(soap, tag ? tag : "ds:SignatureType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ds__SignatureType ** SOAP_FMAC4 soap_get_PointerTods__SignatureType(struct soap *soap, struct ds__SignatureType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTods__SignatureType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__BinarySecurityToken(struct soap *soap, struct _wsse__BinarySecurityToken *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__wsse__BinarySecurityToken))
		soap_serialize__wsse__BinarySecurityToken(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__BinarySecurityToken(struct soap *soap, const char *tag, int id, struct _wsse__BinarySecurityToken *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__wsse__BinarySecurityToken, NULL);
	if (id < 0)
		return soap->error;
	return soap_out__wsse__BinarySecurityToken(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct _wsse__BinarySecurityToken ** SOAP_FMAC4 soap_in_PointerTo_wsse__BinarySecurityToken(struct soap *soap, const char *tag, struct _wsse__BinarySecurityToken **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct _wsse__BinarySecurityToken **)soap_malloc(soap, sizeof(struct _wsse__BinarySecurityToken *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in__wsse__BinarySecurityToken(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct _wsse__BinarySecurityToken **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__wsse__BinarySecurityToken, sizeof(struct _wsse__BinarySecurityToken), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__BinarySecurityToken(struct soap *soap, struct _wsse__BinarySecurityToken *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_wsse__BinarySecurityToken(soap, tag ? tag : "wsse:BinarySecurityToken", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct _wsse__BinarySecurityToken ** SOAP_FMAC4 soap_get_PointerTo_wsse__BinarySecurityToken(struct soap *soap, struct _wsse__BinarySecurityToken **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_wsse__BinarySecurityToken(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__UsernameToken(struct soap *soap, struct _wsse__UsernameToken *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__wsse__UsernameToken))
		soap_serialize__wsse__UsernameToken(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__UsernameToken(struct soap *soap, const char *tag, int id, struct _wsse__UsernameToken *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__wsse__UsernameToken, NULL);
	if (id < 0)
		return soap->error;
	return soap_out__wsse__UsernameToken(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct _wsse__UsernameToken ** SOAP_FMAC4 soap_in_PointerTo_wsse__UsernameToken(struct soap *soap, const char *tag, struct _wsse__UsernameToken **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct _wsse__UsernameToken **)soap_malloc(soap, sizeof(struct _wsse__UsernameToken *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in__wsse__UsernameToken(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct _wsse__UsernameToken **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__wsse__UsernameToken, sizeof(struct _wsse__UsernameToken), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__UsernameToken(struct soap *soap, struct _wsse__UsernameToken *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_wsse__UsernameToken(soap, tag ? tag : "wsse:UsernameToken", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct _wsse__UsernameToken ** SOAP_FMAC4 soap_get_PointerTo_wsse__UsernameToken(struct soap *soap, struct _wsse__UsernameToken **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_wsse__UsernameToken(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsu__Timestamp(struct soap *soap, struct _wsu__Timestamp *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__wsu__Timestamp))
		soap_serialize__wsu__Timestamp(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsu__Timestamp(struct soap *soap, const char *tag, int id, struct _wsu__Timestamp *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__wsu__Timestamp, NULL);
	if (id < 0)
		return soap->error;
	return soap_out__wsu__Timestamp(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct _wsu__Timestamp ** SOAP_FMAC4 soap_in_PointerTo_wsu__Timestamp(struct soap *soap, const char *tag, struct _wsu__Timestamp **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct _wsu__Timestamp **)soap_malloc(soap, sizeof(struct _wsu__Timestamp *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in__wsu__Timestamp(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct _wsu__Timestamp **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__wsu__Timestamp, sizeof(struct _wsu__Timestamp), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsu__Timestamp(struct soap *soap, struct _wsu__Timestamp *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_wsu__Timestamp(soap, tag ? tag : "wsu:Timestamp", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct _wsu__Timestamp ** SOAP_FMAC4 soap_get_PointerTo_wsu__Timestamp(struct soap *soap, struct _wsu__Timestamp **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_wsu__Timestamp(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AuthenticatingAuthority(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__saml2__AuthenticatingAuthority(soap, tag ? tag : "saml2:AuthenticatingAuthority", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AuthnContextDeclRef(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__saml2__AuthnContextDeclRef(soap, tag ? tag : "saml2:AuthnContextDeclRef", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AuthnContextClassRef(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__saml2__AuthnContextClassRef(soap, tag ? tag : "saml2:AuthnContextClassRef", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__Audience(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__saml2__Audience(soap, tag ? tag : "saml2:Audience", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AssertionURIRef(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__saml2__AssertionURIRef(soap, tag ? tag : "saml2:AssertionURIRef", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml2__AssertionIDRef(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__saml2__AssertionIDRef(soap, tag ? tag : "saml2:AssertionIDRef", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTo_ds__KeyInfo(struct soap *soap, struct ds__KeyInfoType **const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTo_ds__KeyInfo))
		soap_serialize_PointerTo_ds__KeyInfo(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTo_ds__KeyInfo(struct soap *soap, const char *tag, int id, struct ds__KeyInfoType **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTo_ds__KeyInfo, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTo_ds__KeyInfo(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ds__KeyInfoType *** SOAP_FMAC4 soap_in_PointerToPointerTo_ds__KeyInfo(struct soap *soap, const char *tag, struct ds__KeyInfoType ***a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ds__KeyInfoType ***)soap_malloc(soap, sizeof(struct ds__KeyInfoType **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTo_ds__KeyInfo(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ds__KeyInfoType ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ds__KeyInfo, sizeof(struct ds__KeyInfoType), 1, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTo_ds__KeyInfo(struct soap *soap, struct ds__KeyInfoType **const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToPointerTo_ds__KeyInfo(soap, tag ? tag : "ds:KeyInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ds__KeyInfoType *** SOAP_FMAC4 soap_get_PointerToPointerTo_ds__KeyInfo(struct soap *soap, struct ds__KeyInfoType ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTo_ds__KeyInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml2__union_AttributeStatementType(struct soap *soap, struct __saml2__union_AttributeStatementType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE___saml2__union_AttributeStatementType))
		soap_serialize___saml2__union_AttributeStatementType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml2__union_AttributeStatementType(struct soap *soap, const char *tag, int id, struct __saml2__union_AttributeStatementType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE___saml2__union_AttributeStatementType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out___saml2__union_AttributeStatementType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct __saml2__union_AttributeStatementType ** SOAP_FMAC4 soap_in_PointerTo__saml2__union_AttributeStatementType(struct soap *soap, const char *tag, struct __saml2__union_AttributeStatementType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct __saml2__union_AttributeStatementType **)soap_malloc(soap, sizeof(struct __saml2__union_AttributeStatementType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in___saml2__union_AttributeStatementType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct __saml2__union_AttributeStatementType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE___saml2__union_AttributeStatementType, sizeof(struct __saml2__union_AttributeStatementType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml2__union_AttributeStatementType(struct soap *soap, struct __saml2__union_AttributeStatementType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo__saml2__union_AttributeStatementType(soap, tag ? tag : "-saml2:union-AttributeStatementType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct __saml2__union_AttributeStatementType ** SOAP_FMAC4 soap_get_PointerTo__saml2__union_AttributeStatementType(struct soap *soap, struct __saml2__union_AttributeStatementType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo__saml2__union_AttributeStatementType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AttributeType(struct soap *soap, struct saml2__AttributeType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml2__AttributeType))
		soap_serialize_saml2__AttributeType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AttributeType(struct soap *soap, const char *tag, int id, struct saml2__AttributeType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml2__AttributeType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml2__AttributeType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml2__AttributeType ** SOAP_FMAC4 soap_in_PointerTosaml2__AttributeType(struct soap *soap, const char *tag, struct saml2__AttributeType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml2__AttributeType **)soap_malloc(soap, sizeof(struct saml2__AttributeType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml2__AttributeType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml2__AttributeType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml2__AttributeType, sizeof(struct saml2__AttributeType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AttributeType(struct soap *soap, struct saml2__AttributeType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml2__AttributeType(soap, tag ? tag : "saml2:AttributeType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__AttributeType ** SOAP_FMAC4 soap_get_PointerTosaml2__AttributeType(struct soap *soap, struct saml2__AttributeType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml2__AttributeType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__EvidenceType(struct soap *soap, struct saml2__EvidenceType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml2__EvidenceType))
		soap_serialize_saml2__EvidenceType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__EvidenceType(struct soap *soap, const char *tag, int id, struct saml2__EvidenceType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml2__EvidenceType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml2__EvidenceType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml2__EvidenceType ** SOAP_FMAC4 soap_in_PointerTosaml2__EvidenceType(struct soap *soap, const char *tag, struct saml2__EvidenceType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml2__EvidenceType **)soap_malloc(soap, sizeof(struct saml2__EvidenceType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml2__EvidenceType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml2__EvidenceType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml2__EvidenceType, sizeof(struct saml2__EvidenceType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__EvidenceType(struct soap *soap, struct saml2__EvidenceType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml2__EvidenceType(soap, tag ? tag : "saml2:EvidenceType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__EvidenceType ** SOAP_FMAC4 soap_get_PointerTosaml2__EvidenceType(struct soap *soap, struct saml2__EvidenceType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml2__EvidenceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__ActionType(struct soap *soap, struct saml2__ActionType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml2__ActionType))
		soap_serialize_saml2__ActionType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__ActionType(struct soap *soap, const char *tag, int id, struct saml2__ActionType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml2__ActionType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml2__ActionType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml2__ActionType ** SOAP_FMAC4 soap_in_PointerTosaml2__ActionType(struct soap *soap, const char *tag, struct saml2__ActionType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml2__ActionType **)soap_malloc(soap, sizeof(struct saml2__ActionType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml2__ActionType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml2__ActionType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml2__ActionType, sizeof(struct saml2__ActionType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__ActionType(struct soap *soap, struct saml2__ActionType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml2__ActionType(soap, tag ? tag : "saml2:ActionType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__ActionType ** SOAP_FMAC4 soap_get_PointerTosaml2__ActionType(struct soap *soap, struct saml2__ActionType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml2__ActionType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AuthnContextType(struct soap *soap, struct saml2__AuthnContextType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml2__AuthnContextType))
		soap_serialize_saml2__AuthnContextType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AuthnContextType(struct soap *soap, const char *tag, int id, struct saml2__AuthnContextType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml2__AuthnContextType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml2__AuthnContextType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml2__AuthnContextType ** SOAP_FMAC4 soap_in_PointerTosaml2__AuthnContextType(struct soap *soap, const char *tag, struct saml2__AuthnContextType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml2__AuthnContextType **)soap_malloc(soap, sizeof(struct saml2__AuthnContextType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml2__AuthnContextType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml2__AuthnContextType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml2__AuthnContextType, sizeof(struct saml2__AuthnContextType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AuthnContextType(struct soap *soap, struct saml2__AuthnContextType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml2__AuthnContextType(soap, tag ? tag : "saml2:AuthnContextType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__AuthnContextType ** SOAP_FMAC4 soap_get_PointerTosaml2__AuthnContextType(struct soap *soap, struct saml2__AuthnContextType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml2__AuthnContextType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__SubjectLocalityType(struct soap *soap, struct saml2__SubjectLocalityType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml2__SubjectLocalityType))
		soap_serialize_saml2__SubjectLocalityType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__SubjectLocalityType(struct soap *soap, const char *tag, int id, struct saml2__SubjectLocalityType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml2__SubjectLocalityType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml2__SubjectLocalityType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml2__SubjectLocalityType ** SOAP_FMAC4 soap_in_PointerTosaml2__SubjectLocalityType(struct soap *soap, const char *tag, struct saml2__SubjectLocalityType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml2__SubjectLocalityType **)soap_malloc(soap, sizeof(struct saml2__SubjectLocalityType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml2__SubjectLocalityType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml2__SubjectLocalityType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml2__SubjectLocalityType, sizeof(struct saml2__SubjectLocalityType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__SubjectLocalityType(struct soap *soap, struct saml2__SubjectLocalityType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml2__SubjectLocalityType(soap, tag ? tag : "saml2:SubjectLocalityType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__SubjectLocalityType ** SOAP_FMAC4 soap_get_PointerTosaml2__SubjectLocalityType(struct soap *soap, struct saml2__SubjectLocalityType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml2__SubjectLocalityType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml2__union_EvidenceType(struct soap *soap, struct __saml2__union_EvidenceType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE___saml2__union_EvidenceType))
		soap_serialize___saml2__union_EvidenceType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml2__union_EvidenceType(struct soap *soap, const char *tag, int id, struct __saml2__union_EvidenceType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE___saml2__union_EvidenceType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out___saml2__union_EvidenceType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct __saml2__union_EvidenceType ** SOAP_FMAC4 soap_in_PointerTo__saml2__union_EvidenceType(struct soap *soap, const char *tag, struct __saml2__union_EvidenceType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct __saml2__union_EvidenceType **)soap_malloc(soap, sizeof(struct __saml2__union_EvidenceType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in___saml2__union_EvidenceType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct __saml2__union_EvidenceType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE___saml2__union_EvidenceType, sizeof(struct __saml2__union_EvidenceType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml2__union_EvidenceType(struct soap *soap, struct __saml2__union_EvidenceType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo__saml2__union_EvidenceType(soap, tag ? tag : "-saml2:union-EvidenceType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct __saml2__union_EvidenceType ** SOAP_FMAC4 soap_get_PointerTo__saml2__union_EvidenceType(struct soap *soap, struct __saml2__union_EvidenceType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo__saml2__union_EvidenceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml2__union_AdviceType(struct soap *soap, struct __saml2__union_AdviceType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE___saml2__union_AdviceType))
		soap_serialize___saml2__union_AdviceType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml2__union_AdviceType(struct soap *soap, const char *tag, int id, struct __saml2__union_AdviceType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE___saml2__union_AdviceType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out___saml2__union_AdviceType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct __saml2__union_AdviceType ** SOAP_FMAC4 soap_in_PointerTo__saml2__union_AdviceType(struct soap *soap, const char *tag, struct __saml2__union_AdviceType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct __saml2__union_AdviceType **)soap_malloc(soap, sizeof(struct __saml2__union_AdviceType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in___saml2__union_AdviceType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct __saml2__union_AdviceType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE___saml2__union_AdviceType, sizeof(struct __saml2__union_AdviceType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml2__union_AdviceType(struct soap *soap, struct __saml2__union_AdviceType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo__saml2__union_AdviceType(soap, tag ? tag : "-saml2:union-AdviceType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct __saml2__union_AdviceType ** SOAP_FMAC4 soap_get_PointerTo__saml2__union_AdviceType(struct soap *soap, struct __saml2__union_AdviceType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo__saml2__union_AdviceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AssertionType(struct soap *soap, struct saml2__AssertionType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml2__AssertionType))
		soap_serialize_saml2__AssertionType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AssertionType(struct soap *soap, const char *tag, int id, struct saml2__AssertionType *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml2__AssertionType, &mark);
	if (id < 0)
		return soap->error;
	(void)soap_out_saml2__AssertionType(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct saml2__AssertionType ** SOAP_FMAC4 soap_in_PointerTosaml2__AssertionType(struct soap *soap, const char *tag, struct saml2__AssertionType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml2__AssertionType **)soap_malloc(soap, sizeof(struct saml2__AssertionType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml2__AssertionType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml2__AssertionType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml2__AssertionType, sizeof(struct saml2__AssertionType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AssertionType(struct soap *soap, struct saml2__AssertionType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml2__AssertionType(soap, tag ? tag : "saml2:AssertionType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__AssertionType ** SOAP_FMAC4 soap_get_PointerTosaml2__AssertionType(struct soap *soap, struct saml2__AssertionType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml2__AssertionType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml2__union_ConditionsType(struct soap *soap, struct __saml2__union_ConditionsType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE___saml2__union_ConditionsType))
		soap_serialize___saml2__union_ConditionsType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml2__union_ConditionsType(struct soap *soap, const char *tag, int id, struct __saml2__union_ConditionsType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE___saml2__union_ConditionsType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out___saml2__union_ConditionsType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct __saml2__union_ConditionsType ** SOAP_FMAC4 soap_in_PointerTo__saml2__union_ConditionsType(struct soap *soap, const char *tag, struct __saml2__union_ConditionsType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct __saml2__union_ConditionsType **)soap_malloc(soap, sizeof(struct __saml2__union_ConditionsType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in___saml2__union_ConditionsType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct __saml2__union_ConditionsType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE___saml2__union_ConditionsType, sizeof(struct __saml2__union_ConditionsType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml2__union_ConditionsType(struct soap *soap, struct __saml2__union_ConditionsType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo__saml2__union_ConditionsType(soap, tag ? tag : "-saml2:union-ConditionsType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct __saml2__union_ConditionsType ** SOAP_FMAC4 soap_get_PointerTo__saml2__union_ConditionsType(struct soap *soap, struct __saml2__union_ConditionsType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo__saml2__union_ConditionsType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__ProxyRestrictionType(struct soap *soap, struct saml2__ProxyRestrictionType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml2__ProxyRestrictionType))
		soap_serialize_saml2__ProxyRestrictionType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__ProxyRestrictionType(struct soap *soap, const char *tag, int id, struct saml2__ProxyRestrictionType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml2__ProxyRestrictionType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml2__ProxyRestrictionType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml2__ProxyRestrictionType ** SOAP_FMAC4 soap_in_PointerTosaml2__ProxyRestrictionType(struct soap *soap, const char *tag, struct saml2__ProxyRestrictionType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml2__ProxyRestrictionType **)soap_malloc(soap, sizeof(struct saml2__ProxyRestrictionType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml2__ProxyRestrictionType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml2__ProxyRestrictionType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml2__ProxyRestrictionType, sizeof(struct saml2__ProxyRestrictionType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__ProxyRestrictionType(struct soap *soap, struct saml2__ProxyRestrictionType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml2__ProxyRestrictionType(soap, tag ? tag : "saml2:ProxyRestrictionType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__ProxyRestrictionType ** SOAP_FMAC4 soap_get_PointerTosaml2__ProxyRestrictionType(struct soap *soap, struct saml2__ProxyRestrictionType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml2__ProxyRestrictionType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__OneTimeUseType(struct soap *soap, struct saml2__OneTimeUseType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml2__OneTimeUseType))
		soap_serialize_saml2__OneTimeUseType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__OneTimeUseType(struct soap *soap, const char *tag, int id, struct saml2__OneTimeUseType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml2__OneTimeUseType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml2__OneTimeUseType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml2__OneTimeUseType ** SOAP_FMAC4 soap_in_PointerTosaml2__OneTimeUseType(struct soap *soap, const char *tag, struct saml2__OneTimeUseType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml2__OneTimeUseType **)soap_malloc(soap, sizeof(struct saml2__OneTimeUseType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml2__OneTimeUseType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml2__OneTimeUseType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml2__OneTimeUseType, sizeof(struct saml2__OneTimeUseType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__OneTimeUseType(struct soap *soap, struct saml2__OneTimeUseType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml2__OneTimeUseType(soap, tag ? tag : "saml2:OneTimeUseType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__OneTimeUseType ** SOAP_FMAC4 soap_get_PointerTosaml2__OneTimeUseType(struct soap *soap, struct saml2__OneTimeUseType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml2__OneTimeUseType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AudienceRestrictionType(struct soap *soap, struct saml2__AudienceRestrictionType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml2__AudienceRestrictionType))
		soap_serialize_saml2__AudienceRestrictionType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AudienceRestrictionType(struct soap *soap, const char *tag, int id, struct saml2__AudienceRestrictionType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml2__AudienceRestrictionType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml2__AudienceRestrictionType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml2__AudienceRestrictionType ** SOAP_FMAC4 soap_in_PointerTosaml2__AudienceRestrictionType(struct soap *soap, const char *tag, struct saml2__AudienceRestrictionType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml2__AudienceRestrictionType **)soap_malloc(soap, sizeof(struct saml2__AudienceRestrictionType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml2__AudienceRestrictionType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml2__AudienceRestrictionType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml2__AudienceRestrictionType, sizeof(struct saml2__AudienceRestrictionType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AudienceRestrictionType(struct soap *soap, struct saml2__AudienceRestrictionType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml2__AudienceRestrictionType(soap, tag ? tag : "saml2:AudienceRestrictionType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__AudienceRestrictionType ** SOAP_FMAC4 soap_get_PointerTosaml2__AudienceRestrictionType(struct soap *soap, struct saml2__AudienceRestrictionType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml2__AudienceRestrictionType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__ConditionAbstractType(struct soap *soap, struct saml2__ConditionAbstractType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml2__ConditionAbstractType))
		soap_serialize_saml2__ConditionAbstractType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__ConditionAbstractType(struct soap *soap, const char *tag, int id, struct saml2__ConditionAbstractType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml2__ConditionAbstractType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml2__ConditionAbstractType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml2__ConditionAbstractType ** SOAP_FMAC4 soap_in_PointerTosaml2__ConditionAbstractType(struct soap *soap, const char *tag, struct saml2__ConditionAbstractType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml2__ConditionAbstractType **)soap_malloc(soap, sizeof(struct saml2__ConditionAbstractType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml2__ConditionAbstractType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml2__ConditionAbstractType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml2__ConditionAbstractType, sizeof(struct saml2__ConditionAbstractType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__ConditionAbstractType(struct soap *soap, struct saml2__ConditionAbstractType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml2__ConditionAbstractType(soap, tag ? tag : "saml2:ConditionAbstractType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__ConditionAbstractType ** SOAP_FMAC4 soap_get_PointerTosaml2__ConditionAbstractType(struct soap *soap, struct saml2__ConditionAbstractType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml2__ConditionAbstractType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__SubjectConfirmationDataType(struct soap *soap, struct saml2__SubjectConfirmationDataType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml2__SubjectConfirmationDataType))
		soap_serialize_saml2__SubjectConfirmationDataType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__SubjectConfirmationDataType(struct soap *soap, const char *tag, int id, struct saml2__SubjectConfirmationDataType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml2__SubjectConfirmationDataType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml2__SubjectConfirmationDataType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml2__SubjectConfirmationDataType ** SOAP_FMAC4 soap_in_PointerTosaml2__SubjectConfirmationDataType(struct soap *soap, const char *tag, struct saml2__SubjectConfirmationDataType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml2__SubjectConfirmationDataType **)soap_malloc(soap, sizeof(struct saml2__SubjectConfirmationDataType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml2__SubjectConfirmationDataType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml2__SubjectConfirmationDataType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml2__SubjectConfirmationDataType, sizeof(struct saml2__SubjectConfirmationDataType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__SubjectConfirmationDataType(struct soap *soap, struct saml2__SubjectConfirmationDataType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml2__SubjectConfirmationDataType(soap, tag ? tag : "saml2:SubjectConfirmationDataType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__SubjectConfirmationDataType ** SOAP_FMAC4 soap_get_PointerTosaml2__SubjectConfirmationDataType(struct soap *soap, struct saml2__SubjectConfirmationDataType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml2__SubjectConfirmationDataType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__SubjectConfirmationType(struct soap *soap, struct saml2__SubjectConfirmationType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml2__SubjectConfirmationType))
		soap_serialize_saml2__SubjectConfirmationType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__SubjectConfirmationType(struct soap *soap, const char *tag, int id, struct saml2__SubjectConfirmationType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml2__SubjectConfirmationType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml2__SubjectConfirmationType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml2__SubjectConfirmationType ** SOAP_FMAC4 soap_in_PointerTosaml2__SubjectConfirmationType(struct soap *soap, const char *tag, struct saml2__SubjectConfirmationType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml2__SubjectConfirmationType **)soap_malloc(soap, sizeof(struct saml2__SubjectConfirmationType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml2__SubjectConfirmationType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml2__SubjectConfirmationType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml2__SubjectConfirmationType, sizeof(struct saml2__SubjectConfirmationType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__SubjectConfirmationType(struct soap *soap, struct saml2__SubjectConfirmationType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml2__SubjectConfirmationType(soap, tag ? tag : "saml2:SubjectConfirmationType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__SubjectConfirmationType ** SOAP_FMAC4 soap_get_PointerTosaml2__SubjectConfirmationType(struct soap *soap, struct saml2__SubjectConfirmationType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml2__SubjectConfirmationType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__EncryptedElementType(struct soap *soap, struct saml2__EncryptedElementType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml2__EncryptedElementType))
		soap_serialize_saml2__EncryptedElementType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__EncryptedElementType(struct soap *soap, const char *tag, int id, struct saml2__EncryptedElementType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml2__EncryptedElementType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml2__EncryptedElementType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml2__EncryptedElementType ** SOAP_FMAC4 soap_in_PointerTosaml2__EncryptedElementType(struct soap *soap, const char *tag, struct saml2__EncryptedElementType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml2__EncryptedElementType **)soap_malloc(soap, sizeof(struct saml2__EncryptedElementType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml2__EncryptedElementType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml2__EncryptedElementType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml2__EncryptedElementType, sizeof(struct saml2__EncryptedElementType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__EncryptedElementType(struct soap *soap, struct saml2__EncryptedElementType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml2__EncryptedElementType(soap, tag ? tag : "saml2:EncryptedElementType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__EncryptedElementType ** SOAP_FMAC4 soap_get_PointerTosaml2__EncryptedElementType(struct soap *soap, struct saml2__EncryptedElementType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml2__EncryptedElementType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__BaseIDAbstractType(struct soap *soap, struct saml2__BaseIDAbstractType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml2__BaseIDAbstractType))
		soap_serialize_saml2__BaseIDAbstractType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__BaseIDAbstractType(struct soap *soap, const char *tag, int id, struct saml2__BaseIDAbstractType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml2__BaseIDAbstractType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml2__BaseIDAbstractType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml2__BaseIDAbstractType ** SOAP_FMAC4 soap_in_PointerTosaml2__BaseIDAbstractType(struct soap *soap, const char *tag, struct saml2__BaseIDAbstractType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml2__BaseIDAbstractType **)soap_malloc(soap, sizeof(struct saml2__BaseIDAbstractType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml2__BaseIDAbstractType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml2__BaseIDAbstractType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml2__BaseIDAbstractType, sizeof(struct saml2__BaseIDAbstractType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__BaseIDAbstractType(struct soap *soap, struct saml2__BaseIDAbstractType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml2__BaseIDAbstractType(soap, tag ? tag : "saml2:BaseIDAbstractType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__BaseIDAbstractType ** SOAP_FMAC4 soap_get_PointerTosaml2__BaseIDAbstractType(struct soap *soap, struct saml2__BaseIDAbstractType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml2__BaseIDAbstractType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml2__union_AssertionType(struct soap *soap, struct __saml2__union_AssertionType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE___saml2__union_AssertionType))
		soap_serialize___saml2__union_AssertionType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml2__union_AssertionType(struct soap *soap, const char *tag, int id, struct __saml2__union_AssertionType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE___saml2__union_AssertionType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out___saml2__union_AssertionType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct __saml2__union_AssertionType ** SOAP_FMAC4 soap_in_PointerTo__saml2__union_AssertionType(struct soap *soap, const char *tag, struct __saml2__union_AssertionType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct __saml2__union_AssertionType **)soap_malloc(soap, sizeof(struct __saml2__union_AssertionType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in___saml2__union_AssertionType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct __saml2__union_AssertionType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE___saml2__union_AssertionType, sizeof(struct __saml2__union_AssertionType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml2__union_AssertionType(struct soap *soap, struct __saml2__union_AssertionType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo__saml2__union_AssertionType(soap, tag ? tag : "-saml2:union-AssertionType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct __saml2__union_AssertionType ** SOAP_FMAC4 soap_get_PointerTo__saml2__union_AssertionType(struct soap *soap, struct __saml2__union_AssertionType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo__saml2__union_AssertionType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AttributeStatementType(struct soap *soap, struct saml2__AttributeStatementType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml2__AttributeStatementType))
		soap_serialize_saml2__AttributeStatementType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AttributeStatementType(struct soap *soap, const char *tag, int id, struct saml2__AttributeStatementType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml2__AttributeStatementType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml2__AttributeStatementType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml2__AttributeStatementType ** SOAP_FMAC4 soap_in_PointerTosaml2__AttributeStatementType(struct soap *soap, const char *tag, struct saml2__AttributeStatementType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml2__AttributeStatementType **)soap_malloc(soap, sizeof(struct saml2__AttributeStatementType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml2__AttributeStatementType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml2__AttributeStatementType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml2__AttributeStatementType, sizeof(struct saml2__AttributeStatementType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AttributeStatementType(struct soap *soap, struct saml2__AttributeStatementType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml2__AttributeStatementType(soap, tag ? tag : "saml2:AttributeStatementType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__AttributeStatementType ** SOAP_FMAC4 soap_get_PointerTosaml2__AttributeStatementType(struct soap *soap, struct saml2__AttributeStatementType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml2__AttributeStatementType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AuthzDecisionStatementType(struct soap *soap, struct saml2__AuthzDecisionStatementType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml2__AuthzDecisionStatementType))
		soap_serialize_saml2__AuthzDecisionStatementType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AuthzDecisionStatementType(struct soap *soap, const char *tag, int id, struct saml2__AuthzDecisionStatementType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml2__AuthzDecisionStatementType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml2__AuthzDecisionStatementType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml2__AuthzDecisionStatementType ** SOAP_FMAC4 soap_in_PointerTosaml2__AuthzDecisionStatementType(struct soap *soap, const char *tag, struct saml2__AuthzDecisionStatementType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml2__AuthzDecisionStatementType **)soap_malloc(soap, sizeof(struct saml2__AuthzDecisionStatementType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml2__AuthzDecisionStatementType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml2__AuthzDecisionStatementType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml2__AuthzDecisionStatementType, sizeof(struct saml2__AuthzDecisionStatementType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AuthzDecisionStatementType(struct soap *soap, struct saml2__AuthzDecisionStatementType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml2__AuthzDecisionStatementType(soap, tag ? tag : "saml2:AuthzDecisionStatementType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__AuthzDecisionStatementType ** SOAP_FMAC4 soap_get_PointerTosaml2__AuthzDecisionStatementType(struct soap *soap, struct saml2__AuthzDecisionStatementType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml2__AuthzDecisionStatementType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AuthnStatementType(struct soap *soap, struct saml2__AuthnStatementType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml2__AuthnStatementType))
		soap_serialize_saml2__AuthnStatementType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AuthnStatementType(struct soap *soap, const char *tag, int id, struct saml2__AuthnStatementType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml2__AuthnStatementType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml2__AuthnStatementType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml2__AuthnStatementType ** SOAP_FMAC4 soap_in_PointerTosaml2__AuthnStatementType(struct soap *soap, const char *tag, struct saml2__AuthnStatementType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml2__AuthnStatementType **)soap_malloc(soap, sizeof(struct saml2__AuthnStatementType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml2__AuthnStatementType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml2__AuthnStatementType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml2__AuthnStatementType, sizeof(struct saml2__AuthnStatementType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AuthnStatementType(struct soap *soap, struct saml2__AuthnStatementType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml2__AuthnStatementType(soap, tag ? tag : "saml2:AuthnStatementType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__AuthnStatementType ** SOAP_FMAC4 soap_get_PointerTosaml2__AuthnStatementType(struct soap *soap, struct saml2__AuthnStatementType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml2__AuthnStatementType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__StatementAbstractType(struct soap *soap, struct saml2__StatementAbstractType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml2__StatementAbstractType))
		soap_serialize_saml2__StatementAbstractType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__StatementAbstractType(struct soap *soap, const char *tag, int id, struct saml2__StatementAbstractType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml2__StatementAbstractType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml2__StatementAbstractType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml2__StatementAbstractType ** SOAP_FMAC4 soap_in_PointerTosaml2__StatementAbstractType(struct soap *soap, const char *tag, struct saml2__StatementAbstractType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml2__StatementAbstractType **)soap_malloc(soap, sizeof(struct saml2__StatementAbstractType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml2__StatementAbstractType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml2__StatementAbstractType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml2__StatementAbstractType, sizeof(struct saml2__StatementAbstractType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__StatementAbstractType(struct soap *soap, struct saml2__StatementAbstractType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml2__StatementAbstractType(soap, tag ? tag : "saml2:StatementAbstractType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__StatementAbstractType ** SOAP_FMAC4 soap_get_PointerTosaml2__StatementAbstractType(struct soap *soap, struct saml2__StatementAbstractType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml2__StatementAbstractType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__AdviceType(struct soap *soap, struct saml2__AdviceType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml2__AdviceType))
		soap_serialize_saml2__AdviceType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__AdviceType(struct soap *soap, const char *tag, int id, struct saml2__AdviceType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml2__AdviceType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml2__AdviceType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml2__AdviceType ** SOAP_FMAC4 soap_in_PointerTosaml2__AdviceType(struct soap *soap, const char *tag, struct saml2__AdviceType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml2__AdviceType **)soap_malloc(soap, sizeof(struct saml2__AdviceType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml2__AdviceType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml2__AdviceType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml2__AdviceType, sizeof(struct saml2__AdviceType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__AdviceType(struct soap *soap, struct saml2__AdviceType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml2__AdviceType(soap, tag ? tag : "saml2:AdviceType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__AdviceType ** SOAP_FMAC4 soap_get_PointerTosaml2__AdviceType(struct soap *soap, struct saml2__AdviceType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml2__AdviceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__ConditionsType(struct soap *soap, struct saml2__ConditionsType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml2__ConditionsType))
		soap_serialize_saml2__ConditionsType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__ConditionsType(struct soap *soap, const char *tag, int id, struct saml2__ConditionsType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml2__ConditionsType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml2__ConditionsType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml2__ConditionsType ** SOAP_FMAC4 soap_in_PointerTosaml2__ConditionsType(struct soap *soap, const char *tag, struct saml2__ConditionsType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml2__ConditionsType **)soap_malloc(soap, sizeof(struct saml2__ConditionsType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml2__ConditionsType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml2__ConditionsType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml2__ConditionsType, sizeof(struct saml2__ConditionsType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__ConditionsType(struct soap *soap, struct saml2__ConditionsType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml2__ConditionsType(soap, tag ? tag : "saml2:ConditionsType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__ConditionsType ** SOAP_FMAC4 soap_get_PointerTosaml2__ConditionsType(struct soap *soap, struct saml2__ConditionsType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml2__ConditionsType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__SubjectType(struct soap *soap, struct saml2__SubjectType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml2__SubjectType))
		soap_serialize_saml2__SubjectType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__SubjectType(struct soap *soap, const char *tag, int id, struct saml2__SubjectType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml2__SubjectType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml2__SubjectType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml2__SubjectType ** SOAP_FMAC4 soap_in_PointerTosaml2__SubjectType(struct soap *soap, const char *tag, struct saml2__SubjectType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml2__SubjectType **)soap_malloc(soap, sizeof(struct saml2__SubjectType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml2__SubjectType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml2__SubjectType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml2__SubjectType, sizeof(struct saml2__SubjectType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__SubjectType(struct soap *soap, struct saml2__SubjectType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml2__SubjectType(soap, tag ? tag : "saml2:SubjectType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__SubjectType ** SOAP_FMAC4 soap_get_PointerTosaml2__SubjectType(struct soap *soap, struct saml2__SubjectType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml2__SubjectType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml2__NameIDType(struct soap *soap, struct saml2__NameIDType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml2__NameIDType))
		soap_serialize_saml2__NameIDType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml2__NameIDType(struct soap *soap, const char *tag, int id, struct saml2__NameIDType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml2__NameIDType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml2__NameIDType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml2__NameIDType ** SOAP_FMAC4 soap_in_PointerTosaml2__NameIDType(struct soap *soap, const char *tag, struct saml2__NameIDType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml2__NameIDType **)soap_malloc(soap, sizeof(struct saml2__NameIDType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml2__NameIDType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml2__NameIDType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml2__NameIDType, sizeof(struct saml2__NameIDType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml2__NameIDType(struct soap *soap, struct saml2__NameIDType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml2__NameIDType(soap, tag ? tag : "saml2:NameIDType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml2__NameIDType ** SOAP_FMAC4 soap_get_PointerTosaml2__NameIDType(struct soap *soap, struct saml2__NameIDType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml2__NameIDType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToxenc__EncryptedKeyType(struct soap *soap, struct xenc__EncryptedKeyType **const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerToxenc__EncryptedKeyType))
		soap_serialize_PointerToxenc__EncryptedKeyType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToxenc__EncryptedKeyType(struct soap *soap, const char *tag, int id, struct xenc__EncryptedKeyType **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerToxenc__EncryptedKeyType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToxenc__EncryptedKeyType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct xenc__EncryptedKeyType *** SOAP_FMAC4 soap_in_PointerToPointerToxenc__EncryptedKeyType(struct soap *soap, const char *tag, struct xenc__EncryptedKeyType ***a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct xenc__EncryptedKeyType ***)soap_malloc(soap, sizeof(struct xenc__EncryptedKeyType **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToxenc__EncryptedKeyType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct xenc__EncryptedKeyType ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xenc__EncryptedKeyType, sizeof(struct xenc__EncryptedKeyType), 1, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToxenc__EncryptedKeyType(struct soap *soap, struct xenc__EncryptedKeyType **const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToPointerToxenc__EncryptedKeyType(soap, tag ? tag : "xenc:EncryptedKeyType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct xenc__EncryptedKeyType *** SOAP_FMAC4 soap_get_PointerToPointerToxenc__EncryptedKeyType(struct soap *soap, struct xenc__EncryptedKeyType ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToxenc__EncryptedKeyType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__EncryptedKeyType(struct soap *soap, struct xenc__EncryptedKeyType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_xenc__EncryptedKeyType))
		soap_serialize_xenc__EncryptedKeyType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__EncryptedKeyType(struct soap *soap, const char *tag, int id, struct xenc__EncryptedKeyType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_xenc__EncryptedKeyType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_xenc__EncryptedKeyType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct xenc__EncryptedKeyType ** SOAP_FMAC4 soap_in_PointerToxenc__EncryptedKeyType(struct soap *soap, const char *tag, struct xenc__EncryptedKeyType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct xenc__EncryptedKeyType **)soap_malloc(soap, sizeof(struct xenc__EncryptedKeyType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_xenc__EncryptedKeyType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct xenc__EncryptedKeyType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xenc__EncryptedKeyType, sizeof(struct xenc__EncryptedKeyType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__EncryptedKeyType(struct soap *soap, struct xenc__EncryptedKeyType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToxenc__EncryptedKeyType(soap, tag ? tag : "xenc:EncryptedKeyType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct xenc__EncryptedKeyType ** SOAP_FMAC4 soap_get_PointerToxenc__EncryptedKeyType(struct soap *soap, struct xenc__EncryptedKeyType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxenc__EncryptedKeyType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__ConfirmationMethod(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__saml1__ConfirmationMethod(soap, tag ? tag : "saml1:ConfirmationMethod", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__Audience(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__saml1__Audience(soap, tag ? tag : "saml1:Audience", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__saml1__AssertionIDReference(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__saml1__AssertionIDReference(soap, tag ? tag : "saml1:AssertionIDReference", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AttributeType(struct soap *soap, struct saml1__AttributeType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml1__AttributeType))
		soap_serialize_saml1__AttributeType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AttributeType(struct soap *soap, const char *tag, int id, struct saml1__AttributeType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml1__AttributeType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml1__AttributeType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml1__AttributeType ** SOAP_FMAC4 soap_in_PointerTosaml1__AttributeType(struct soap *soap, const char *tag, struct saml1__AttributeType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml1__AttributeType **)soap_malloc(soap, sizeof(struct saml1__AttributeType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml1__AttributeType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml1__AttributeType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml1__AttributeType, sizeof(struct saml1__AttributeType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AttributeType(struct soap *soap, struct saml1__AttributeType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml1__AttributeType(soap, tag ? tag : "saml1:AttributeType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__AttributeType ** SOAP_FMAC4 soap_get_PointerTosaml1__AttributeType(struct soap *soap, struct saml1__AttributeType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml1__AttributeType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__EvidenceType(struct soap *soap, struct saml1__EvidenceType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml1__EvidenceType))
		soap_serialize_saml1__EvidenceType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__EvidenceType(struct soap *soap, const char *tag, int id, struct saml1__EvidenceType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml1__EvidenceType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml1__EvidenceType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml1__EvidenceType ** SOAP_FMAC4 soap_in_PointerTosaml1__EvidenceType(struct soap *soap, const char *tag, struct saml1__EvidenceType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml1__EvidenceType **)soap_malloc(soap, sizeof(struct saml1__EvidenceType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml1__EvidenceType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml1__EvidenceType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml1__EvidenceType, sizeof(struct saml1__EvidenceType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__EvidenceType(struct soap *soap, struct saml1__EvidenceType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml1__EvidenceType(soap, tag ? tag : "saml1:EvidenceType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__EvidenceType ** SOAP_FMAC4 soap_get_PointerTosaml1__EvidenceType(struct soap *soap, struct saml1__EvidenceType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml1__EvidenceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__ActionType(struct soap *soap, struct saml1__ActionType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml1__ActionType))
		soap_serialize_saml1__ActionType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__ActionType(struct soap *soap, const char *tag, int id, struct saml1__ActionType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml1__ActionType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml1__ActionType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml1__ActionType ** SOAP_FMAC4 soap_in_PointerTosaml1__ActionType(struct soap *soap, const char *tag, struct saml1__ActionType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml1__ActionType **)soap_malloc(soap, sizeof(struct saml1__ActionType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml1__ActionType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml1__ActionType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml1__ActionType, sizeof(struct saml1__ActionType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__ActionType(struct soap *soap, struct saml1__ActionType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml1__ActionType(soap, tag ? tag : "saml1:ActionType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__ActionType ** SOAP_FMAC4 soap_get_PointerTosaml1__ActionType(struct soap *soap, struct saml1__ActionType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml1__ActionType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AuthorityBindingType(struct soap *soap, struct saml1__AuthorityBindingType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml1__AuthorityBindingType))
		soap_serialize_saml1__AuthorityBindingType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AuthorityBindingType(struct soap *soap, const char *tag, int id, struct saml1__AuthorityBindingType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml1__AuthorityBindingType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml1__AuthorityBindingType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml1__AuthorityBindingType ** SOAP_FMAC4 soap_in_PointerTosaml1__AuthorityBindingType(struct soap *soap, const char *tag, struct saml1__AuthorityBindingType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml1__AuthorityBindingType **)soap_malloc(soap, sizeof(struct saml1__AuthorityBindingType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml1__AuthorityBindingType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml1__AuthorityBindingType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml1__AuthorityBindingType, sizeof(struct saml1__AuthorityBindingType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AuthorityBindingType(struct soap *soap, struct saml1__AuthorityBindingType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml1__AuthorityBindingType(soap, tag ? tag : "saml1:AuthorityBindingType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__AuthorityBindingType ** SOAP_FMAC4 soap_get_PointerTosaml1__AuthorityBindingType(struct soap *soap, struct saml1__AuthorityBindingType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml1__AuthorityBindingType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__SubjectLocalityType(struct soap *soap, struct saml1__SubjectLocalityType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml1__SubjectLocalityType))
		soap_serialize_saml1__SubjectLocalityType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__SubjectLocalityType(struct soap *soap, const char *tag, int id, struct saml1__SubjectLocalityType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml1__SubjectLocalityType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml1__SubjectLocalityType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml1__SubjectLocalityType ** SOAP_FMAC4 soap_in_PointerTosaml1__SubjectLocalityType(struct soap *soap, const char *tag, struct saml1__SubjectLocalityType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml1__SubjectLocalityType **)soap_malloc(soap, sizeof(struct saml1__SubjectLocalityType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml1__SubjectLocalityType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml1__SubjectLocalityType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml1__SubjectLocalityType, sizeof(struct saml1__SubjectLocalityType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__SubjectLocalityType(struct soap *soap, struct saml1__SubjectLocalityType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml1__SubjectLocalityType(soap, tag ? tag : "saml1:SubjectLocalityType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__SubjectLocalityType ** SOAP_FMAC4 soap_get_PointerTosaml1__SubjectLocalityType(struct soap *soap, struct saml1__SubjectLocalityType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml1__SubjectLocalityType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__SubjectType(struct soap *soap, struct saml1__SubjectType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml1__SubjectType))
		soap_serialize_saml1__SubjectType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__SubjectType(struct soap *soap, const char *tag, int id, struct saml1__SubjectType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml1__SubjectType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml1__SubjectType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml1__SubjectType ** SOAP_FMAC4 soap_in_PointerTosaml1__SubjectType(struct soap *soap, const char *tag, struct saml1__SubjectType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml1__SubjectType **)soap_malloc(soap, sizeof(struct saml1__SubjectType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml1__SubjectType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml1__SubjectType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml1__SubjectType, sizeof(struct saml1__SubjectType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__SubjectType(struct soap *soap, struct saml1__SubjectType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml1__SubjectType(soap, tag ? tag : "saml1:SubjectType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__SubjectType ** SOAP_FMAC4 soap_get_PointerTosaml1__SubjectType(struct soap *soap, struct saml1__SubjectType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml1__SubjectType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml1__union_EvidenceType(struct soap *soap, struct __saml1__union_EvidenceType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE___saml1__union_EvidenceType))
		soap_serialize___saml1__union_EvidenceType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml1__union_EvidenceType(struct soap *soap, const char *tag, int id, struct __saml1__union_EvidenceType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE___saml1__union_EvidenceType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out___saml1__union_EvidenceType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct __saml1__union_EvidenceType ** SOAP_FMAC4 soap_in_PointerTo__saml1__union_EvidenceType(struct soap *soap, const char *tag, struct __saml1__union_EvidenceType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct __saml1__union_EvidenceType **)soap_malloc(soap, sizeof(struct __saml1__union_EvidenceType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in___saml1__union_EvidenceType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct __saml1__union_EvidenceType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE___saml1__union_EvidenceType, sizeof(struct __saml1__union_EvidenceType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml1__union_EvidenceType(struct soap *soap, struct __saml1__union_EvidenceType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo__saml1__union_EvidenceType(soap, tag ? tag : "-saml1:union-EvidenceType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct __saml1__union_EvidenceType ** SOAP_FMAC4 soap_get_PointerTo__saml1__union_EvidenceType(struct soap *soap, struct __saml1__union_EvidenceType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo__saml1__union_EvidenceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostring(struct soap *soap, char **const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_string))
		soap_serialize_string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostring(struct soap *soap, const char *tag, int id, char **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_string, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_string(soap, tag, id, *a, type);
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerTostring(struct soap *soap, const char *tag, char ***a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (char ***)soap_malloc(soap, sizeof(char **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (char ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_string, sizeof(char *), 1, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostring(struct soap *soap, char **const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTostring(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerTostring(struct soap *soap, char ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__SubjectConfirmationType(struct soap *soap, struct saml1__SubjectConfirmationType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml1__SubjectConfirmationType))
		soap_serialize_saml1__SubjectConfirmationType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__SubjectConfirmationType(struct soap *soap, const char *tag, int id, struct saml1__SubjectConfirmationType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml1__SubjectConfirmationType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml1__SubjectConfirmationType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml1__SubjectConfirmationType ** SOAP_FMAC4 soap_in_PointerTosaml1__SubjectConfirmationType(struct soap *soap, const char *tag, struct saml1__SubjectConfirmationType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml1__SubjectConfirmationType **)soap_malloc(soap, sizeof(struct saml1__SubjectConfirmationType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml1__SubjectConfirmationType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml1__SubjectConfirmationType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml1__SubjectConfirmationType, sizeof(struct saml1__SubjectConfirmationType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__SubjectConfirmationType(struct soap *soap, struct saml1__SubjectConfirmationType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml1__SubjectConfirmationType(soap, tag ? tag : "saml1:SubjectConfirmationType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__SubjectConfirmationType ** SOAP_FMAC4 soap_get_PointerTosaml1__SubjectConfirmationType(struct soap *soap, struct saml1__SubjectConfirmationType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml1__SubjectConfirmationType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__NameIdentifierType(struct soap *soap, struct saml1__NameIdentifierType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml1__NameIdentifierType))
		soap_serialize_saml1__NameIdentifierType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__NameIdentifierType(struct soap *soap, const char *tag, int id, struct saml1__NameIdentifierType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml1__NameIdentifierType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml1__NameIdentifierType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml1__NameIdentifierType ** SOAP_FMAC4 soap_in_PointerTosaml1__NameIdentifierType(struct soap *soap, const char *tag, struct saml1__NameIdentifierType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml1__NameIdentifierType **)soap_malloc(soap, sizeof(struct saml1__NameIdentifierType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml1__NameIdentifierType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml1__NameIdentifierType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml1__NameIdentifierType, sizeof(struct saml1__NameIdentifierType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__NameIdentifierType(struct soap *soap, struct saml1__NameIdentifierType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml1__NameIdentifierType(soap, tag ? tag : "saml1:NameIdentifierType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__NameIdentifierType ** SOAP_FMAC4 soap_get_PointerTosaml1__NameIdentifierType(struct soap *soap, struct saml1__NameIdentifierType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml1__NameIdentifierType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml1__union_AdviceType(struct soap *soap, struct __saml1__union_AdviceType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE___saml1__union_AdviceType))
		soap_serialize___saml1__union_AdviceType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml1__union_AdviceType(struct soap *soap, const char *tag, int id, struct __saml1__union_AdviceType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE___saml1__union_AdviceType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out___saml1__union_AdviceType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct __saml1__union_AdviceType ** SOAP_FMAC4 soap_in_PointerTo__saml1__union_AdviceType(struct soap *soap, const char *tag, struct __saml1__union_AdviceType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct __saml1__union_AdviceType **)soap_malloc(soap, sizeof(struct __saml1__union_AdviceType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in___saml1__union_AdviceType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct __saml1__union_AdviceType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE___saml1__union_AdviceType, sizeof(struct __saml1__union_AdviceType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml1__union_AdviceType(struct soap *soap, struct __saml1__union_AdviceType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo__saml1__union_AdviceType(soap, tag ? tag : "-saml1:union-AdviceType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct __saml1__union_AdviceType ** SOAP_FMAC4 soap_get_PointerTo__saml1__union_AdviceType(struct soap *soap, struct __saml1__union_AdviceType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo__saml1__union_AdviceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AssertionType(struct soap *soap, struct saml1__AssertionType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml1__AssertionType))
		soap_serialize_saml1__AssertionType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AssertionType(struct soap *soap, const char *tag, int id, struct saml1__AssertionType *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml1__AssertionType, &mark);
	if (id < 0)
		return soap->error;
	(void)soap_out_saml1__AssertionType(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct saml1__AssertionType ** SOAP_FMAC4 soap_in_PointerTosaml1__AssertionType(struct soap *soap, const char *tag, struct saml1__AssertionType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml1__AssertionType **)soap_malloc(soap, sizeof(struct saml1__AssertionType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml1__AssertionType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml1__AssertionType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml1__AssertionType, sizeof(struct saml1__AssertionType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AssertionType(struct soap *soap, struct saml1__AssertionType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml1__AssertionType(soap, tag ? tag : "saml1:AssertionType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__AssertionType ** SOAP_FMAC4 soap_get_PointerTosaml1__AssertionType(struct soap *soap, struct saml1__AssertionType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml1__AssertionType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodateTime(struct soap *soap, time_t *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_dateTime);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodateTime(struct soap *soap, const char *tag, int id, time_t *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_dateTime, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_dateTime(soap, tag, id, *a, type);
}

SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTodateTime(struct soap *soap, const char *tag, time_t **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (time_t **)soap_malloc(soap, sizeof(time_t *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_dateTime(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (time_t **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_dateTime, sizeof(time_t), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodateTime(struct soap *soap, time_t *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTodateTime(soap, tag ? tag : "dateTime", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTodateTime(struct soap *soap, time_t **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTodateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml1__union_ConditionsType(struct soap *soap, struct __saml1__union_ConditionsType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE___saml1__union_ConditionsType))
		soap_serialize___saml1__union_ConditionsType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml1__union_ConditionsType(struct soap *soap, const char *tag, int id, struct __saml1__union_ConditionsType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE___saml1__union_ConditionsType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out___saml1__union_ConditionsType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct __saml1__union_ConditionsType ** SOAP_FMAC4 soap_in_PointerTo__saml1__union_ConditionsType(struct soap *soap, const char *tag, struct __saml1__union_ConditionsType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct __saml1__union_ConditionsType **)soap_malloc(soap, sizeof(struct __saml1__union_ConditionsType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in___saml1__union_ConditionsType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct __saml1__union_ConditionsType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE___saml1__union_ConditionsType, sizeof(struct __saml1__union_ConditionsType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml1__union_ConditionsType(struct soap *soap, struct __saml1__union_ConditionsType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo__saml1__union_ConditionsType(soap, tag ? tag : "-saml1:union-ConditionsType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct __saml1__union_ConditionsType ** SOAP_FMAC4 soap_get_PointerTo__saml1__union_ConditionsType(struct soap *soap, struct __saml1__union_ConditionsType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo__saml1__union_ConditionsType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__ConditionAbstractType(struct soap *soap, struct saml1__ConditionAbstractType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml1__ConditionAbstractType))
		soap_serialize_saml1__ConditionAbstractType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__ConditionAbstractType(struct soap *soap, const char *tag, int id, struct saml1__ConditionAbstractType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml1__ConditionAbstractType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml1__ConditionAbstractType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml1__ConditionAbstractType ** SOAP_FMAC4 soap_in_PointerTosaml1__ConditionAbstractType(struct soap *soap, const char *tag, struct saml1__ConditionAbstractType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml1__ConditionAbstractType **)soap_malloc(soap, sizeof(struct saml1__ConditionAbstractType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml1__ConditionAbstractType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml1__ConditionAbstractType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml1__ConditionAbstractType, sizeof(struct saml1__ConditionAbstractType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__ConditionAbstractType(struct soap *soap, struct saml1__ConditionAbstractType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml1__ConditionAbstractType(soap, tag ? tag : "saml1:ConditionAbstractType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__ConditionAbstractType ** SOAP_FMAC4 soap_get_PointerTosaml1__ConditionAbstractType(struct soap *soap, struct saml1__ConditionAbstractType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml1__ConditionAbstractType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__DoNotCacheConditionType(struct soap *soap, struct saml1__DoNotCacheConditionType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml1__DoNotCacheConditionType))
		soap_serialize_saml1__DoNotCacheConditionType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__DoNotCacheConditionType(struct soap *soap, const char *tag, int id, struct saml1__DoNotCacheConditionType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml1__DoNotCacheConditionType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml1__DoNotCacheConditionType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml1__DoNotCacheConditionType ** SOAP_FMAC4 soap_in_PointerTosaml1__DoNotCacheConditionType(struct soap *soap, const char *tag, struct saml1__DoNotCacheConditionType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml1__DoNotCacheConditionType **)soap_malloc(soap, sizeof(struct saml1__DoNotCacheConditionType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml1__DoNotCacheConditionType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml1__DoNotCacheConditionType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml1__DoNotCacheConditionType, sizeof(struct saml1__DoNotCacheConditionType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__DoNotCacheConditionType(struct soap *soap, struct saml1__DoNotCacheConditionType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml1__DoNotCacheConditionType(soap, tag ? tag : "saml1:DoNotCacheConditionType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__DoNotCacheConditionType ** SOAP_FMAC4 soap_get_PointerTosaml1__DoNotCacheConditionType(struct soap *soap, struct saml1__DoNotCacheConditionType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml1__DoNotCacheConditionType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AudienceRestrictionConditionType(struct soap *soap, struct saml1__AudienceRestrictionConditionType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml1__AudienceRestrictionConditionType))
		soap_serialize_saml1__AudienceRestrictionConditionType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AudienceRestrictionConditionType(struct soap *soap, const char *tag, int id, struct saml1__AudienceRestrictionConditionType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml1__AudienceRestrictionConditionType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml1__AudienceRestrictionConditionType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml1__AudienceRestrictionConditionType ** SOAP_FMAC4 soap_in_PointerTosaml1__AudienceRestrictionConditionType(struct soap *soap, const char *tag, struct saml1__AudienceRestrictionConditionType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml1__AudienceRestrictionConditionType **)soap_malloc(soap, sizeof(struct saml1__AudienceRestrictionConditionType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml1__AudienceRestrictionConditionType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml1__AudienceRestrictionConditionType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml1__AudienceRestrictionConditionType, sizeof(struct saml1__AudienceRestrictionConditionType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AudienceRestrictionConditionType(struct soap *soap, struct saml1__AudienceRestrictionConditionType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml1__AudienceRestrictionConditionType(soap, tag ? tag : "saml1:AudienceRestrictionConditionType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__AudienceRestrictionConditionType ** SOAP_FMAC4 soap_get_PointerTosaml1__AudienceRestrictionConditionType(struct soap *soap, struct saml1__AudienceRestrictionConditionType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml1__AudienceRestrictionConditionType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ds__Signature(struct soap *soap, struct ds__SignatureType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ds__Signature))
		soap_serialize__ds__Signature(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ds__Signature(struct soap *soap, const char *tag, int id, struct ds__SignatureType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ds__Signature, NULL);
	if (id < 0)
		return soap->error;
	return soap_out__ds__Signature(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ds__SignatureType ** SOAP_FMAC4 soap_in_PointerTo_ds__Signature(struct soap *soap, const char *tag, struct ds__SignatureType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ds__SignatureType **)soap_malloc(soap, sizeof(struct ds__SignatureType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in__ds__Signature(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ds__SignatureType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ds__Signature, sizeof(struct ds__SignatureType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ds__Signature(struct soap *soap, struct ds__SignatureType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ds__Signature(soap, tag ? tag : "ds:Signature", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ds__SignatureType ** SOAP_FMAC4 soap_get_PointerTo_ds__Signature(struct soap *soap, struct ds__SignatureType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ds__Signature(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__saml1__union_AssertionType(struct soap *soap, struct __saml1__union_AssertionType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE___saml1__union_AssertionType))
		soap_serialize___saml1__union_AssertionType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__saml1__union_AssertionType(struct soap *soap, const char *tag, int id, struct __saml1__union_AssertionType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE___saml1__union_AssertionType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out___saml1__union_AssertionType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct __saml1__union_AssertionType ** SOAP_FMAC4 soap_in_PointerTo__saml1__union_AssertionType(struct soap *soap, const char *tag, struct __saml1__union_AssertionType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct __saml1__union_AssertionType **)soap_malloc(soap, sizeof(struct __saml1__union_AssertionType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in___saml1__union_AssertionType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct __saml1__union_AssertionType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE___saml1__union_AssertionType, sizeof(struct __saml1__union_AssertionType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__saml1__union_AssertionType(struct soap *soap, struct __saml1__union_AssertionType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo__saml1__union_AssertionType(soap, tag ? tag : "-saml1:union-AssertionType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct __saml1__union_AssertionType ** SOAP_FMAC4 soap_get_PointerTo__saml1__union_AssertionType(struct soap *soap, struct __saml1__union_AssertionType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo__saml1__union_AssertionType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AttributeStatementType(struct soap *soap, struct saml1__AttributeStatementType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml1__AttributeStatementType))
		soap_serialize_saml1__AttributeStatementType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AttributeStatementType(struct soap *soap, const char *tag, int id, struct saml1__AttributeStatementType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml1__AttributeStatementType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml1__AttributeStatementType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml1__AttributeStatementType ** SOAP_FMAC4 soap_in_PointerTosaml1__AttributeStatementType(struct soap *soap, const char *tag, struct saml1__AttributeStatementType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml1__AttributeStatementType **)soap_malloc(soap, sizeof(struct saml1__AttributeStatementType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml1__AttributeStatementType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml1__AttributeStatementType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml1__AttributeStatementType, sizeof(struct saml1__AttributeStatementType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AttributeStatementType(struct soap *soap, struct saml1__AttributeStatementType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml1__AttributeStatementType(soap, tag ? tag : "saml1:AttributeStatementType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__AttributeStatementType ** SOAP_FMAC4 soap_get_PointerTosaml1__AttributeStatementType(struct soap *soap, struct saml1__AttributeStatementType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml1__AttributeStatementType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AuthorizationDecisionStatementType(struct soap *soap, struct saml1__AuthorizationDecisionStatementType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml1__AuthorizationDecisionStatementType))
		soap_serialize_saml1__AuthorizationDecisionStatementType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AuthorizationDecisionStatementType(struct soap *soap, const char *tag, int id, struct saml1__AuthorizationDecisionStatementType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml1__AuthorizationDecisionStatementType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml1__AuthorizationDecisionStatementType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml1__AuthorizationDecisionStatementType ** SOAP_FMAC4 soap_in_PointerTosaml1__AuthorizationDecisionStatementType(struct soap *soap, const char *tag, struct saml1__AuthorizationDecisionStatementType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml1__AuthorizationDecisionStatementType **)soap_malloc(soap, sizeof(struct saml1__AuthorizationDecisionStatementType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml1__AuthorizationDecisionStatementType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml1__AuthorizationDecisionStatementType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml1__AuthorizationDecisionStatementType, sizeof(struct saml1__AuthorizationDecisionStatementType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AuthorizationDecisionStatementType(struct soap *soap, struct saml1__AuthorizationDecisionStatementType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml1__AuthorizationDecisionStatementType(soap, tag ? tag : "saml1:AuthorizationDecisionStatementType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__AuthorizationDecisionStatementType ** SOAP_FMAC4 soap_get_PointerTosaml1__AuthorizationDecisionStatementType(struct soap *soap, struct saml1__AuthorizationDecisionStatementType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml1__AuthorizationDecisionStatementType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AuthenticationStatementType(struct soap *soap, struct saml1__AuthenticationStatementType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml1__AuthenticationStatementType))
		soap_serialize_saml1__AuthenticationStatementType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AuthenticationStatementType(struct soap *soap, const char *tag, int id, struct saml1__AuthenticationStatementType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml1__AuthenticationStatementType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml1__AuthenticationStatementType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml1__AuthenticationStatementType ** SOAP_FMAC4 soap_in_PointerTosaml1__AuthenticationStatementType(struct soap *soap, const char *tag, struct saml1__AuthenticationStatementType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml1__AuthenticationStatementType **)soap_malloc(soap, sizeof(struct saml1__AuthenticationStatementType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml1__AuthenticationStatementType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml1__AuthenticationStatementType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml1__AuthenticationStatementType, sizeof(struct saml1__AuthenticationStatementType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AuthenticationStatementType(struct soap *soap, struct saml1__AuthenticationStatementType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml1__AuthenticationStatementType(soap, tag ? tag : "saml1:AuthenticationStatementType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__AuthenticationStatementType ** SOAP_FMAC4 soap_get_PointerTosaml1__AuthenticationStatementType(struct soap *soap, struct saml1__AuthenticationStatementType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml1__AuthenticationStatementType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__SubjectStatementAbstractType(struct soap *soap, struct saml1__SubjectStatementAbstractType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml1__SubjectStatementAbstractType))
		soap_serialize_saml1__SubjectStatementAbstractType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__SubjectStatementAbstractType(struct soap *soap, const char *tag, int id, struct saml1__SubjectStatementAbstractType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml1__SubjectStatementAbstractType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml1__SubjectStatementAbstractType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml1__SubjectStatementAbstractType ** SOAP_FMAC4 soap_in_PointerTosaml1__SubjectStatementAbstractType(struct soap *soap, const char *tag, struct saml1__SubjectStatementAbstractType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml1__SubjectStatementAbstractType **)soap_malloc(soap, sizeof(struct saml1__SubjectStatementAbstractType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml1__SubjectStatementAbstractType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml1__SubjectStatementAbstractType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml1__SubjectStatementAbstractType, sizeof(struct saml1__SubjectStatementAbstractType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__SubjectStatementAbstractType(struct soap *soap, struct saml1__SubjectStatementAbstractType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml1__SubjectStatementAbstractType(soap, tag ? tag : "saml1:SubjectStatementAbstractType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__SubjectStatementAbstractType ** SOAP_FMAC4 soap_get_PointerTosaml1__SubjectStatementAbstractType(struct soap *soap, struct saml1__SubjectStatementAbstractType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml1__SubjectStatementAbstractType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__StatementAbstractType(struct soap *soap, struct saml1__StatementAbstractType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml1__StatementAbstractType))
		soap_serialize_saml1__StatementAbstractType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__StatementAbstractType(struct soap *soap, const char *tag, int id, struct saml1__StatementAbstractType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml1__StatementAbstractType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml1__StatementAbstractType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml1__StatementAbstractType ** SOAP_FMAC4 soap_in_PointerTosaml1__StatementAbstractType(struct soap *soap, const char *tag, struct saml1__StatementAbstractType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml1__StatementAbstractType **)soap_malloc(soap, sizeof(struct saml1__StatementAbstractType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml1__StatementAbstractType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml1__StatementAbstractType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml1__StatementAbstractType, sizeof(struct saml1__StatementAbstractType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__StatementAbstractType(struct soap *soap, struct saml1__StatementAbstractType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml1__StatementAbstractType(soap, tag ? tag : "saml1:StatementAbstractType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__StatementAbstractType ** SOAP_FMAC4 soap_get_PointerTosaml1__StatementAbstractType(struct soap *soap, struct saml1__StatementAbstractType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml1__StatementAbstractType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__AdviceType(struct soap *soap, struct saml1__AdviceType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml1__AdviceType))
		soap_serialize_saml1__AdviceType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__AdviceType(struct soap *soap, const char *tag, int id, struct saml1__AdviceType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml1__AdviceType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml1__AdviceType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml1__AdviceType ** SOAP_FMAC4 soap_in_PointerTosaml1__AdviceType(struct soap *soap, const char *tag, struct saml1__AdviceType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml1__AdviceType **)soap_malloc(soap, sizeof(struct saml1__AdviceType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml1__AdviceType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml1__AdviceType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml1__AdviceType, sizeof(struct saml1__AdviceType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__AdviceType(struct soap *soap, struct saml1__AdviceType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml1__AdviceType(soap, tag ? tag : "saml1:AdviceType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__AdviceType ** SOAP_FMAC4 soap_get_PointerTosaml1__AdviceType(struct soap *soap, struct saml1__AdviceType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml1__AdviceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosaml1__ConditionsType(struct soap *soap, struct saml1__ConditionsType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_saml1__ConditionsType))
		soap_serialize_saml1__ConditionsType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosaml1__ConditionsType(struct soap *soap, const char *tag, int id, struct saml1__ConditionsType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_saml1__ConditionsType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_saml1__ConditionsType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct saml1__ConditionsType ** SOAP_FMAC4 soap_in_PointerTosaml1__ConditionsType(struct soap *soap, const char *tag, struct saml1__ConditionsType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct saml1__ConditionsType **)soap_malloc(soap, sizeof(struct saml1__ConditionsType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_saml1__ConditionsType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct saml1__ConditionsType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_saml1__ConditionsType, sizeof(struct saml1__ConditionsType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosaml1__ConditionsType(struct soap *soap, struct saml1__ConditionsType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTosaml1__ConditionsType(soap, tag ? tag : "saml1:ConditionsType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct saml1__ConditionsType ** SOAP_FMAC4 soap_get_PointerTosaml1__ConditionsType(struct soap *soap, struct saml1__ConditionsType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTosaml1__ConditionsType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__wsc__DerivedKeyTokenType_sequence(struct soap *soap, struct __wsc__DerivedKeyTokenType_sequence *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE___wsc__DerivedKeyTokenType_sequence))
		soap_serialize___wsc__DerivedKeyTokenType_sequence(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__wsc__DerivedKeyTokenType_sequence(struct soap *soap, const char *tag, int id, struct __wsc__DerivedKeyTokenType_sequence *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE___wsc__DerivedKeyTokenType_sequence, NULL);
	if (id < 0)
		return soap->error;
	return soap_out___wsc__DerivedKeyTokenType_sequence(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct __wsc__DerivedKeyTokenType_sequence ** SOAP_FMAC4 soap_in_PointerTo__wsc__DerivedKeyTokenType_sequence(struct soap *soap, const char *tag, struct __wsc__DerivedKeyTokenType_sequence **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct __wsc__DerivedKeyTokenType_sequence **)soap_malloc(soap, sizeof(struct __wsc__DerivedKeyTokenType_sequence *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in___wsc__DerivedKeyTokenType_sequence(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct __wsc__DerivedKeyTokenType_sequence **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE___wsc__DerivedKeyTokenType_sequence, sizeof(struct __wsc__DerivedKeyTokenType_sequence), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__wsc__DerivedKeyTokenType_sequence(struct soap *soap, struct __wsc__DerivedKeyTokenType_sequence *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo__wsc__DerivedKeyTokenType_sequence(soap, tag ? tag : "-wsc:DerivedKeyTokenType-sequence", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct __wsc__DerivedKeyTokenType_sequence ** SOAP_FMAC4 soap_get_PointerTo__wsc__DerivedKeyTokenType_sequence(struct soap *soap, struct __wsc__DerivedKeyTokenType_sequence **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo__wsc__DerivedKeyTokenType_sequence(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToULONG64(struct soap *soap, ULONG64 *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_ULONG64);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToULONG64(struct soap *soap, const char *tag, int id, ULONG64 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ULONG64, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_ULONG64(soap, tag, id, *a, type);
}

SOAP_FMAC3 ULONG64 ** SOAP_FMAC4 soap_in_PointerToULONG64(struct soap *soap, const char *tag, ULONG64 **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ULONG64 **)soap_malloc(soap, sizeof(ULONG64 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ULONG64(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ULONG64 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ULONG64, sizeof(ULONG64), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToULONG64(struct soap *soap, ULONG64 *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToULONG64(soap, tag ? tag : "unsignedLong", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ULONG64 ** SOAP_FMAC4 soap_get_PointerToULONG64(struct soap *soap, ULONG64 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToULONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsc__PropertiesType(struct soap *soap, struct wsc__PropertiesType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wsc__PropertiesType))
		soap_serialize_wsc__PropertiesType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsc__PropertiesType(struct soap *soap, const char *tag, int id, struct wsc__PropertiesType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wsc__PropertiesType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_wsc__PropertiesType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct wsc__PropertiesType ** SOAP_FMAC4 soap_in_PointerTowsc__PropertiesType(struct soap *soap, const char *tag, struct wsc__PropertiesType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct wsc__PropertiesType **)soap_malloc(soap, sizeof(struct wsc__PropertiesType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_wsc__PropertiesType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct wsc__PropertiesType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wsc__PropertiesType, sizeof(struct wsc__PropertiesType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsc__PropertiesType(struct soap *soap, struct wsc__PropertiesType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowsc__PropertiesType(soap, tag ? tag : "wsc:PropertiesType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct wsc__PropertiesType ** SOAP_FMAC4 soap_get_PointerTowsc__PropertiesType(struct soap *soap, struct wsc__PropertiesType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowsc__PropertiesType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsc__FaultCodeOpenEnumType(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_wsc__FaultCodeOpenEnumType);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsc__FaultCodeOpenEnumType(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_wsc__FaultCodeOpenEnumType);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_wsc__FaultCodeOpenEnumType(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_wsc__FaultCodeOpenEnumType, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsc__FaultCodeOpenEnumType(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_wsc__FaultCodeOpenEnumType(soap, tag ? tag : "wsc:FaultCodeOpenEnumType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_wsc__FaultCodeOpenEnumType(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_wsc__FaultCodeOpenEnumType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_xenc__ReferenceList(struct soap *soap, struct _xenc__ReferenceList *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__xenc__ReferenceList))
		soap_serialize__xenc__ReferenceList(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_xenc__ReferenceList(struct soap *soap, const char *tag, int id, struct _xenc__ReferenceList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__xenc__ReferenceList, NULL);
	if (id < 0)
		return soap->error;
	return soap_out__xenc__ReferenceList(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct _xenc__ReferenceList ** SOAP_FMAC4 soap_in_PointerTo_xenc__ReferenceList(struct soap *soap, const char *tag, struct _xenc__ReferenceList **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct _xenc__ReferenceList **)soap_malloc(soap, sizeof(struct _xenc__ReferenceList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in__xenc__ReferenceList(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct _xenc__ReferenceList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__xenc__ReferenceList, sizeof(struct _xenc__ReferenceList), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_xenc__ReferenceList(struct soap *soap, struct _xenc__ReferenceList *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_xenc__ReferenceList(soap, tag ? tag : "xenc:ReferenceList", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct _xenc__ReferenceList ** SOAP_FMAC4 soap_get_PointerTo_xenc__ReferenceList(struct soap *soap, struct _xenc__ReferenceList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_xenc__ReferenceList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__xenc__union_ReferenceList(struct soap *soap, struct __xenc__union_ReferenceList *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE___xenc__union_ReferenceList))
		soap_serialize___xenc__union_ReferenceList(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__xenc__union_ReferenceList(struct soap *soap, const char *tag, int id, struct __xenc__union_ReferenceList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE___xenc__union_ReferenceList, NULL);
	if (id < 0)
		return soap->error;
	return soap_out___xenc__union_ReferenceList(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct __xenc__union_ReferenceList ** SOAP_FMAC4 soap_in_PointerTo__xenc__union_ReferenceList(struct soap *soap, const char *tag, struct __xenc__union_ReferenceList **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct __xenc__union_ReferenceList **)soap_malloc(soap, sizeof(struct __xenc__union_ReferenceList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in___xenc__union_ReferenceList(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct __xenc__union_ReferenceList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE___xenc__union_ReferenceList, sizeof(struct __xenc__union_ReferenceList), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__xenc__union_ReferenceList(struct soap *soap, struct __xenc__union_ReferenceList *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo__xenc__union_ReferenceList(soap, tag ? tag : "-xenc:union-ReferenceList", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct __xenc__union_ReferenceList ** SOAP_FMAC4 soap_get_PointerTo__xenc__union_ReferenceList(struct soap *soap, struct __xenc__union_ReferenceList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo__xenc__union_ReferenceList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__ReferenceType(struct soap *soap, struct xenc__ReferenceType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_xenc__ReferenceType))
		soap_serialize_xenc__ReferenceType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__ReferenceType(struct soap *soap, const char *tag, int id, struct xenc__ReferenceType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_xenc__ReferenceType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_xenc__ReferenceType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct xenc__ReferenceType ** SOAP_FMAC4 soap_in_PointerToxenc__ReferenceType(struct soap *soap, const char *tag, struct xenc__ReferenceType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct xenc__ReferenceType **)soap_malloc(soap, sizeof(struct xenc__ReferenceType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_xenc__ReferenceType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct xenc__ReferenceType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xenc__ReferenceType, sizeof(struct xenc__ReferenceType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__ReferenceType(struct soap *soap, struct xenc__ReferenceType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToxenc__ReferenceType(soap, tag ? tag : "xenc:ReferenceType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct xenc__ReferenceType ** SOAP_FMAC4 soap_get_PointerToxenc__ReferenceType(struct soap *soap, struct xenc__ReferenceType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxenc__ReferenceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__EncryptionPropertyType(struct soap *soap, struct xenc__EncryptionPropertyType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_xenc__EncryptionPropertyType))
		soap_serialize_xenc__EncryptionPropertyType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__EncryptionPropertyType(struct soap *soap, const char *tag, int id, struct xenc__EncryptionPropertyType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_xenc__EncryptionPropertyType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_xenc__EncryptionPropertyType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct xenc__EncryptionPropertyType ** SOAP_FMAC4 soap_in_PointerToxenc__EncryptionPropertyType(struct soap *soap, const char *tag, struct xenc__EncryptionPropertyType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct xenc__EncryptionPropertyType **)soap_malloc(soap, sizeof(struct xenc__EncryptionPropertyType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_xenc__EncryptionPropertyType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct xenc__EncryptionPropertyType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xenc__EncryptionPropertyType, sizeof(struct xenc__EncryptionPropertyType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__EncryptionPropertyType(struct soap *soap, struct xenc__EncryptionPropertyType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToxenc__EncryptionPropertyType(soap, tag ? tag : "xenc:EncryptionPropertyType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct xenc__EncryptionPropertyType ** SOAP_FMAC4 soap_get_PointerToxenc__EncryptionPropertyType(struct soap *soap, struct xenc__EncryptionPropertyType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxenc__EncryptionPropertyType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTo_ds__Transform(struct soap *soap, struct ds__TransformType **const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTo_ds__Transform))
		soap_serialize_PointerTo_ds__Transform(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTo_ds__Transform(struct soap *soap, const char *tag, int id, struct ds__TransformType **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTo_ds__Transform, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTo_ds__Transform(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ds__TransformType *** SOAP_FMAC4 soap_in_PointerToPointerTo_ds__Transform(struct soap *soap, const char *tag, struct ds__TransformType ***a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ds__TransformType ***)soap_malloc(soap, sizeof(struct ds__TransformType **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTo_ds__Transform(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ds__TransformType ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ds__Transform, sizeof(struct ds__TransformType), 1, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTo_ds__Transform(struct soap *soap, struct ds__TransformType **const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToPointerTo_ds__Transform(soap, tag ? tag : "ds:Transform", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ds__TransformType *** SOAP_FMAC4 soap_get_PointerToPointerTo_ds__Transform(struct soap *soap, struct ds__TransformType ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTo_ds__Transform(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ds__Transform(struct soap *soap, struct ds__TransformType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ds__Transform))
		soap_serialize__ds__Transform(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ds__Transform(struct soap *soap, const char *tag, int id, struct ds__TransformType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ds__Transform, NULL);
	if (id < 0)
		return soap->error;
	return soap_out__ds__Transform(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ds__TransformType ** SOAP_FMAC4 soap_in_PointerTo_ds__Transform(struct soap *soap, const char *tag, struct ds__TransformType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ds__TransformType **)soap_malloc(soap, sizeof(struct ds__TransformType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in__ds__Transform(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ds__TransformType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ds__Transform, sizeof(struct ds__TransformType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ds__Transform(struct soap *soap, struct ds__TransformType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ds__Transform(soap, tag ? tag : "ds:Transform", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ds__TransformType ** SOAP_FMAC4 soap_get_PointerTo_ds__Transform(struct soap *soap, struct ds__TransformType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ds__Transform(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__TransformsType(struct soap *soap, struct xenc__TransformsType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_xenc__TransformsType))
		soap_serialize_xenc__TransformsType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__TransformsType(struct soap *soap, const char *tag, int id, struct xenc__TransformsType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_xenc__TransformsType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_xenc__TransformsType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct xenc__TransformsType ** SOAP_FMAC4 soap_in_PointerToxenc__TransformsType(struct soap *soap, const char *tag, struct xenc__TransformsType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct xenc__TransformsType **)soap_malloc(soap, sizeof(struct xenc__TransformsType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_xenc__TransformsType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct xenc__TransformsType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xenc__TransformsType, sizeof(struct xenc__TransformsType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__TransformsType(struct soap *soap, struct xenc__TransformsType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToxenc__TransformsType(soap, tag ? tag : "xenc:TransformsType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct xenc__TransformsType ** SOAP_FMAC4 soap_get_PointerToxenc__TransformsType(struct soap *soap, struct xenc__TransformsType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxenc__TransformsType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__CipherReferenceType(struct soap *soap, struct xenc__CipherReferenceType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_xenc__CipherReferenceType))
		soap_serialize_xenc__CipherReferenceType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__CipherReferenceType(struct soap *soap, const char *tag, int id, struct xenc__CipherReferenceType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_xenc__CipherReferenceType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_xenc__CipherReferenceType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct xenc__CipherReferenceType ** SOAP_FMAC4 soap_in_PointerToxenc__CipherReferenceType(struct soap *soap, const char *tag, struct xenc__CipherReferenceType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct xenc__CipherReferenceType **)soap_malloc(soap, sizeof(struct xenc__CipherReferenceType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_xenc__CipherReferenceType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct xenc__CipherReferenceType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xenc__CipherReferenceType, sizeof(struct xenc__CipherReferenceType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__CipherReferenceType(struct soap *soap, struct xenc__CipherReferenceType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToxenc__CipherReferenceType(soap, tag ? tag : "xenc:CipherReferenceType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct xenc__CipherReferenceType ** SOAP_FMAC4 soap_get_PointerToxenc__CipherReferenceType(struct soap *soap, struct xenc__CipherReferenceType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxenc__CipherReferenceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__EncryptionPropertiesType(struct soap *soap, struct xenc__EncryptionPropertiesType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_xenc__EncryptionPropertiesType))
		soap_serialize_xenc__EncryptionPropertiesType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__EncryptionPropertiesType(struct soap *soap, const char *tag, int id, struct xenc__EncryptionPropertiesType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_xenc__EncryptionPropertiesType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_xenc__EncryptionPropertiesType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct xenc__EncryptionPropertiesType ** SOAP_FMAC4 soap_in_PointerToxenc__EncryptionPropertiesType(struct soap *soap, const char *tag, struct xenc__EncryptionPropertiesType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct xenc__EncryptionPropertiesType **)soap_malloc(soap, sizeof(struct xenc__EncryptionPropertiesType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_xenc__EncryptionPropertiesType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct xenc__EncryptionPropertiesType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xenc__EncryptionPropertiesType, sizeof(struct xenc__EncryptionPropertiesType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__EncryptionPropertiesType(struct soap *soap, struct xenc__EncryptionPropertiesType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToxenc__EncryptionPropertiesType(soap, tag ? tag : "xenc:EncryptionPropertiesType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct xenc__EncryptionPropertiesType ** SOAP_FMAC4 soap_get_PointerToxenc__EncryptionPropertiesType(struct soap *soap, struct xenc__EncryptionPropertiesType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxenc__EncryptionPropertiesType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__CipherDataType(struct soap *soap, struct xenc__CipherDataType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_xenc__CipherDataType))
		soap_serialize_xenc__CipherDataType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__CipherDataType(struct soap *soap, const char *tag, int id, struct xenc__CipherDataType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_xenc__CipherDataType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_xenc__CipherDataType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct xenc__CipherDataType ** SOAP_FMAC4 soap_in_PointerToxenc__CipherDataType(struct soap *soap, const char *tag, struct xenc__CipherDataType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct xenc__CipherDataType **)soap_malloc(soap, sizeof(struct xenc__CipherDataType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_xenc__CipherDataType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct xenc__CipherDataType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xenc__CipherDataType, sizeof(struct xenc__CipherDataType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__CipherDataType(struct soap *soap, struct xenc__CipherDataType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToxenc__CipherDataType(soap, tag ? tag : "xenc:CipherDataType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct xenc__CipherDataType ** SOAP_FMAC4 soap_get_PointerToxenc__CipherDataType(struct soap *soap, struct xenc__CipherDataType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxenc__CipherDataType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ds__KeyInfo(struct soap *soap, struct ds__KeyInfoType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ds__KeyInfo))
		soap_serialize__ds__KeyInfo(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ds__KeyInfo(struct soap *soap, const char *tag, int id, struct ds__KeyInfoType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ds__KeyInfo, NULL);
	if (id < 0)
		return soap->error;
	return soap_out__ds__KeyInfo(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ds__KeyInfoType ** SOAP_FMAC4 soap_in_PointerTo_ds__KeyInfo(struct soap *soap, const char *tag, struct ds__KeyInfoType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ds__KeyInfoType **)soap_malloc(soap, sizeof(struct ds__KeyInfoType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in__ds__KeyInfo(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ds__KeyInfoType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ds__KeyInfo, sizeof(struct ds__KeyInfoType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ds__KeyInfo(struct soap *soap, struct ds__KeyInfoType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ds__KeyInfo(soap, tag ? tag : "ds:KeyInfo", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ds__KeyInfoType ** SOAP_FMAC4 soap_get_PointerTo_ds__KeyInfo(struct soap *soap, struct ds__KeyInfoType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ds__KeyInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxenc__EncryptionMethodType(struct soap *soap, struct xenc__EncryptionMethodType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_xenc__EncryptionMethodType))
		soap_serialize_xenc__EncryptionMethodType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxenc__EncryptionMethodType(struct soap *soap, const char *tag, int id, struct xenc__EncryptionMethodType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_xenc__EncryptionMethodType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_xenc__EncryptionMethodType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct xenc__EncryptionMethodType ** SOAP_FMAC4 soap_in_PointerToxenc__EncryptionMethodType(struct soap *soap, const char *tag, struct xenc__EncryptionMethodType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct xenc__EncryptionMethodType **)soap_malloc(soap, sizeof(struct xenc__EncryptionMethodType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_xenc__EncryptionMethodType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct xenc__EncryptionMethodType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xenc__EncryptionMethodType, sizeof(struct xenc__EncryptionMethodType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxenc__EncryptionMethodType(struct soap *soap, struct xenc__EncryptionMethodType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToxenc__EncryptionMethodType(soap, tag ? tag : "xenc:EncryptionMethodType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct xenc__EncryptionMethodType ** SOAP_FMAC4 soap_get_PointerToxenc__EncryptionMethodType(struct soap *soap, struct xenc__EncryptionMethodType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxenc__EncryptionMethodType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ds__MgmtData(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__ds__MgmtData(soap, tag ? tag : "ds:MgmtData", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ds__KeyName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__ds__KeyName(soap, tag ? tag : "ds:KeyName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ds__DigestValue(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__ds__DigestValue(soap, tag ? tag : "ds:DigestValue", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ds__DSAKeyValueType_sequence_(struct soap *soap, struct __ds__DSAKeyValueType_sequence_ *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE___ds__DSAKeyValueType_sequence_))
		soap_serialize___ds__DSAKeyValueType_sequence_(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ds__DSAKeyValueType_sequence_(struct soap *soap, const char *tag, int id, struct __ds__DSAKeyValueType_sequence_ *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE___ds__DSAKeyValueType_sequence_, NULL);
	if (id < 0)
		return soap->error;
	return soap_out___ds__DSAKeyValueType_sequence_(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct __ds__DSAKeyValueType_sequence_ ** SOAP_FMAC4 soap_in_PointerTo__ds__DSAKeyValueType_sequence_(struct soap *soap, const char *tag, struct __ds__DSAKeyValueType_sequence_ **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct __ds__DSAKeyValueType_sequence_ **)soap_malloc(soap, sizeof(struct __ds__DSAKeyValueType_sequence_ *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in___ds__DSAKeyValueType_sequence_(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct __ds__DSAKeyValueType_sequence_ **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE___ds__DSAKeyValueType_sequence_, sizeof(struct __ds__DSAKeyValueType_sequence_), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ds__DSAKeyValueType_sequence_(struct soap *soap, struct __ds__DSAKeyValueType_sequence_ *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo__ds__DSAKeyValueType_sequence_(soap, tag ? tag : "-ds:DSAKeyValueType-sequence", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct __ds__DSAKeyValueType_sequence_ ** SOAP_FMAC4 soap_get_PointerTo__ds__DSAKeyValueType_sequence_(struct soap *soap, struct __ds__DSAKeyValueType_sequence_ **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo__ds__DSAKeyValueType_sequence_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ds__DSAKeyValueType_sequence(struct soap *soap, struct __ds__DSAKeyValueType_sequence *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE___ds__DSAKeyValueType_sequence))
		soap_serialize___ds__DSAKeyValueType_sequence(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ds__DSAKeyValueType_sequence(struct soap *soap, const char *tag, int id, struct __ds__DSAKeyValueType_sequence *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE___ds__DSAKeyValueType_sequence, NULL);
	if (id < 0)
		return soap->error;
	return soap_out___ds__DSAKeyValueType_sequence(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct __ds__DSAKeyValueType_sequence ** SOAP_FMAC4 soap_in_PointerTo__ds__DSAKeyValueType_sequence(struct soap *soap, const char *tag, struct __ds__DSAKeyValueType_sequence **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct __ds__DSAKeyValueType_sequence **)soap_malloc(soap, sizeof(struct __ds__DSAKeyValueType_sequence *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in___ds__DSAKeyValueType_sequence(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct __ds__DSAKeyValueType_sequence **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE___ds__DSAKeyValueType_sequence, sizeof(struct __ds__DSAKeyValueType_sequence), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ds__DSAKeyValueType_sequence(struct soap *soap, struct __ds__DSAKeyValueType_sequence *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo__ds__DSAKeyValueType_sequence(soap, tag ? tag : "-ds:DSAKeyValueType-sequence", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct __ds__DSAKeyValueType_sequence ** SOAP_FMAC4 soap_get_PointerTo__ds__DSAKeyValueType_sequence(struct soap *soap, struct __ds__DSAKeyValueType_sequence **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo__ds__DSAKeyValueType_sequence(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ds__X509DataType_sequence(struct soap *soap, struct __ds__X509DataType_sequence *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE___ds__X509DataType_sequence))
		soap_serialize___ds__X509DataType_sequence(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ds__X509DataType_sequence(struct soap *soap, const char *tag, int id, struct __ds__X509DataType_sequence *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE___ds__X509DataType_sequence, NULL);
	if (id < 0)
		return soap->error;
	return soap_out___ds__X509DataType_sequence(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct __ds__X509DataType_sequence ** SOAP_FMAC4 soap_in_PointerTo__ds__X509DataType_sequence(struct soap *soap, const char *tag, struct __ds__X509DataType_sequence **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct __ds__X509DataType_sequence **)soap_malloc(soap, sizeof(struct __ds__X509DataType_sequence *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in___ds__X509DataType_sequence(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct __ds__X509DataType_sequence **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE___ds__X509DataType_sequence, sizeof(struct __ds__X509DataType_sequence), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ds__X509DataType_sequence(struct soap *soap, struct __ds__X509DataType_sequence *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo__ds__X509DataType_sequence(soap, tag ? tag : "-ds:X509DataType-sequence", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct __ds__X509DataType_sequence ** SOAP_FMAC4 soap_get_PointerTo__ds__X509DataType_sequence(struct soap *soap, struct __ds__X509DataType_sequence **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo__ds__X509DataType_sequence(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__X509IssuerSerialType(struct soap *soap, struct ds__X509IssuerSerialType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ds__X509IssuerSerialType))
		soap_serialize_ds__X509IssuerSerialType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__X509IssuerSerialType(struct soap *soap, const char *tag, int id, struct ds__X509IssuerSerialType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ds__X509IssuerSerialType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_ds__X509IssuerSerialType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ds__X509IssuerSerialType ** SOAP_FMAC4 soap_in_PointerTods__X509IssuerSerialType(struct soap *soap, const char *tag, struct ds__X509IssuerSerialType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ds__X509IssuerSerialType **)soap_malloc(soap, sizeof(struct ds__X509IssuerSerialType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ds__X509IssuerSerialType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ds__X509IssuerSerialType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ds__X509IssuerSerialType, sizeof(struct ds__X509IssuerSerialType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__X509IssuerSerialType(struct soap *soap, struct ds__X509IssuerSerialType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTods__X509IssuerSerialType(soap, tag ? tag : "ds:X509IssuerSerialType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ds__X509IssuerSerialType ** SOAP_FMAC4 soap_get_PointerTods__X509IssuerSerialType(struct soap *soap, struct ds__X509IssuerSerialType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTods__X509IssuerSerialType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__RSAKeyValueType(struct soap *soap, struct ds__RSAKeyValueType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ds__RSAKeyValueType))
		soap_serialize_ds__RSAKeyValueType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__RSAKeyValueType(struct soap *soap, const char *tag, int id, struct ds__RSAKeyValueType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ds__RSAKeyValueType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_ds__RSAKeyValueType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ds__RSAKeyValueType ** SOAP_FMAC4 soap_in_PointerTods__RSAKeyValueType(struct soap *soap, const char *tag, struct ds__RSAKeyValueType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ds__RSAKeyValueType **)soap_malloc(soap, sizeof(struct ds__RSAKeyValueType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ds__RSAKeyValueType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ds__RSAKeyValueType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ds__RSAKeyValueType, sizeof(struct ds__RSAKeyValueType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__RSAKeyValueType(struct soap *soap, struct ds__RSAKeyValueType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTods__RSAKeyValueType(soap, tag ? tag : "ds:RSAKeyValueType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ds__RSAKeyValueType ** SOAP_FMAC4 soap_get_PointerTods__RSAKeyValueType(struct soap *soap, struct ds__RSAKeyValueType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTods__RSAKeyValueType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__DSAKeyValueType(struct soap *soap, struct ds__DSAKeyValueType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ds__DSAKeyValueType))
		soap_serialize_ds__DSAKeyValueType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__DSAKeyValueType(struct soap *soap, const char *tag, int id, struct ds__DSAKeyValueType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ds__DSAKeyValueType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_ds__DSAKeyValueType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ds__DSAKeyValueType ** SOAP_FMAC4 soap_in_PointerTods__DSAKeyValueType(struct soap *soap, const char *tag, struct ds__DSAKeyValueType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ds__DSAKeyValueType **)soap_malloc(soap, sizeof(struct ds__DSAKeyValueType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ds__DSAKeyValueType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ds__DSAKeyValueType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ds__DSAKeyValueType, sizeof(struct ds__DSAKeyValueType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__DSAKeyValueType(struct soap *soap, struct ds__DSAKeyValueType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTods__DSAKeyValueType(soap, tag ? tag : "ds:DSAKeyValueType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ds__DSAKeyValueType ** SOAP_FMAC4 soap_get_PointerTods__DSAKeyValueType(struct soap *soap, struct ds__DSAKeyValueType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTods__DSAKeyValueType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__TransformType(struct soap *soap, struct ds__TransformType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ds__TransformType))
		soap_serialize_ds__TransformType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__TransformType(struct soap *soap, const char *tag, int id, struct ds__TransformType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ds__TransformType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_ds__TransformType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ds__TransformType ** SOAP_FMAC4 soap_in_PointerTods__TransformType(struct soap *soap, const char *tag, struct ds__TransformType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ds__TransformType **)soap_malloc(soap, sizeof(struct ds__TransformType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ds__TransformType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ds__TransformType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ds__TransformType, sizeof(struct ds__TransformType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__TransformType(struct soap *soap, struct ds__TransformType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTods__TransformType(soap, tag ? tag : "ds:TransformType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ds__TransformType ** SOAP_FMAC4 soap_get_PointerTods__TransformType(struct soap *soap, struct ds__TransformType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTods__TransformType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__DigestMethodType(struct soap *soap, struct ds__DigestMethodType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ds__DigestMethodType))
		soap_serialize_ds__DigestMethodType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__DigestMethodType(struct soap *soap, const char *tag, int id, struct ds__DigestMethodType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ds__DigestMethodType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_ds__DigestMethodType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ds__DigestMethodType ** SOAP_FMAC4 soap_in_PointerTods__DigestMethodType(struct soap *soap, const char *tag, struct ds__DigestMethodType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ds__DigestMethodType **)soap_malloc(soap, sizeof(struct ds__DigestMethodType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ds__DigestMethodType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ds__DigestMethodType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ds__DigestMethodType, sizeof(struct ds__DigestMethodType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__DigestMethodType(struct soap *soap, struct ds__DigestMethodType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTods__DigestMethodType(soap, tag ? tag : "ds:DigestMethodType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ds__DigestMethodType ** SOAP_FMAC4 soap_get_PointerTods__DigestMethodType(struct soap *soap, struct ds__DigestMethodType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTods__DigestMethodType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__TransformsType(struct soap *soap, struct ds__TransformsType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ds__TransformsType))
		soap_serialize_ds__TransformsType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__TransformsType(struct soap *soap, const char *tag, int id, struct ds__TransformsType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ds__TransformsType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_ds__TransformsType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ds__TransformsType ** SOAP_FMAC4 soap_in_PointerTods__TransformsType(struct soap *soap, const char *tag, struct ds__TransformsType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ds__TransformsType **)soap_malloc(soap, sizeof(struct ds__TransformsType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ds__TransformsType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ds__TransformsType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ds__TransformsType, sizeof(struct ds__TransformsType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__TransformsType(struct soap *soap, struct ds__TransformsType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTods__TransformsType(soap, tag ? tag : "ds:TransformsType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ds__TransformsType ** SOAP_FMAC4 soap_get_PointerTods__TransformsType(struct soap *soap, struct ds__TransformsType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTods__TransformsType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_int);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_int, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_int, sizeof(int), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToint(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__ReferenceType(struct soap *soap, struct ds__ReferenceType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ds__ReferenceType))
		soap_serialize_ds__ReferenceType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__ReferenceType(struct soap *soap, const char *tag, int id, struct ds__ReferenceType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ds__ReferenceType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_ds__ReferenceType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ds__ReferenceType ** SOAP_FMAC4 soap_in_PointerTods__ReferenceType(struct soap *soap, const char *tag, struct ds__ReferenceType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ds__ReferenceType **)soap_malloc(soap, sizeof(struct ds__ReferenceType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ds__ReferenceType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ds__ReferenceType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ds__ReferenceType, sizeof(struct ds__ReferenceType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__ReferenceType(struct soap *soap, struct ds__ReferenceType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTods__ReferenceType(soap, tag ? tag : "ds:ReferenceType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ds__ReferenceType ** SOAP_FMAC4 soap_get_PointerTods__ReferenceType(struct soap *soap, struct ds__ReferenceType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTods__ReferenceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__SignatureMethodType(struct soap *soap, struct ds__SignatureMethodType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ds__SignatureMethodType))
		soap_serialize_ds__SignatureMethodType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__SignatureMethodType(struct soap *soap, const char *tag, int id, struct ds__SignatureMethodType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ds__SignatureMethodType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_ds__SignatureMethodType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ds__SignatureMethodType ** SOAP_FMAC4 soap_in_PointerTods__SignatureMethodType(struct soap *soap, const char *tag, struct ds__SignatureMethodType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ds__SignatureMethodType **)soap_malloc(soap, sizeof(struct ds__SignatureMethodType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ds__SignatureMethodType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ds__SignatureMethodType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ds__SignatureMethodType, sizeof(struct ds__SignatureMethodType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__SignatureMethodType(struct soap *soap, struct ds__SignatureMethodType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTods__SignatureMethodType(soap, tag ? tag : "ds:SignatureMethodType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ds__SignatureMethodType ** SOAP_FMAC4 soap_get_PointerTods__SignatureMethodType(struct soap *soap, struct ds__SignatureMethodType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTods__SignatureMethodType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__CanonicalizationMethodType(struct soap *soap, struct ds__CanonicalizationMethodType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ds__CanonicalizationMethodType))
		soap_serialize_ds__CanonicalizationMethodType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__CanonicalizationMethodType(struct soap *soap, const char *tag, int id, struct ds__CanonicalizationMethodType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ds__CanonicalizationMethodType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_ds__CanonicalizationMethodType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ds__CanonicalizationMethodType ** SOAP_FMAC4 soap_in_PointerTods__CanonicalizationMethodType(struct soap *soap, const char *tag, struct ds__CanonicalizationMethodType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ds__CanonicalizationMethodType **)soap_malloc(soap, sizeof(struct ds__CanonicalizationMethodType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ds__CanonicalizationMethodType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ds__CanonicalizationMethodType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ds__CanonicalizationMethodType, sizeof(struct ds__CanonicalizationMethodType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__CanonicalizationMethodType(struct soap *soap, struct ds__CanonicalizationMethodType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTods__CanonicalizationMethodType(soap, tag ? tag : "ds:CanonicalizationMethodType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ds__CanonicalizationMethodType ** SOAP_FMAC4 soap_get_PointerTods__CanonicalizationMethodType(struct soap *soap, struct ds__CanonicalizationMethodType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTods__CanonicalizationMethodType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__SecurityTokenReference(struct soap *soap, struct _wsse__SecurityTokenReference *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__wsse__SecurityTokenReference))
		soap_serialize__wsse__SecurityTokenReference(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__SecurityTokenReference(struct soap *soap, const char *tag, int id, struct _wsse__SecurityTokenReference *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__wsse__SecurityTokenReference, NULL);
	if (id < 0)
		return soap->error;
	return soap_out__wsse__SecurityTokenReference(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct _wsse__SecurityTokenReference ** SOAP_FMAC4 soap_in_PointerTo_wsse__SecurityTokenReference(struct soap *soap, const char *tag, struct _wsse__SecurityTokenReference **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct _wsse__SecurityTokenReference **)soap_malloc(soap, sizeof(struct _wsse__SecurityTokenReference *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in__wsse__SecurityTokenReference(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct _wsse__SecurityTokenReference **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__wsse__SecurityTokenReference, sizeof(struct _wsse__SecurityTokenReference), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__SecurityTokenReference(struct soap *soap, struct _wsse__SecurityTokenReference *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_wsse__SecurityTokenReference(soap, tag ? tag : "wsse:SecurityTokenReference", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct _wsse__SecurityTokenReference ** SOAP_FMAC4 soap_get_PointerTo_wsse__SecurityTokenReference(struct soap *soap, struct _wsse__SecurityTokenReference **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_wsse__SecurityTokenReference(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__RetrievalMethodType(struct soap *soap, struct ds__RetrievalMethodType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ds__RetrievalMethodType))
		soap_serialize_ds__RetrievalMethodType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__RetrievalMethodType(struct soap *soap, const char *tag, int id, struct ds__RetrievalMethodType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ds__RetrievalMethodType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_ds__RetrievalMethodType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ds__RetrievalMethodType ** SOAP_FMAC4 soap_in_PointerTods__RetrievalMethodType(struct soap *soap, const char *tag, struct ds__RetrievalMethodType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ds__RetrievalMethodType **)soap_malloc(soap, sizeof(struct ds__RetrievalMethodType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ds__RetrievalMethodType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ds__RetrievalMethodType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ds__RetrievalMethodType, sizeof(struct ds__RetrievalMethodType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__RetrievalMethodType(struct soap *soap, struct ds__RetrievalMethodType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTods__RetrievalMethodType(soap, tag ? tag : "ds:RetrievalMethodType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ds__RetrievalMethodType ** SOAP_FMAC4 soap_get_PointerTods__RetrievalMethodType(struct soap *soap, struct ds__RetrievalMethodType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTods__RetrievalMethodType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__KeyValueType(struct soap *soap, struct ds__KeyValueType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ds__KeyValueType))
		soap_serialize_ds__KeyValueType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__KeyValueType(struct soap *soap, const char *tag, int id, struct ds__KeyValueType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ds__KeyValueType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_ds__KeyValueType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ds__KeyValueType ** SOAP_FMAC4 soap_in_PointerTods__KeyValueType(struct soap *soap, const char *tag, struct ds__KeyValueType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ds__KeyValueType **)soap_malloc(soap, sizeof(struct ds__KeyValueType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ds__KeyValueType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ds__KeyValueType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ds__KeyValueType, sizeof(struct ds__KeyValueType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__KeyValueType(struct soap *soap, struct ds__KeyValueType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTods__KeyValueType(soap, tag ? tag : "ds:KeyValueType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ds__KeyValueType ** SOAP_FMAC4 soap_get_PointerTods__KeyValueType(struct soap *soap, struct ds__KeyValueType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTods__KeyValueType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_c14n__InclusiveNamespaces(struct soap *soap, struct _c14n__InclusiveNamespaces *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__c14n__InclusiveNamespaces))
		soap_serialize__c14n__InclusiveNamespaces(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_c14n__InclusiveNamespaces(struct soap *soap, const char *tag, int id, struct _c14n__InclusiveNamespaces *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__c14n__InclusiveNamespaces, NULL);
	if (id < 0)
		return soap->error;
	return soap_out__c14n__InclusiveNamespaces(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct _c14n__InclusiveNamespaces ** SOAP_FMAC4 soap_in_PointerTo_c14n__InclusiveNamespaces(struct soap *soap, const char *tag, struct _c14n__InclusiveNamespaces **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct _c14n__InclusiveNamespaces **)soap_malloc(soap, sizeof(struct _c14n__InclusiveNamespaces *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in__c14n__InclusiveNamespaces(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct _c14n__InclusiveNamespaces **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__c14n__InclusiveNamespaces, sizeof(struct _c14n__InclusiveNamespaces), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_c14n__InclusiveNamespaces(struct soap *soap, struct _c14n__InclusiveNamespaces *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_c14n__InclusiveNamespaces(soap, tag ? tag : "c14n:InclusiveNamespaces", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct _c14n__InclusiveNamespaces ** SOAP_FMAC4 soap_get_PointerTo_c14n__InclusiveNamespaces(struct soap *soap, struct _c14n__InclusiveNamespaces **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_c14n__InclusiveNamespaces(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__KeyInfoType(struct soap *soap, struct ds__KeyInfoType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ds__KeyInfoType))
		soap_serialize_ds__KeyInfoType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__KeyInfoType(struct soap *soap, const char *tag, int id, struct ds__KeyInfoType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ds__KeyInfoType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_ds__KeyInfoType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ds__KeyInfoType ** SOAP_FMAC4 soap_in_PointerTods__KeyInfoType(struct soap *soap, const char *tag, struct ds__KeyInfoType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ds__KeyInfoType **)soap_malloc(soap, sizeof(struct ds__KeyInfoType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ds__KeyInfoType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ds__KeyInfoType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ds__KeyInfoType, sizeof(struct ds__KeyInfoType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__KeyInfoType(struct soap *soap, struct ds__KeyInfoType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTods__KeyInfoType(soap, tag ? tag : "ds:KeyInfoType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ds__KeyInfoType ** SOAP_FMAC4 soap_get_PointerTods__KeyInfoType(struct soap *soap, struct ds__KeyInfoType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTods__KeyInfoType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__SignedInfoType(struct soap *soap, struct ds__SignedInfoType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ds__SignedInfoType))
		soap_serialize_ds__SignedInfoType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__SignedInfoType(struct soap *soap, const char *tag, int id, struct ds__SignedInfoType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ds__SignedInfoType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_ds__SignedInfoType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ds__SignedInfoType ** SOAP_FMAC4 soap_in_PointerTods__SignedInfoType(struct soap *soap, const char *tag, struct ds__SignedInfoType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ds__SignedInfoType **)soap_malloc(soap, sizeof(struct ds__SignedInfoType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ds__SignedInfoType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ds__SignedInfoType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ds__SignedInfoType, sizeof(struct ds__SignedInfoType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__SignedInfoType(struct soap *soap, struct ds__SignedInfoType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTods__SignedInfoType(soap, tag ? tag : "ds:SignedInfoType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ds__SignedInfoType ** SOAP_FMAC4 soap_get_PointerTods__SignedInfoType(struct soap *soap, struct ds__SignedInfoType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTods__SignedInfoType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__ds__SignatureValue(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__ds__SignatureValue(soap, tag ? tag : "ds:SignatureValue", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTods__X509DataType(struct soap *soap, struct ds__X509DataType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ds__X509DataType))
		soap_serialize_ds__X509DataType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTods__X509DataType(struct soap *soap, const char *tag, int id, struct ds__X509DataType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ds__X509DataType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_ds__X509DataType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ds__X509DataType ** SOAP_FMAC4 soap_in_PointerTods__X509DataType(struct soap *soap, const char *tag, struct ds__X509DataType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ds__X509DataType **)soap_malloc(soap, sizeof(struct ds__X509DataType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ds__X509DataType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ds__X509DataType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ds__X509DataType, sizeof(struct ds__X509DataType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTods__X509DataType(struct soap *soap, struct ds__X509DataType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTods__X509DataType(soap, tag ? tag : "ds:X509DataType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ds__X509DataType ** SOAP_FMAC4 soap_get_PointerTods__X509DataType(struct soap *soap, struct ds__X509DataType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTods__X509DataType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__Embedded(struct soap *soap, struct _wsse__Embedded *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__wsse__Embedded))
		soap_serialize__wsse__Embedded(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__Embedded(struct soap *soap, const char *tag, int id, struct _wsse__Embedded *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__wsse__Embedded, NULL);
	if (id < 0)
		return soap->error;
	return soap_out__wsse__Embedded(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct _wsse__Embedded ** SOAP_FMAC4 soap_in_PointerTo_wsse__Embedded(struct soap *soap, const char *tag, struct _wsse__Embedded **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct _wsse__Embedded **)soap_malloc(soap, sizeof(struct _wsse__Embedded *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in__wsse__Embedded(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct _wsse__Embedded **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__wsse__Embedded, sizeof(struct _wsse__Embedded), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__Embedded(struct soap *soap, struct _wsse__Embedded *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_wsse__Embedded(soap, tag ? tag : "wsse:Embedded", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct _wsse__Embedded ** SOAP_FMAC4 soap_get_PointerTo_wsse__Embedded(struct soap *soap, struct _wsse__Embedded **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_wsse__Embedded(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__KeyIdentifier(struct soap *soap, struct _wsse__KeyIdentifier *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__wsse__KeyIdentifier))
		soap_serialize__wsse__KeyIdentifier(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__KeyIdentifier(struct soap *soap, const char *tag, int id, struct _wsse__KeyIdentifier *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__wsse__KeyIdentifier, NULL);
	if (id < 0)
		return soap->error;
	return soap_out__wsse__KeyIdentifier(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct _wsse__KeyIdentifier ** SOAP_FMAC4 soap_in_PointerTo_wsse__KeyIdentifier(struct soap *soap, const char *tag, struct _wsse__KeyIdentifier **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct _wsse__KeyIdentifier **)soap_malloc(soap, sizeof(struct _wsse__KeyIdentifier *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in__wsse__KeyIdentifier(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct _wsse__KeyIdentifier **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__wsse__KeyIdentifier, sizeof(struct _wsse__KeyIdentifier), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__KeyIdentifier(struct soap *soap, struct _wsse__KeyIdentifier *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_wsse__KeyIdentifier(soap, tag ? tag : "wsse:KeyIdentifier", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct _wsse__KeyIdentifier ** SOAP_FMAC4 soap_get_PointerTo_wsse__KeyIdentifier(struct soap *soap, struct _wsse__KeyIdentifier **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_wsse__KeyIdentifier(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__Reference(struct soap *soap, struct _wsse__Reference *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__wsse__Reference))
		soap_serialize__wsse__Reference(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__Reference(struct soap *soap, const char *tag, int id, struct _wsse__Reference *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__wsse__Reference, NULL);
	if (id < 0)
		return soap->error;
	return soap_out__wsse__Reference(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct _wsse__Reference ** SOAP_FMAC4 soap_in_PointerTo_wsse__Reference(struct soap *soap, const char *tag, struct _wsse__Reference **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct _wsse__Reference **)soap_malloc(soap, sizeof(struct _wsse__Reference *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in__wsse__Reference(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct _wsse__Reference **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__wsse__Reference, sizeof(struct _wsse__Reference), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__Reference(struct soap *soap, struct _wsse__Reference *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_wsse__Reference(soap, tag ? tag : "wsse:Reference", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct _wsse__Reference ** SOAP_FMAC4 soap_get_PointerTo_wsse__Reference(struct soap *soap, struct _wsse__Reference **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_wsse__Reference(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsse__EncodedString(struct soap *soap, struct wsse__EncodedString *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_wsse__EncodedString))
		soap_serialize_wsse__EncodedString(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsse__EncodedString(struct soap *soap, const char *tag, int id, struct wsse__EncodedString *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wsse__EncodedString, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_wsse__EncodedString(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct wsse__EncodedString ** SOAP_FMAC4 soap_in_PointerTowsse__EncodedString(struct soap *soap, const char *tag, struct wsse__EncodedString **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct wsse__EncodedString **)soap_malloc(soap, sizeof(struct wsse__EncodedString *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_wsse__EncodedString(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct wsse__EncodedString **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wsse__EncodedString, sizeof(struct wsse__EncodedString), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsse__EncodedString(struct soap *soap, struct wsse__EncodedString *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTowsse__EncodedString(soap, tag ? tag : "wsse:EncodedString", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct wsse__EncodedString ** SOAP_FMAC4 soap_get_PointerTowsse__EncodedString(struct soap *soap, struct wsse__EncodedString **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowsse__EncodedString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsse__Password(struct soap *soap, struct _wsse__Password *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__wsse__Password))
		soap_serialize__wsse__Password(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsse__Password(struct soap *soap, const char *tag, int id, struct _wsse__Password *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__wsse__Password, NULL);
	if (id < 0)
		return soap->error;
	return soap_out__wsse__Password(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct _wsse__Password ** SOAP_FMAC4 soap_in_PointerTo_wsse__Password(struct soap *soap, const char *tag, struct _wsse__Password **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct _wsse__Password **)soap_malloc(soap, sizeof(struct _wsse__Password *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in__wsse__Password(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct _wsse__Password **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__wsse__Password, sizeof(struct _wsse__Password), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsse__Password(struct soap *soap, struct _wsse__Password *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_wsse__Password(soap, tag ? tag : "wsse:Password", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct _wsse__Password ** SOAP_FMAC4 soap_get_PointerTo_wsse__Password(struct soap *soap, struct _wsse__Password **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_wsse__Password(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag ? tag : "QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default_string(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
