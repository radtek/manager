#import "C:\gsoap-2.8\gsoap\import\wsse.h"
#import "C:\gsoap-2.8\gsoap\import\wsu.h"
// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* C:\gsoap-2.8\gsoap\bin\win32\service.h
   Generated by wsdl2h 2.8.69 from https://e-factura.sunat.gob.pe/ol-ti-itcpfegem/billService?wsdl and C:\gsoap-2.8\gsoap\bin\win32\typemap.dat
   2018-08-17 00:10:23 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on C:\gsoap-2.8\gsoap\bin\win32\service.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -Onum to optimize output by removing unused schema components.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://service.gem.factura.comppago.registro.servicio.sunat.gob.pe/      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

#include <vector>
template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

sunat = "http://service.gem.factura.comppago.registro.servicio.sunat.gob.pe/"
ns1 = "http://service.sunat.gob.pe"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://service.sunat.gob.pe"
//gsoap ns1   schema namespace:	http://service.sunat.gob.pe
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Built-in XSD type "xs:base64Binary".
class xsd__base64Binary
{	unsigned char *__ptr;
	int __size;
	char *id, *type, *options; // NOTE: non-NULL for DIME/MIME/MTOM XOP attachments only
};


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class ns1__sendSummary.
class ns1__sendSummary;

//  Forward declaration of class ns1__sendSummaryResponse.
class ns1__sendSummaryResponse;

//  Forward declaration of class ns1__getStatus.
class ns1__getStatus;

//  Forward declaration of class ns1__getStatusResponse.
class ns1__getStatusResponse;

//  Forward declaration of class ns1__statusResponse.
class ns1__statusResponse;

//  Forward declaration of class ns1__sendPack.
class ns1__sendPack;

//  Forward declaration of class ns1__sendPackResponse.
class ns1__sendPackResponse;

//  Forward declaration of class ns1__sendBill.
class ns1__sendBill;

//  Forward declaration of class ns1__sendBillResponse.
class ns1__sendBillResponse;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://service.sunat.gob.pe                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://service.sunat.gob.pe                                              *
 *                                                                            *
\******************************************************************************/

/// @brief "http://service.sunat.gob.pe":sendSummary is a complexType.
///
/// class ns1__sendSummary operations:
/// - ns1__sendSummary* soap_new_ns1__sendSummary(soap*) allocate and default initialize
/// - ns1__sendSummary* soap_new_ns1__sendSummary(soap*, int num) allocate array and default initialize values
/// - ns1__sendSummary* soap_new_req_ns1__sendSummary(soap*, ...) allocate, set required members
/// - ns1__sendSummary* soap_new_set_ns1__sendSummary(soap*, ...) allocate, set all public members
/// - ns1__sendSummary::soap_default(soap*) default initialize members
/// - int soap_read_ns1__sendSummary(soap*, ns1__sendSummary*) deserialize from a stream
/// - int soap_write_ns1__sendSummary(soap*, ns1__sendSummary*) serialize to a stream
/// - ns1__sendSummary* ns1__sendSummary::soap_dup(soap*) returns deep copy of ns1__sendSummary, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__sendSummary::soap_del() deep deletes ns1__sendSummary data members, use only after ns1__sendSummary::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__sendSummary
{ public:
/// Element "fileName" of XSD type xs:string.
    std::string*                         fileName                       0;	///< Optional element.
/// MTOM attachment with content types application/octet-stream.
/// Element "contentFile" of XSD type xs:base64Binary.
    xsd__base64Binary*                   contentFile                    0;	///< Optional element.
/// Element "partyType" of XSD type xs:string.
    std::string*                         partyType                      0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "http://service.sunat.gob.pe":sendSummaryResponse is a complexType.
///
/// class ns1__sendSummaryResponse operations:
/// - ns1__sendSummaryResponse* soap_new_ns1__sendSummaryResponse(soap*) allocate and default initialize
/// - ns1__sendSummaryResponse* soap_new_ns1__sendSummaryResponse(soap*, int num) allocate array and default initialize values
/// - ns1__sendSummaryResponse* soap_new_req_ns1__sendSummaryResponse(soap*, ...) allocate, set required members
/// - ns1__sendSummaryResponse* soap_new_set_ns1__sendSummaryResponse(soap*, ...) allocate, set all public members
/// - ns1__sendSummaryResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__sendSummaryResponse(soap*, ns1__sendSummaryResponse*) deserialize from a stream
/// - int soap_write_ns1__sendSummaryResponse(soap*, ns1__sendSummaryResponse*) serialize to a stream
/// - ns1__sendSummaryResponse* ns1__sendSummaryResponse::soap_dup(soap*) returns deep copy of ns1__sendSummaryResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__sendSummaryResponse::soap_del() deep deletes ns1__sendSummaryResponse data members, use only after ns1__sendSummaryResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__sendSummaryResponse
{ public:
/// Element "ticket" of XSD type xs:string.
    std::string*                         ticket                         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "http://service.sunat.gob.pe":getStatus is a complexType.
///
/// class ns1__getStatus operations:
/// - ns1__getStatus* soap_new_ns1__getStatus(soap*) allocate and default initialize
/// - ns1__getStatus* soap_new_ns1__getStatus(soap*, int num) allocate array and default initialize values
/// - ns1__getStatus* soap_new_req_ns1__getStatus(soap*, ...) allocate, set required members
/// - ns1__getStatus* soap_new_set_ns1__getStatus(soap*, ...) allocate, set all public members
/// - ns1__getStatus::soap_default(soap*) default initialize members
/// - int soap_read_ns1__getStatus(soap*, ns1__getStatus*) deserialize from a stream
/// - int soap_write_ns1__getStatus(soap*, ns1__getStatus*) serialize to a stream
/// - ns1__getStatus* ns1__getStatus::soap_dup(soap*) returns deep copy of ns1__getStatus, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__getStatus::soap_del() deep deletes ns1__getStatus data members, use only after ns1__getStatus::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__getStatus
{ public:
/// Element "ticket" of XSD type xs:string.
    std::string*                         ticket                         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "http://service.sunat.gob.pe":getStatusResponse is a complexType.
///
/// class ns1__getStatusResponse operations:
/// - ns1__getStatusResponse* soap_new_ns1__getStatusResponse(soap*) allocate and default initialize
/// - ns1__getStatusResponse* soap_new_ns1__getStatusResponse(soap*, int num) allocate array and default initialize values
/// - ns1__getStatusResponse* soap_new_req_ns1__getStatusResponse(soap*, ...) allocate, set required members
/// - ns1__getStatusResponse* soap_new_set_ns1__getStatusResponse(soap*, ...) allocate, set all public members
/// - ns1__getStatusResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__getStatusResponse(soap*, ns1__getStatusResponse*) deserialize from a stream
/// - int soap_write_ns1__getStatusResponse(soap*, ns1__getStatusResponse*) serialize to a stream
/// - ns1__getStatusResponse* ns1__getStatusResponse::soap_dup(soap*) returns deep copy of ns1__getStatusResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__getStatusResponse::soap_del() deep deletes ns1__getStatusResponse data members, use only after ns1__getStatusResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__getStatusResponse
{ public:
/// Element "status" of XSD type "http://service.sunat.gob.pe":statusResponse.
    ns1__statusResponse*                 status                         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "http://service.sunat.gob.pe":statusResponse is a complexType.
///
/// class ns1__statusResponse operations:
/// - ns1__statusResponse* soap_new_ns1__statusResponse(soap*) allocate and default initialize
/// - ns1__statusResponse* soap_new_ns1__statusResponse(soap*, int num) allocate array and default initialize values
/// - ns1__statusResponse* soap_new_req_ns1__statusResponse(soap*, ...) allocate, set required members
/// - ns1__statusResponse* soap_new_set_ns1__statusResponse(soap*, ...) allocate, set all public members
/// - ns1__statusResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__statusResponse(soap*, ns1__statusResponse*) deserialize from a stream
/// - int soap_write_ns1__statusResponse(soap*, ns1__statusResponse*) serialize to a stream
/// - ns1__statusResponse* ns1__statusResponse::soap_dup(soap*) returns deep copy of ns1__statusResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__statusResponse::soap_del() deep deletes ns1__statusResponse data members, use only after ns1__statusResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__statusResponse
{ public:
/// Element "content" of XSD type xs:base64Binary.
    xsd__base64Binary*                   content                        0;	///< Optional element.
/// Element "statusCode" of XSD type xs:string.
    std::string*                         statusCode                     0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "http://service.sunat.gob.pe":sendPack is a complexType.
///
/// class ns1__sendPack operations:
/// - ns1__sendPack* soap_new_ns1__sendPack(soap*) allocate and default initialize
/// - ns1__sendPack* soap_new_ns1__sendPack(soap*, int num) allocate array and default initialize values
/// - ns1__sendPack* soap_new_req_ns1__sendPack(soap*, ...) allocate, set required members
/// - ns1__sendPack* soap_new_set_ns1__sendPack(soap*, ...) allocate, set all public members
/// - ns1__sendPack::soap_default(soap*) default initialize members
/// - int soap_read_ns1__sendPack(soap*, ns1__sendPack*) deserialize from a stream
/// - int soap_write_ns1__sendPack(soap*, ns1__sendPack*) serialize to a stream
/// - ns1__sendPack* ns1__sendPack::soap_dup(soap*) returns deep copy of ns1__sendPack, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__sendPack::soap_del() deep deletes ns1__sendPack data members, use only after ns1__sendPack::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__sendPack
{ public:
/// Element "fileName" of XSD type xs:string.
    std::string*                         fileName                       0;	///< Optional element.
/// MTOM attachment with content types application/octet-stream.
/// Element "contentFile" of XSD type xs:base64Binary.
    xsd__base64Binary*                   contentFile                    0;	///< Optional element.
/// Element "partyType" of XSD type xs:string.
    std::string*                         partyType                      0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "http://service.sunat.gob.pe":sendPackResponse is a complexType.
///
/// class ns1__sendPackResponse operations:
/// - ns1__sendPackResponse* soap_new_ns1__sendPackResponse(soap*) allocate and default initialize
/// - ns1__sendPackResponse* soap_new_ns1__sendPackResponse(soap*, int num) allocate array and default initialize values
/// - ns1__sendPackResponse* soap_new_req_ns1__sendPackResponse(soap*, ...) allocate, set required members
/// - ns1__sendPackResponse* soap_new_set_ns1__sendPackResponse(soap*, ...) allocate, set all public members
/// - ns1__sendPackResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__sendPackResponse(soap*, ns1__sendPackResponse*) deserialize from a stream
/// - int soap_write_ns1__sendPackResponse(soap*, ns1__sendPackResponse*) serialize to a stream
/// - ns1__sendPackResponse* ns1__sendPackResponse::soap_dup(soap*) returns deep copy of ns1__sendPackResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__sendPackResponse::soap_del() deep deletes ns1__sendPackResponse data members, use only after ns1__sendPackResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__sendPackResponse
{ public:
/// Element "ticket" of XSD type xs:string.
    std::string*                         ticket                         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "http://service.sunat.gob.pe":sendBill is a complexType.
///
/// class ns1__sendBill operations:
/// - ns1__sendBill* soap_new_ns1__sendBill(soap*) allocate and default initialize
/// - ns1__sendBill* soap_new_ns1__sendBill(soap*, int num) allocate array and default initialize values
/// - ns1__sendBill* soap_new_req_ns1__sendBill(soap*, ...) allocate, set required members
/// - ns1__sendBill* soap_new_set_ns1__sendBill(soap*, ...) allocate, set all public members
/// - ns1__sendBill::soap_default(soap*) default initialize members
/// - int soap_read_ns1__sendBill(soap*, ns1__sendBill*) deserialize from a stream
/// - int soap_write_ns1__sendBill(soap*, ns1__sendBill*) serialize to a stream
/// - ns1__sendBill* ns1__sendBill::soap_dup(soap*) returns deep copy of ns1__sendBill, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__sendBill::soap_del() deep deletes ns1__sendBill data members, use only after ns1__sendBill::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__sendBill
{ public:
/// Element "fileName" of XSD type xs:string.
    std::string*                         fileName                       0;	///< Optional element.
/// MTOM attachment with content types application/octet-stream.
/// Element "contentFile" of XSD type xs:base64Binary.
    xsd__base64Binary*                   contentFile                    0;	///< Optional element.
/// Element "partyType" of XSD type xs:string.
    std::string*                         partyType                      0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief "http://service.sunat.gob.pe":sendBillResponse is a complexType.
///
/// class ns1__sendBillResponse operations:
/// - ns1__sendBillResponse* soap_new_ns1__sendBillResponse(soap*) allocate and default initialize
/// - ns1__sendBillResponse* soap_new_ns1__sendBillResponse(soap*, int num) allocate array and default initialize values
/// - ns1__sendBillResponse* soap_new_req_ns1__sendBillResponse(soap*, ...) allocate, set required members
/// - ns1__sendBillResponse* soap_new_set_ns1__sendBillResponse(soap*, ...) allocate, set all public members
/// - ns1__sendBillResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__sendBillResponse(soap*, ns1__sendBillResponse*) deserialize from a stream
/// - int soap_write_ns1__sendBillResponse(soap*, ns1__sendBillResponse*) serialize to a stream
/// - ns1__sendBillResponse* ns1__sendBillResponse::soap_dup(soap*) returns deep copy of ns1__sendBillResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__sendBillResponse::soap_del() deep deletes ns1__sendBillResponse data members, use only after ns1__sendBillResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__sendBillResponse
{ public:
/// Element "applicationResponse" of XSD type xs:base64Binary.
    xsd__base64Binary*                   applicationResponse            0;	///< Optional element.
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://service.sunat.gob.pe                                              *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://service.sunat.gob.pe":getStatus of XSD type "http://service.sunat.gob.pe":getStatus.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://service.sunat.gob.pe":getStatusResponse of XSD type "http://service.sunat.gob.pe":getStatusResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://service.sunat.gob.pe":sendBill of XSD type "http://service.sunat.gob.pe":sendBill.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://service.sunat.gob.pe":sendBillResponse of XSD type "http://service.sunat.gob.pe":sendBillResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://service.sunat.gob.pe":sendPack of XSD type "http://service.sunat.gob.pe":sendPack.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://service.sunat.gob.pe":sendPackResponse of XSD type "http://service.sunat.gob.pe":sendPackResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://service.sunat.gob.pe":sendSummary of XSD type "http://service.sunat.gob.pe":sendSummary.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://service.sunat.gob.pe":sendSummaryResponse of XSD type "http://service.sunat.gob.pe":sendSummaryResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://service.sunat.gob.pe                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap sunat service name:	BillServicePortBinding 
//gsoap sunat service type:	billService 
//gsoap sunat service port:	https://e-factura.sunat.gob.pe:443/ol-ti-itcpfegem/billService 
//gsoap sunat service namespace:	http://service.gem.factura.comppago.registro.servicio.sunat.gob.pe/ 
//gsoap sunat service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref BillServicePortBinding

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page BillServicePortBinding Binding "BillServicePortBinding"

@section BillServicePortBinding_operations Operations of Binding "BillServicePortBinding"

  - @ref __sunat__getStatus

  - @ref __sunat__sendBill

  - @ref __sunat__sendPack

  - @ref __sunat__sendSummary

@section BillServicePortBinding_ports Default endpoints of Binding "BillServicePortBinding"

  - https://e-factura.sunat.gob.pe:443/ol-ti-itcpfegem/billService

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   BillServicePortBinding                                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __sunat__getStatus                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__sunat__getStatus" of service binding "BillServicePortBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://e-factura.sunat.gob.pe:443/ol-ti-itcpfegem/billService

  - Default SOAP action or REST location path:
    - "urn:getStatus"

  - Addressing input action: "urn:getStatus"

  - Addressing output action: "urn:getStatusResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___sunat__getStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__getStatus*                     ns1__getStatus_,
    // output parameters:
    ns1__getStatusResponse             &ns1__getStatusResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __sunat__getStatus(
    struct soap *soap,
    // input parameters:
    ns1__getStatus*                     ns1__getStatus_,
    // output parameters:
    ns1__getStatusResponse             &ns1__getStatusResponse_
  );
@endcode

C++ proxy class (defined in soapBillServicePortBindingProxy.h generated with soapcpp2):
@code
  class BillServicePortBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBillServicePortBindingService.h generated with soapcpp2):
@code
  class BillServicePortBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap sunat service method-protocol:	getStatus SOAP
//gsoap sunat service method-style:	getStatus document
//gsoap sunat service method-encoding:	getStatus literal
//gsoap sunat service method-input-action:	getStatus urn:getStatus
//gsoap sunat service method-output-action:	getStatus urn:getStatusResponse
int __sunat__getStatus(
    ns1__getStatus*                     ns1__getStatus_,	///< Input parameter
    ns1__getStatusResponse             &ns1__getStatusResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __sunat__sendBill                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__sunat__sendBill" of service binding "BillServicePortBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://e-factura.sunat.gob.pe:443/ol-ti-itcpfegem/billService

  - Default SOAP action or REST location path:
    - "urn:sendBill"

  - Addressing input action: "urn:sendBill"

  - Addressing output action: "urn:sendBillResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___sunat__sendBill(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__sendBill*                      ns1__sendBill_,
    // output parameters:
    ns1__sendBillResponse              &ns1__sendBillResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __sunat__sendBill(
    struct soap *soap,
    // input parameters:
    ns1__sendBill*                      ns1__sendBill_,
    // output parameters:
    ns1__sendBillResponse              &ns1__sendBillResponse_
  );
@endcode

C++ proxy class (defined in soapBillServicePortBindingProxy.h generated with soapcpp2):
@code
  class BillServicePortBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBillServicePortBindingService.h generated with soapcpp2):
@code
  class BillServicePortBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap sunat service method-protocol:	sendBill SOAP
//gsoap sunat service method-style:	sendBill document
//gsoap sunat service method-encoding:	sendBill literal
//gsoap sunat service method-input-action:	sendBill urn:sendBill
//gsoap sunat service method-output-action:	sendBill urn:sendBillResponse
int __sunat__sendBill(
    ns1__sendBill*                      ns1__sendBill_,	///< Input parameter
    ns1__sendBillResponse              &ns1__sendBillResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __sunat__sendPack                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__sunat__sendPack" of service binding "BillServicePortBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://e-factura.sunat.gob.pe:443/ol-ti-itcpfegem/billService

  - Default SOAP action or REST location path:
    - "urn:sendPack"

  - Addressing input action: "urn:sendPack"

  - Addressing output action: "urn:sendPackResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___sunat__sendPack(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__sendPack*                      ns1__sendPack_,
    // output parameters:
    ns1__sendPackResponse              &ns1__sendPackResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __sunat__sendPack(
    struct soap *soap,
    // input parameters:
    ns1__sendPack*                      ns1__sendPack_,
    // output parameters:
    ns1__sendPackResponse              &ns1__sendPackResponse_
  );
@endcode

C++ proxy class (defined in soapBillServicePortBindingProxy.h generated with soapcpp2):
@code
  class BillServicePortBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBillServicePortBindingService.h generated with soapcpp2):
@code
  class BillServicePortBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap sunat service method-protocol:	sendPack SOAP
//gsoap sunat service method-style:	sendPack document
//gsoap sunat service method-encoding:	sendPack literal
//gsoap sunat service method-input-action:	sendPack urn:sendPack
//gsoap sunat service method-output-action:	sendPack urn:sendPackResponse
int __sunat__sendPack(
    ns1__sendPack*                      ns1__sendPack_,	///< Input parameter
    ns1__sendPackResponse              &ns1__sendPackResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __sunat__sendSummary                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__sunat__sendSummary" of service binding "BillServicePortBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://e-factura.sunat.gob.pe:443/ol-ti-itcpfegem/billService

  - Default SOAP action or REST location path:
    - "urn:sendSummary"

  - Addressing input action: "urn:sendSummary"

  - Addressing output action: "urn:sendSummaryResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___sunat__sendSummary(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__sendSummary*                   ns1__sendSummary_,
    // output parameters:
    ns1__sendSummaryResponse           &ns1__sendSummaryResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __sunat__sendSummary(
    struct soap *soap,
    // input parameters:
    ns1__sendSummary*                   ns1__sendSummary_,
    // output parameters:
    ns1__sendSummaryResponse           &ns1__sendSummaryResponse_
  );
@endcode

C++ proxy class (defined in soapBillServicePortBindingProxy.h generated with soapcpp2):
@code
  class BillServicePortBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBillServicePortBindingService.h generated with soapcpp2):
@code
  class BillServicePortBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap sunat service method-protocol:	sendSummary SOAP
//gsoap sunat service method-style:	sendSummary document
//gsoap sunat service method-encoding:	sendSummary literal
//gsoap sunat service method-input-action:	sendSummary urn:sendSummary
//gsoap sunat service method-output-action:	sendSummary urn:sendSummaryResponse
int __sunat__sendSummary(
    ns1__sendSummary*                   ns1__sendSummary_,	///< Input parameter
    ns1__sendSummaryResponse           &ns1__sendSummaryResponse_	///< Output parameter
);

/**

@page BillServicePortBinding Binding "BillServicePortBinding"

@section BillServicePortBinding_policy_enablers Policy Enablers of Binding "BillServicePortBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section  Top-level root elements of schema ""

@section ns1 Top-level root elements of schema "http://service.sunat.gob.pe"

  - <ns1:getStatus> (use wsdl2h option -g to auto-generate type _ns1__getStatus)

  - <ns1:getStatusResponse> (use wsdl2h option -g to auto-generate type _ns1__getStatusResponse)

  - <ns1:sendBill> (use wsdl2h option -g to auto-generate type _ns1__sendBill)

  - <ns1:sendBillResponse> (use wsdl2h option -g to auto-generate type _ns1__sendBillResponse)

  - <ns1:sendPack> (use wsdl2h option -g to auto-generate type _ns1__sendPack)

  - <ns1:sendPackResponse> (use wsdl2h option -g to auto-generate type _ns1__sendPackResponse)

  - <ns1:sendSummary> (use wsdl2h option -g to auto-generate type _ns1__sendSummary)

  - <ns1:sendSummaryResponse> (use wsdl2h option -g to auto-generate type _ns1__sendSummaryResponse)

*/

/* End of C:\gsoap-2.8\gsoap\bin\win32\service.h */
