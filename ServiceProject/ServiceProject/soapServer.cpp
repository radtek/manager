/* soapServer.cpp
   Generated by gSOAP 2.8.69 for service.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapServer.cpp ver 2.8.69 2018-08-31 16:15:10 GMT")
extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap *soap)
{
#ifndef WITH_FASTCGI
	soap->keep_alive = soap->max_keep_alive + 1;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (soap->keep_alive > 0 && soap->max_keep_alive > 0)
			soap->keep_alive--;
#endif
		if (soap_begin_serve(soap))
		{	if (soap->error >= SOAP_STOP)
				continue;
			return soap->error;
		}
		if ((soap_serve_request(soap) || (soap->fserveloop && soap->fserveloop(soap))) && soap->error && soap->error < SOAP_STOP)
		{
#ifdef WITH_FASTCGI
			soap_send_fault(soap);
#else
			return soap_send_fault(soap);
#endif
		}
#ifdef WITH_FASTCGI
		soap_destroy(soap);
		soap_end(soap);
	} while (1);
#else
	} while (soap->keep_alive);
#endif
	return SOAP_OK;
}

#ifndef WITH_NOSERVEREQUEST
extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap *soap)
{
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:getStatus"))
		return soap_serve___sunat__getStatus(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:sendBill"))
		return soap_serve___sunat__sendBill(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:sendPack"))
		return soap_serve___sunat__sendPack(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:sendSummary"))
		return soap_serve___sunat__sendSummary(soap);
	return soap->error = SOAP_NO_METHOD;
}
#endif

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___sunat__getStatus(struct soap *soap)
{	struct __sunat__getStatus soap_tmp___sunat__getStatus;
	ns1__getStatusResponse ns1__getStatusResponse_;
	ns1__getStatusResponse_.soap_default(soap);
	soap_default___sunat__getStatus(soap, &soap_tmp___sunat__getStatus);
	if (!soap_get___sunat__getStatus(soap, &soap_tmp___sunat__getStatus, "-sunat:getStatus", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = __sunat__getStatus(soap, soap_tmp___sunat__getStatus.ns1__getStatus_, ns1__getStatusResponse_);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__getStatusResponse_.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__getStatusResponse_.soap_put(soap, "ns1:getStatusResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__getStatusResponse_.soap_put(soap, "ns1:getStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___sunat__sendBill(struct soap *soap)
{	struct __sunat__sendBill soap_tmp___sunat__sendBill;
	ns1__sendBillResponse ns1__sendBillResponse_;
	ns1__sendBillResponse_.soap_default(soap);
	soap_default___sunat__sendBill(soap, &soap_tmp___sunat__sendBill);
	if (!soap_get___sunat__sendBill(soap, &soap_tmp___sunat__sendBill, "-sunat:sendBill", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = __sunat__sendBill(soap, soap_tmp___sunat__sendBill.ns1__sendBill_, ns1__sendBillResponse_);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__sendBillResponse_.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__sendBillResponse_.soap_put(soap, "ns1:sendBillResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__sendBillResponse_.soap_put(soap, "ns1:sendBillResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___sunat__sendPack(struct soap *soap)
{	struct __sunat__sendPack soap_tmp___sunat__sendPack;
	ns1__sendPackResponse ns1__sendPackResponse_;
	ns1__sendPackResponse_.soap_default(soap);
	soap_default___sunat__sendPack(soap, &soap_tmp___sunat__sendPack);
	if (!soap_get___sunat__sendPack(soap, &soap_tmp___sunat__sendPack, "-sunat:sendPack", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = __sunat__sendPack(soap, soap_tmp___sunat__sendPack.ns1__sendPack_, ns1__sendPackResponse_);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__sendPackResponse_.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__sendPackResponse_.soap_put(soap, "ns1:sendPackResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__sendPackResponse_.soap_put(soap, "ns1:sendPackResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___sunat__sendSummary(struct soap *soap)
{	struct __sunat__sendSummary soap_tmp___sunat__sendSummary;
	ns1__sendSummaryResponse ns1__sendSummaryResponse_;
	ns1__sendSummaryResponse_.soap_default(soap);
	soap_default___sunat__sendSummary(soap, &soap_tmp___sunat__sendSummary);
	if (!soap_get___sunat__sendSummary(soap, &soap_tmp___sunat__sendSummary, "-sunat:sendSummary", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = __sunat__sendSummary(soap, soap_tmp___sunat__sendSummary.ns1__sendSummary_, ns1__sendSummaryResponse_);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__sendSummaryResponse_.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__sendSummaryResponse_.soap_put(soap, "ns1:sendSummaryResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__sendSummaryResponse_.soap_put(soap, "ns1:sendSummaryResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapServer.cpp */
